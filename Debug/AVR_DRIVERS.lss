
AVR_DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000390c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000158  00800060  0000390c  000039a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006a  008001b8  008001b8  00003af8  2**0
                  ALLOC
  3 .stab         0000699c  00000000  00000000  00003af8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000380e  00000000  00000000  0000a494  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000dca2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000de62  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000e076  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00010688  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00011b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00012e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00013044  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0001334b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013d65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__vector_1>
       8:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__vector_2>
       c:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <__vector_3>
      10:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__vector_4>
      14:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__vector_5>
      18:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__vector_10>
      2c:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__vector_11>
      30:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3b       	cpi	r26, 0xB8	; 184
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 eb       	ldi	r26, 0xB8	; 184
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 32       	cpi	r26, 0x22	; 34
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 09 19 	call	0x3212	; 0x3212 <main>
      8a:	0c 94 84 1c 	jmp	0x3908	; 0x3908 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 79 19 	jmp	0x32f2	; 0x32f2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 95 19 	jmp	0x332a	; 0x332a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 85 19 	jmp	0x330a	; 0x330a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a1 19 	jmp	0x3342	; 0x3342 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 85 19 	jmp	0x330a	; 0x330a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a1 19 	jmp	0x3342	; 0x3342 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 79 19 	jmp	0x32f2	; 0x32f2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 95 19 	jmp	0x332a	; 0x332a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e6       	ldi	r22, 0x63	; 99
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 85 19 	jmp	0x330a	; 0x330a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a1 19 	jmp	0x3342	; 0x3342 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 85 19 	jmp	0x330a	; 0x330a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a1 19 	jmp	0x3342	; 0x3342 <__epilogue_restores__+0x18>

0000084a <__lesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 85 19 	jmp	0x330a	; 0x330a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a1 19 	jmp	0x3342	; 0x3342 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 89 19 	jmp	0x3312	; 0x3312 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 a5 19 	jmp	0x334a	; 0x334a <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e5 59       	subi	r30, 0x95	; 149
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <WDT_void_Enable>:
#include "../../_MY_LIBS/BIT_MATH.h"

/* ----------------- Section : Software Interfaces Implementation -----------------*/
void WDT_void_Enable (u8 Copy_u8_Time)
{
	switch (Copy_u8_Time)
     eea:	84 30       	cpi	r24, 0x04	; 4
     eec:	d1 f1       	breq	.+116    	; 0xf62 <WDT_void_Enable+0x78>
     eee:	85 30       	cpi	r24, 0x05	; 5
     ef0:	40 f4       	brcc	.+16     	; 0xf02 <WDT_void_Enable+0x18>
     ef2:	82 30       	cpi	r24, 0x02	; 2
     ef4:	f1 f0       	breq	.+60     	; 0xf32 <WDT_void_Enable+0x48>
     ef6:	83 30       	cpi	r24, 0x03	; 3
     ef8:	40 f5       	brcc	.+80     	; 0xf4a <WDT_void_Enable+0x60>
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	09 f0       	breq	.+2      	; 0xf00 <WDT_void_Enable+0x16>
     efe:	6c c0       	rjmp	.+216    	; 0xfd8 <WDT_void_Enable+0xee>
     f00:	0c c0       	rjmp	.+24     	; 0xf1a <WDT_void_Enable+0x30>
     f02:	86 30       	cpi	r24, 0x06	; 6
     f04:	09 f4       	brne	.+2      	; 0xf08 <WDT_void_Enable+0x1e>
     f06:	45 c0       	rjmp	.+138    	; 0xf92 <WDT_void_Enable+0xa8>
     f08:	86 30       	cpi	r24, 0x06	; 6
     f0a:	b8 f1       	brcs	.+110    	; 0xf7a <WDT_void_Enable+0x90>
     f0c:	87 30       	cpi	r24, 0x07	; 7
     f0e:	09 f4       	brne	.+2      	; 0xf12 <WDT_void_Enable+0x28>
     f10:	4c c0       	rjmp	.+152    	; 0xfaa <WDT_void_Enable+0xc0>
     f12:	88 30       	cpi	r24, 0x08	; 8
     f14:	09 f0       	breq	.+2      	; 0xf18 <WDT_void_Enable+0x2e>
     f16:	60 c0       	rjmp	.+192    	; 0xfd8 <WDT_void_Enable+0xee>
     f18:	54 c0       	rjmp	.+168    	; 0xfc2 <WDT_void_Enable+0xd8>
	{
		case WDT_16_3_ms:
			CLR_BIT(_WDTCR, _WDP0);
     f1a:	e1 e4       	ldi	r30, 0x41	; 65
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	8e 7f       	andi	r24, 0xFE	; 254
     f22:	80 83       	st	Z, r24
			CLR_BIT(_WDTCR, _WDP1);
     f24:	80 81       	ld	r24, Z
     f26:	8d 7f       	andi	r24, 0xFD	; 253
     f28:	80 83       	st	Z, r24
			CLR_BIT(_WDTCR, _WDP2);
     f2a:	80 81       	ld	r24, Z
     f2c:	8b 7f       	andi	r24, 0xFB	; 251
     f2e:	80 83       	st	Z, r24
     f30:	53 c0       	rjmp	.+166    	; 0xfd8 <WDT_void_Enable+0xee>
			break;
		case WDT_32_5_ms:
			SET_BIT(_WDTCR, _WDP0);
     f32:	e1 e4       	ldi	r30, 0x41	; 65
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	81 60       	ori	r24, 0x01	; 1
     f3a:	80 83       	st	Z, r24
			CLR_BIT(_WDTCR, _WDP1);
     f3c:	80 81       	ld	r24, Z
     f3e:	8d 7f       	andi	r24, 0xFD	; 253
     f40:	80 83       	st	Z, r24
			CLR_BIT(_WDTCR, _WDP2);
     f42:	80 81       	ld	r24, Z
     f44:	8b 7f       	andi	r24, 0xFB	; 251
     f46:	80 83       	st	Z, r24
     f48:	47 c0       	rjmp	.+142    	; 0xfd8 <WDT_void_Enable+0xee>
			break;
		case WDT_65_0_ms:
			CLR_BIT(_WDTCR, _WDP0);
     f4a:	e1 e4       	ldi	r30, 0x41	; 65
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8e 7f       	andi	r24, 0xFE	; 254
     f52:	80 83       	st	Z, r24
			SET_BIT(_WDTCR, _WDP1);
     f54:	80 81       	ld	r24, Z
     f56:	82 60       	ori	r24, 0x02	; 2
     f58:	80 83       	st	Z, r24
			CLR_BIT(_WDTCR, _WDP2);
     f5a:	80 81       	ld	r24, Z
     f5c:	8b 7f       	andi	r24, 0xFB	; 251
     f5e:	80 83       	st	Z, r24
     f60:	3b c0       	rjmp	.+118    	; 0xfd8 <WDT_void_Enable+0xee>
			break;
		case WDT_0_13_ms:
			SET_BIT(_WDTCR, _WDP0);
     f62:	e1 e4       	ldi	r30, 0x41	; 65
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	81 60       	ori	r24, 0x01	; 1
     f6a:	80 83       	st	Z, r24
			SET_BIT(_WDTCR, _WDP1);
     f6c:	80 81       	ld	r24, Z
     f6e:	82 60       	ori	r24, 0x02	; 2
     f70:	80 83       	st	Z, r24
			CLR_BIT(_WDTCR, _WDP2);
     f72:	80 81       	ld	r24, Z
     f74:	8b 7f       	andi	r24, 0xFB	; 251
     f76:	80 83       	st	Z, r24
     f78:	2f c0       	rjmp	.+94     	; 0xfd8 <WDT_void_Enable+0xee>
			break;
		case WDT_0_26_ms:
			CLR_BIT(_WDTCR, _WDP0);
     f7a:	e1 e4       	ldi	r30, 0x41	; 65
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	8e 7f       	andi	r24, 0xFE	; 254
     f82:	80 83       	st	Z, r24
			CLR_BIT(_WDTCR, _WDP1);
     f84:	80 81       	ld	r24, Z
     f86:	8d 7f       	andi	r24, 0xFD	; 253
     f88:	80 83       	st	Z, r24
			SET_BIT(_WDTCR, _WDP2);
     f8a:	80 81       	ld	r24, Z
     f8c:	84 60       	ori	r24, 0x04	; 4
     f8e:	80 83       	st	Z, r24
     f90:	23 c0       	rjmp	.+70     	; 0xfd8 <WDT_void_Enable+0xee>
			break;
		case WDT_0_52_ms:
			SET_BIT(_WDTCR, _WDP0);
     f92:	e1 e4       	ldi	r30, 0x41	; 65
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	81 60       	ori	r24, 0x01	; 1
     f9a:	80 83       	st	Z, r24
			CLR_BIT(_WDTCR, _WDP1);
     f9c:	80 81       	ld	r24, Z
     f9e:	8d 7f       	andi	r24, 0xFD	; 253
     fa0:	80 83       	st	Z, r24
			SET_BIT(_WDTCR, _WDP2);
     fa2:	80 81       	ld	r24, Z
     fa4:	84 60       	ori	r24, 0x04	; 4
     fa6:	80 83       	st	Z, r24
     fa8:	17 c0       	rjmp	.+46     	; 0xfd8 <WDT_void_Enable+0xee>
			break;
		case WDT_01_0_ms:
			CLR_BIT(_WDTCR, _WDP0);
     faa:	e1 e4       	ldi	r30, 0x41	; 65
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	8e 7f       	andi	r24, 0xFE	; 254
     fb2:	80 83       	st	Z, r24
			SET_BIT(_WDTCR, _WDP1);
     fb4:	80 81       	ld	r24, Z
     fb6:	82 60       	ori	r24, 0x02	; 2
     fb8:	80 83       	st	Z, r24
			SET_BIT(_WDTCR, _WDP2);
     fba:	80 81       	ld	r24, Z
     fbc:	84 60       	ori	r24, 0x04	; 4
     fbe:	80 83       	st	Z, r24
     fc0:	0b c0       	rjmp	.+22     	; 0xfd8 <WDT_void_Enable+0xee>
			break;
		case WDT_02_1_ms:
			SET_BIT(_WDTCR, _WDP0);
     fc2:	e1 e4       	ldi	r30, 0x41	; 65
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	81 60       	ori	r24, 0x01	; 1
     fca:	80 83       	st	Z, r24
			SET_BIT(_WDTCR, _WDP1);
     fcc:	80 81       	ld	r24, Z
     fce:	82 60       	ori	r24, 0x02	; 2
     fd0:	80 83       	st	Z, r24
			SET_BIT(_WDTCR, _WDP2);
     fd2:	80 81       	ld	r24, Z
     fd4:	84 60       	ori	r24, 0x04	; 4
     fd6:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
	SET_BIT(_WDTCR, _WDE);
     fd8:	e1 e4       	ldi	r30, 0x41	; 65
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	88 60       	ori	r24, 0x08	; 8
     fe0:	80 83       	st	Z, r24
}
     fe2:	08 95       	ret

00000fe4 <WDT_void_Disable>:

void WDT_void_Disable(void)
{
	_WDTCR = (1<<_WDTOE) | (1<<_WDE);
     fe4:	e1 e4       	ldi	r30, 0x41	; 65
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	88 e1       	ldi	r24, 0x18	; 24
     fea:	80 83       	st	Z, r24
	_WDTCR = 0x00;
     fec:	10 82       	st	Z, r1
}
     fee:	08 95       	ret

00000ff0 <UART_Init>:

/* ----------------- Section : Software Interfaces Implementation -----------------*/
void UART_Init()
{
	u16 rest = (1000000 /UART_BAUDRATE) - 1;
	_UBRRL = rest;
     ff0:	87 e6       	ldi	r24, 0x67	; 103
     ff2:	89 b9       	out	0x09, r24	; 9
	switch(UART_SPEED_MODE)
	{
	case ASY_NORMAL_SPEED:
		CLR_BIT(_UCSRA,1);
     ff4:	eb e2       	ldi	r30, 0x2B	; 43
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	8d 7f       	andi	r24, 0xFD	; 253
     ffc:	80 83       	st	Z, r24
	case SYN_MASTER_MODE:
		SET_BIT(_UCSRC, 6);
		break;
	}
	// ENABLE RX TX
	SET_BIT(_UCSRB,4);
     ffe:	ea e2       	ldi	r30, 0x2A	; 42
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	80 61       	ori	r24, 0x10	; 16
    1006:	80 83       	st	Z, r24
	SET_BIT(_UCSRB,3);
    1008:	80 81       	ld	r24, Z
    100a:	88 60       	ori	r24, 0x08	; 8
    100c:	80 83       	st	Z, r24
}
    100e:	08 95       	ret

00001010 <UART_TransmitData>:

void UART_TransmitData(u8 data)
{
    1010:	98 2f       	mov	r25, r24
	while(!GET_BIT(_UCSRA,5));
    1012:	eb e2       	ldi	r30, 0x2B	; 43
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	85 ff       	sbrs	r24, 5
    101a:	fd cf       	rjmp	.-6      	; 0x1016 <UART_TransmitData+0x6>
	_UDR = data;
    101c:	9c b9       	out	0x0c, r25	; 12
}
    101e:	08 95       	ret

00001020 <UART_ReceiveData>:

u8 UART_ReceiveData()
{
	while(!GET_BIT(_UCSRA,7));
    1020:	eb e2       	ldi	r30, 0x2B	; 43
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	88 23       	and	r24, r24
    1028:	ec f7       	brge	.-6      	; 0x1024 <UART_ReceiveData+0x4>
	return _UDR;
    102a:	8c b1       	in	r24, 0x0c	; 12
}
    102c:	08 95       	ret

0000102e <UART_TransmitString>:
    int receivedNumber = atoi(rxBuffer);

    return receivedNumber;
}

void UART_TransmitString(const char* str) {
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	fc 01       	movw	r30, r24
    // Iterate over each character in the string until the null terminator is reached
    for (int i = 0; str[i] != '\0'; i++) {
    1034:	80 81       	ld	r24, Z
    1036:	88 23       	and	r24, r24
    1038:	39 f0       	breq	.+14     	; 0x1048 <UART_TransmitString+0x1a>
    103a:	ef 01       	movw	r28, r30
        UART_TransmitData(str[i]); // Transmit each character
    103c:	0e 94 08 08 	call	0x1010	; 0x1010 <UART_TransmitData>
    return receivedNumber;
}

void UART_TransmitString(const char* str) {
    // Iterate over each character in the string until the null terminator is reached
    for (int i = 0; str[i] != '\0'; i++) {
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	21 96       	adiw	r28, 0x01	; 1
    1044:	88 23       	and	r24, r24
    1046:	d1 f7       	brne	.-12     	; 0x103c <UART_TransmitString+0xe>
        UART_TransmitData(str[i]); // Transmit each character
    }
}
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	08 95       	ret

0000104e <UART_ReceiveNumber>:
}



// Function to receive a number over UART, terminated by '\r' (Enter key)
int UART_ReceiveNumber() {
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	64 97       	sbiw	r28, 0x14	; 20
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	70 e0       	ldi	r23, 0x00	; 0
    char receivedChar;
    u8 endOfNumber = 0;

    // Read characters until Enter ('\r') is received
    while (!endOfNumber) {
        while (!GET_BIT(_UCSRA, 7));  // Wait for a character to be received
    106e:	ab e2       	ldi	r26, 0x2B	; 43
    1070:	b0 e0       	ldi	r27, 0x00	; 0
        receivedChar = _UDR;          // Read the received character
    1072:	2c e2       	ldi	r18, 0x2C	; 44
    1074:	30 e0       	ldi	r19, 0x00	; 0
        if (receivedChar == '\r' || receivedChar == '\n') {
            // If Enter key is received, mark the end of the number
            endOfNumber = 1;
        } else {
            // Store the character in the buffer
            rxBuffer[rxIndex] = receivedChar;
    1076:	8e 01       	movw	r16, r28
    1078:	0f 5f       	subi	r16, 0xFF	; 255
    107a:	1f 4f       	sbci	r17, 0xFF	; 255
            rxIndex++;

            // Check if the buffer is full (adjust the buffer size as needed)
            if (rxIndex >= sizeof(rxBuffer)) {
    107c:	0f 2e       	mov	r0, r31
    107e:	f3 e1       	ldi	r31, 0x13	; 19
    1080:	ef 2e       	mov	r14, r31
    1082:	ff 24       	eor	r15, r15
    1084:	f0 2d       	mov	r31, r0
    char receivedChar;
    u8 endOfNumber = 0;

    // Read characters until Enter ('\r') is received
    while (!endOfNumber) {
        while (!GET_BIT(_UCSRA, 7));  // Wait for a character to be received
    1086:	8c 91       	ld	r24, X
    1088:	88 23       	and	r24, r24
    108a:	ec f7       	brge	.-6      	; 0x1086 <UART_ReceiveNumber+0x38>
        receivedChar = _UDR;          // Read the received character
    108c:	f9 01       	movw	r30, r18
    108e:	80 81       	ld	r24, Z

        if (receivedChar == '\r' || receivedChar == '\n') {
    1090:	8d 30       	cpi	r24, 0x0D	; 13
    1092:	79 f0       	breq	.+30     	; 0x10b2 <UART_ReceiveNumber+0x64>
    1094:	8a 30       	cpi	r24, 0x0A	; 10
    1096:	69 f0       	breq	.+26     	; 0x10b2 <UART_ReceiveNumber+0x64>
            // If Enter key is received, mark the end of the number
            endOfNumber = 1;
        } else {
            // Store the character in the buffer
            rxBuffer[rxIndex] = receivedChar;
            rxIndex++;
    1098:	ab 01       	movw	r20, r22
    109a:	4f 5f       	subi	r20, 0xFF	; 255
    109c:	5f 4f       	sbci	r21, 0xFF	; 255

            // Check if the buffer is full (adjust the buffer size as needed)
            if (rxIndex >= sizeof(rxBuffer)) {
    109e:	44 31       	cpi	r20, 0x14	; 20
    10a0:	51 05       	cpc	r21, r1
    10a2:	08 f0       	brcs	.+2      	; 0x10a6 <UART_ReceiveNumber+0x58>
    10a4:	a7 01       	movw	r20, r14
        if (receivedChar == '\r' || receivedChar == '\n') {
            // If Enter key is received, mark the end of the number
            endOfNumber = 1;
        } else {
            // Store the character in the buffer
            rxBuffer[rxIndex] = receivedChar;
    10a6:	f8 01       	movw	r30, r16
    10a8:	e6 0f       	add	r30, r22
    10aa:	f7 1f       	adc	r31, r23
    10ac:	80 83       	st	Z, r24
    10ae:	ba 01       	movw	r22, r20
    10b0:	ea cf       	rjmp	.-44     	; 0x1086 <UART_ReceiveNumber+0x38>
            }
        }
    }

    // Null-terminate the string in the buffer
    rxBuffer[rxIndex] = '\0';
    10b2:	ce 01       	movw	r24, r28
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	fc 01       	movw	r30, r24
    10b8:	e6 0f       	add	r30, r22
    10ba:	f7 1f       	adc	r31, r23
    10bc:	10 82       	st	Z, r1

    // Convert the received string to an integer
    int receivedNumber = atoi(rxBuffer);
    10be:	0e 94 b0 19 	call	0x3360	; 0x3360 <atoi>

    return receivedNumber;
}
    10c2:	64 96       	adiw	r28, 0x14	; 20
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	ff 90       	pop	r15
    10d8:	ef 90       	pop	r14
    10da:	08 95       	ret

000010dc <TWI_voidInitMaster>:

/* ----------------- Section : Software Interfaces Implementation -----------------*/

void TWI_voidInitMaster(u8 copy_u8MsterAddress)
{
	if ((copy_u8MsterAddress < 128) && (copy_u8MsterAddress > 0))
    10dc:	18 16       	cp	r1, r24
    10de:	14 f4       	brge	.+4      	; 0x10e4 <TWI_voidInitMaster+0x8>
	{
		_TWAR = copy_u8MsterAddress <<1;
    10e0:	88 0f       	add	r24, r24
    10e2:	82 b9       	out	0x02, r24	; 2
	}
	/* Select SCL as 400KHz */
	_TWBR = 12;
    10e4:	8c e0       	ldi	r24, 0x0C	; 12
    10e6:	80 b9       	out	0x00, r24	; 0
	//Prescaler 1
	CLR_BIT(_TWSR, _TWPS0);
    10e8:	e1 e2       	ldi	r30, 0x21	; 33
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	8e 7f       	andi	r24, 0xFE	; 254
    10f0:	80 83       	st	Z, r24
	CLR_BIT(_TWSR, _TWPS1);
    10f2:	80 81       	ld	r24, Z
    10f4:	8d 7f       	andi	r24, 0xFD	; 253
    10f6:	80 83       	st	Z, r24

	// Enable ACK, in order to generate status code
	SET_BIT(_TWCR, _TWEA);
    10f8:	e6 e5       	ldi	r30, 0x56	; 86
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	80 64       	ori	r24, 0x40	; 64
    1100:	80 83       	st	Z, r24

	// Enable TWI
	SET_BIT(_TWCR, _TWEN);
    1102:	80 81       	ld	r24, Z
    1104:	84 60       	ori	r24, 0x04	; 4
    1106:	80 83       	st	Z, r24
}
    1108:	08 95       	ret

0000110a <TWI_voidSendStartCondition>:

void TWI_voidSendStartCondition(void)
{
	// Request Start condition
	SET_BIT(_TWCR, _TWSTA);
    110a:	e6 e5       	ldi	r30, 0x56	; 86
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	80 62       	ori	r24, 0x20	; 32
    1112:	80 83       	st	Z, r24
	// Send the start condition
	SET_BIT(_TWCR, _TWINT);	//Clear the TWINT Flag
    1114:	80 81       	ld	r24, Z
    1116:	80 68       	ori	r24, 0x80	; 128
    1118:	80 83       	st	Z, r24
	while(0 == GET_BIT(_TWCR, _TWINT));
    111a:	80 81       	ld	r24, Z
    111c:	88 23       	and	r24, r24
    111e:	ec f7       	brge	.-6      	; 0x111a <TWI_voidSendStartCondition+0x10>
	// Check ACK is Positive
	while(STATUS_VALUE != Start_Condition_ACK);
    1120:	e1 e2       	ldi	r30, 0x21	; 33
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	88 7f       	andi	r24, 0xF8	; 248
    1128:	88 30       	cpi	r24, 0x08	; 8
    112a:	e1 f7       	brne	.-8      	; 0x1124 <TWI_voidSendStartCondition+0x1a>
}
    112c:	08 95       	ret

0000112e <TWI_voidSendStopCondition>:

void TWI_voidSendStopCondition(void)
{
	// Request STOP condition
	SET_BIT(_TWCR, _TWSTO);
    112e:	e6 e5       	ldi	r30, 0x56	; 86
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	80 61       	ori	r24, 0x10	; 16
    1136:	80 83       	st	Z, r24
	// Send the STOP condition
	SET_BIT(_TWCR, _TWINT);	//Clear the TWINT Flag
    1138:	80 81       	ld	r24, Z
    113a:	80 68       	ori	r24, 0x80	; 128
    113c:	80 83       	st	Z, r24
}
    113e:	08 95       	ret

00001140 <TWI_voidSendReapeatedStartCondition>:

void TWI_voidSendReapeatedStartCondition(void)
{
	// Request Reapeated Start condition
	SET_BIT(_TWCR, _TWSTA);
    1140:	e6 e5       	ldi	r30, 0x56	; 86
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	80 62       	ori	r24, 0x20	; 32
    1148:	80 83       	st	Z, r24
	// Send the Reapeated start condition
	SET_BIT(_TWCR, _TWINT);	//Clear the TWINT Flag
    114a:	80 81       	ld	r24, Z
    114c:	80 68       	ori	r24, 0x80	; 128
    114e:	80 83       	st	Z, r24
	while(0 == GET_BIT(_TWCR, _TWINT));
    1150:	80 81       	ld	r24, Z
    1152:	88 23       	and	r24, r24
    1154:	ec f7       	brge	.-6      	; 0x1150 <TWI_voidSendReapeatedStartCondition+0x10>
	// Check ACK is Positive
	while(STATUS_VALUE != RepeatedStart_Condition_ACK);
    1156:	e1 e2       	ldi	r30, 0x21	; 33
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	88 7f       	andi	r24, 0xF8	; 248
    115e:	80 31       	cpi	r24, 0x10	; 16
    1160:	e1 f7       	brne	.-8      	; 0x115a <TWI_voidSendReapeatedStartCondition+0x1a>
}
    1162:	08 95       	ret

00001164 <TWI_voidSendSlaveAdd_WriteRequest>:

void TWI_voidSendSlaveAdd_WriteRequest(u8 copy_u8SlaveAddress)
{
	if ((copy_u8SlaveAddress < 128) && (copy_u8SlaveAddress > 0))
    1164:	18 16       	cp	r1, r24
    1166:	c4 f4       	brge	.+48     	; 0x1198 <TWI_voidSendSlaveAdd_WriteRequest+0x34>
	{
		_TWDR = copy_u8SlaveAddress << 1;
    1168:	88 0f       	add	r24, r24
    116a:	e3 e2       	ldi	r30, 0x23	; 35
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 83       	st	Z, r24
		CLR_BIT(_TWDR, 0);
    1170:	80 81       	ld	r24, Z
    1172:	8e 7f       	andi	r24, 0xFE	; 254
    1174:	80 83       	st	Z, r24

		// Clear Start condition Flag
		CLR_BIT(_TWCR, _TWSTA);
    1176:	e6 e5       	ldi	r30, 0x56	; 86
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	8f 7d       	andi	r24, 0xDF	; 223
    117e:	80 83       	st	Z, r24

		SET_BIT(_TWCR, _TWINT);	//Clear the TWINT Flag
    1180:	80 81       	ld	r24, Z
    1182:	80 68       	ori	r24, 0x80	; 128
    1184:	80 83       	st	Z, r24
		while(0 == GET_BIT(_TWCR, _TWINT));
    1186:	80 81       	ld	r24, Z
    1188:	88 23       	and	r24, r24
    118a:	ec f7       	brge	.-6      	; 0x1186 <TWI_voidSendSlaveAdd_WriteRequest+0x22>
		// Check ACK is Positive
		while(STATUS_VALUE != SlaveAddress_Write_ACK);
    118c:	e1 e2       	ldi	r30, 0x21	; 33
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	88 7f       	andi	r24, 0xF8	; 248
    1194:	88 31       	cpi	r24, 0x18	; 24
    1196:	e1 f7       	brne	.-8      	; 0x1190 <TWI_voidSendSlaveAdd_WriteRequest+0x2c>
    1198:	08 95       	ret

0000119a <TWI_voidSendSlaveAdd_ReadRequest>:
	}
}

void TWI_voidSendSlaveAdd_ReadRequest(u8 copy_u8SlaveAddress)
{
	if ((copy_u8SlaveAddress < 128) && (copy_u8SlaveAddress > 0))
    119a:	18 16       	cp	r1, r24
    119c:	c4 f4       	brge	.+48     	; 0x11ce <TWI_voidSendSlaveAdd_ReadRequest+0x34>
	{
		_TWDR = copy_u8SlaveAddress << 1;
    119e:	88 0f       	add	r24, r24
    11a0:	e3 e2       	ldi	r30, 0x23	; 35
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 83       	st	Z, r24
		SET_BIT(_TWDR, 0);
    11a6:	80 81       	ld	r24, Z
    11a8:	81 60       	ori	r24, 0x01	; 1
    11aa:	80 83       	st	Z, r24

		// Clear Start condition Flag
		CLR_BIT(_TWCR, _TWSTA);
    11ac:	e6 e5       	ldi	r30, 0x56	; 86
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	8f 7d       	andi	r24, 0xDF	; 223
    11b4:	80 83       	st	Z, r24

		SET_BIT(_TWCR, _TWINT);	//Clear the TWINT Flag
    11b6:	80 81       	ld	r24, Z
    11b8:	80 68       	ori	r24, 0x80	; 128
    11ba:	80 83       	st	Z, r24
		while(0 == GET_BIT(_TWCR, _TWINT));
    11bc:	80 81       	ld	r24, Z
    11be:	88 23       	and	r24, r24
    11c0:	ec f7       	brge	.-6      	; 0x11bc <TWI_voidSendSlaveAdd_ReadRequest+0x22>
		// Check ACK is Positive
		while(STATUS_VALUE != SlaveAddress_Read_ACK);
    11c2:	e1 e2       	ldi	r30, 0x21	; 33
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	88 7f       	andi	r24, 0xF8	; 248
    11ca:	80 34       	cpi	r24, 0x40	; 64
    11cc:	e1 f7       	brne	.-8      	; 0x11c6 <TWI_voidSendSlaveAdd_ReadRequest+0x2c>
    11ce:	08 95       	ret

000011d0 <TWI_voidWriteMasterDataByte>:
	}
}

void TWI_voidWriteMasterDataByte(u8 copy_u8Data)
{
	_TWDR = copy_u8Data;
    11d0:	83 b9       	out	0x03, r24	; 3
	// Clear Start condition Flag
	SET_BIT(_TWCR, _TWINT);	//Clear the TWINT Flag
    11d2:	e6 e5       	ldi	r30, 0x56	; 86
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	80 68       	ori	r24, 0x80	; 128
    11da:	80 83       	st	Z, r24
	while(0 == GET_BIT(_TWCR, _TWINT));
    11dc:	80 81       	ld	r24, Z
    11de:	88 23       	and	r24, r24
    11e0:	ec f7       	brge	.-6      	; 0x11dc <TWI_voidWriteMasterDataByte+0xc>
	// Check ACK is Positive
	while(STATUS_VALUE != Master_Data_Transmit_ACK);
    11e2:	e1 e2       	ldi	r30, 0x21	; 33
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	88 7f       	andi	r24, 0xF8	; 248
    11ea:	88 32       	cpi	r24, 0x28	; 40
    11ec:	e1 f7       	brne	.-8      	; 0x11e6 <TWI_voidWriteMasterDataByte+0x16>
}
    11ee:	08 95       	ret

000011f0 <TWI_voidReadMasterDataByteNACK>:

void TWI_voidReadMasterDataByteNACK(u8 *copy_u8PtrData)
{
    11f0:	dc 01       	movw	r26, r24
	CLR_BIT(_TWCR, _TWEA);	//Disable ACK
    11f2:	e6 e5       	ldi	r30, 0x56	; 86
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	8f 7b       	andi	r24, 0xBF	; 191
    11fa:	80 83       	st	Z, r24
	if (copy_u8PtrData != NULL)
    11fc:	10 97       	sbiw	r26, 0x00	; 0
    11fe:	71 f0       	breq	.+28     	; 0x121c <TWI_voidReadMasterDataByteNACK+0x2c>
	{
		// Clear Start condition Flag
		SET_BIT(_TWCR, _TWINT);	//Clear the TWINT Flag
    1200:	80 81       	ld	r24, Z
    1202:	80 68       	ori	r24, 0x80	; 128
    1204:	80 83       	st	Z, r24
		while(0 == GET_BIT(_TWCR, _TWINT));
    1206:	80 81       	ld	r24, Z
    1208:	88 23       	and	r24, r24
    120a:	ec f7       	brge	.-6      	; 0x1206 <TWI_voidReadMasterDataByteNACK+0x16>
		// Check NACK
	while(STATUS_VALUE != Master_Data_Receive_NACK);
    120c:	e1 e2       	ldi	r30, 0x21	; 33
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	88 7f       	andi	r24, 0xF8	; 248
    1214:	88 35       	cpi	r24, 0x58	; 88
    1216:	e1 f7       	brne	.-8      	; 0x1210 <TWI_voidReadMasterDataByteNACK+0x20>
		*copy_u8PtrData = _TWDR;
    1218:	83 b1       	in	r24, 0x03	; 3
    121a:	8c 93       	st	X, r24
	}
	SET_BIT(_TWCR, _TWEA);	// //Enable ACK
    121c:	e6 e5       	ldi	r30, 0x56	; 86
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	80 64       	ori	r24, 0x40	; 64
    1224:	80 83       	st	Z, r24
}
    1226:	08 95       	ret

00001228 <TWI_voidReadMasterDataByteACK>:


void TWI_voidReadMasterDataByteACK(u8 *copy_u8PtrData)
{
    1228:	dc 01       	movw	r26, r24
	if (copy_u8PtrData != NULL)
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	81 f0       	breq	.+32     	; 0x124e <TWI_voidReadMasterDataByteACK+0x26>
	{
		// Clear Start condition Flag
		SET_BIT(_TWCR, _TWINT);	//Clear the TWINT Flag
    122e:	e6 e5       	ldi	r30, 0x56	; 86
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	80 68       	ori	r24, 0x80	; 128
    1236:	80 83       	st	Z, r24
		while(0 == GET_BIT(_TWCR, _TWINT));
    1238:	80 81       	ld	r24, Z
    123a:	88 23       	and	r24, r24
    123c:	ec f7       	brge	.-6      	; 0x1238 <TWI_voidReadMasterDataByteACK+0x10>
		// Check ACK is Positive
		while(STATUS_VALUE != Master_Data_Receive_ACK);
    123e:	e1 e2       	ldi	r30, 0x21	; 33
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	88 7f       	andi	r24, 0xF8	; 248
    1246:	80 35       	cpi	r24, 0x50	; 80
    1248:	e1 f7       	brne	.-8      	; 0x1242 <TWI_voidReadMasterDataByteACK+0x1a>
		*copy_u8PtrData = _TWDR;
    124a:	83 b1       	in	r24, 0x03	; 3
    124c:	8c 93       	st	X, r24
    124e:	08 95       	ret

00001250 <TMR2_voidStop>:
 * @param	void
 * @return	void
 */
void TMR2_voidStop(void)
{
	CLR_BIT(_TCCR2,0);
    1250:	e5 e4       	ldi	r30, 0x45	; 69
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	8e 7f       	andi	r24, 0xFE	; 254
    1258:	80 83       	st	Z, r24
	CLR_BIT(_TCCR2,1);
    125a:	80 81       	ld	r24, Z
    125c:	8d 7f       	andi	r24, 0xFD	; 253
    125e:	80 83       	st	Z, r24
	CLR_BIT(_TCCR2,2);
    1260:	80 81       	ld	r24, Z
    1262:	8b 7f       	andi	r24, 0xFB	; 251
    1264:	80 83       	st	Z, r24
}
    1266:	08 95       	ret

00001268 <TMR2_Preload_value_set>:
 * @param	value: The preload value to be set
 * @return	void
 */
void TMR2_Preload_value_set(u8 value)
{
	_TCNT2 = value;
    1268:	84 bd       	out	0x24, r24	; 36
}
    126a:	08 95       	ret

0000126c <TMR2_voidSetDelay_ms_using_CTC>:
#elif TMR2_PRESCALER == 8
	private_CTC_counter = ((u32)_del_ms*1000) / ((TMR2_OCR2_val + 1) * 0.5);
#elif TMR2_PRESCALER == 32
	private_CTC_counter = ((u32)_del_ms*1000) / ((TMR2_OCR2_val + 1) * 2);
#elif TMR2_PRESCALER == 64
	private_CTC_counter = ((u32)_del_ms*1000) / ((TMR2_OCR2_val + 1) * 4);
    126c:	a0 e0       	ldi	r26, 0x00	; 0
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	bc 01       	movw	r22, r24
    1272:	cd 01       	movw	r24, r26
    1274:	28 ee       	ldi	r18, 0xE8	; 232
    1276:	33 e0       	ldi	r19, 0x03	; 3
    1278:	40 e0       	ldi	r20, 0x00	; 0
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	0e 94 38 19 	call	0x3270	; 0x3270 <__mulsi3>
    1280:	0e 94 57 19 	call	0x32ae	; 0x32ae <__udivmodsi4>
    1284:	30 93 b9 01 	sts	0x01B9, r19
    1288:	20 93 b8 01 	sts	0x01B8, r18
#elif TMR2_PRESCALER == 256
	private_CTC_counter = ((u32)_del_ms*1000) / ((TMR2_OCR2_val + 1) * 16);
#elif TMR2_PRESCALER == 1024
	private_CTC_counter = ((u32)_del_ms*1000) / ((TMR2_OCR2_val + 1) * 64);
#endif
}
    128c:	08 95       	ret

0000128e <TMR2_voidSetDutyCycle>:
	copy_u8_duty = 100 - copy_u8_duty;
	_OCR2 = (((u16)copy_u8_duty * 256) / 100) - 510;
	#endif	//Phase_correct_PWM_MODE2
	}
#endif // TMR2_MODE
}
    128e:	08 95       	ret

00001290 <TMR2_voidSendCallBack_OCM>:
 * @return	void
 */

void TMR2_voidSendCallBack_OCM(void (*PtrF)(void))
{
	if(PtrF != NULL)
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	21 f0       	breq	.+8      	; 0x129c <TMR2_voidSendCallBack_OCM+0xc>
	{
		privatePTR_OC = PtrF;
    1294:	90 93 bb 01 	sts	0x01BB, r25
    1298:	80 93 ba 01 	sts	0x01BA, r24
    129c:	08 95       	ret

0000129e <TMR2_voidInit>:
	case FastPWM2:
		SET_BIT(_TCCR2, 3);
		SET_BIT(_TCCR2, 6);
		break;
	case CTC2:
		SET_BIT(_TCCR2, 3);
    129e:	e5 e4       	ldi	r30, 0x45	; 69
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	88 60       	ori	r24, 0x08	; 8
    12a6:	80 83       	st	Z, r24
		CLR_BIT(_TCCR2, 6);
    12a8:	80 81       	ld	r24, Z
    12aa:	8f 7b       	andi	r24, 0xBF	; 191
    12ac:	80 83       	st	Z, r24
	SET_BIT(_TIMSK, 6);
}
#elif TMR2_MODE == TMR2_CTC_MODE
static void Enable_OCI2(void)
{
	SET_BIT(_TIMSK, 7);
    12ae:	e9 e5       	ldi	r30, 0x59	; 89
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	80 68       	ori	r24, 0x80	; 128
    12b6:	80 83       	st	Z, r24
	Enable_OVI2();
	TMR2_Preload_value_set(TMR2_PRELOAD);
#elif TMR2_MODE == TMR2_CTC_MODE
	select_mode(CTC2);
	Enable_OCI2();
	_OCR2 = (TMR2_OCR2_val);
    12b8:	89 ef       	ldi	r24, 0xF9	; 249
    12ba:	83 bd       	out	0x23, r24	; 35
		SET_BIT(_TCCR2, 4);
		SET_BIT(_TCCR2, 5);
		break;
	}
#endif	// TMR2_MODE
}
    12bc:	08 95       	ret

000012be <TMR2_voidStart>:
		SET_BIT(_TCCR2,0);
		SET_BIT(_TCCR2,1);
		CLR_BIT(_TCCR2,2);
		break;
	case 64:
		CLR_BIT(_TCCR2,0);
    12be:	e5 e4       	ldi	r30, 0x45	; 69
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	8e 7f       	andi	r24, 0xFE	; 254
    12c6:	80 83       	st	Z, r24
		CLR_BIT(_TCCR2,1);
    12c8:	80 81       	ld	r24, Z
    12ca:	8d 7f       	andi	r24, 0xFD	; 253
    12cc:	80 83       	st	Z, r24
		SET_BIT(_TCCR2,2);
    12ce:	80 81       	ld	r24, Z
    12d0:	84 60       	ori	r24, 0x04	; 4
    12d2:	80 83       	st	Z, r24
 * @return	void
 */
void TMR2_voidStart(void)
{
	PrescalerValue_set((u16)TMR2_PRESCALER);
}
    12d4:	08 95       	ret

000012d6 <__vector_5>:
// TIMER2 COMP - CTC Mode ISR
void __vector_4(void) __attribute__((signal));


void __vector_5(void)
{
    12d6:	1f 92       	push	r1
    12d8:	0f 92       	push	r0
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	0f 92       	push	r0
    12de:	11 24       	eor	r1, r1
    12e0:	2f 93       	push	r18
    12e2:	3f 93       	push	r19
    12e4:	4f 93       	push	r20
    12e6:	5f 93       	push	r21
    12e8:	6f 93       	push	r22
    12ea:	7f 93       	push	r23
    12ec:	8f 93       	push	r24
    12ee:	9f 93       	push	r25
    12f0:	af 93       	push	r26
    12f2:	bf 93       	push	r27
    12f4:	ef 93       	push	r30
    12f6:	ff 93       	push	r31
	static u16 count = 0;
	count ++;
    12f8:	80 91 be 01 	lds	r24, 0x01BE
    12fc:	90 91 bf 01 	lds	r25, 0x01BF
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	90 93 bf 01 	sts	0x01BF, r25
    1306:	80 93 be 01 	sts	0x01BE, r24
	if(count == TMR2_OVERFLOW)
    130a:	81 5d       	subi	r24, 0xD1	; 209
    130c:	93 40       	sbci	r25, 0x03	; 3
    130e:	39 f4       	brne	.+14     	; 0x131e <__vector_5+0x48>
	{
		TMR2_Preload_value_set(113);
    1310:	81 e7       	ldi	r24, 0x71	; 113
    1312:	0e 94 34 09 	call	0x1268	; 0x1268 <TMR2_Preload_value_set>
		count = 0;
    1316:	10 92 bf 01 	sts	0x01BF, r1
    131a:	10 92 be 01 	sts	0x01BE, r1
			{
				privatePTR_OV();
			}
	}

}
    131e:	ff 91       	pop	r31
    1320:	ef 91       	pop	r30
    1322:	bf 91       	pop	r27
    1324:	af 91       	pop	r26
    1326:	9f 91       	pop	r25
    1328:	8f 91       	pop	r24
    132a:	7f 91       	pop	r23
    132c:	6f 91       	pop	r22
    132e:	5f 91       	pop	r21
    1330:	4f 91       	pop	r20
    1332:	3f 91       	pop	r19
    1334:	2f 91       	pop	r18
    1336:	0f 90       	pop	r0
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	0f 90       	pop	r0
    133c:	1f 90       	pop	r1
    133e:	18 95       	reti

00001340 <__vector_4>:


void __vector_4(void)
{
    1340:	1f 92       	push	r1
    1342:	0f 92       	push	r0
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	0f 92       	push	r0
    1348:	11 24       	eor	r1, r1
    134a:	2f 93       	push	r18
    134c:	3f 93       	push	r19
    134e:	4f 93       	push	r20
    1350:	5f 93       	push	r21
    1352:	6f 93       	push	r22
    1354:	7f 93       	push	r23
    1356:	8f 93       	push	r24
    1358:	9f 93       	push	r25
    135a:	af 93       	push	r26
    135c:	bf 93       	push	r27
    135e:	ef 93       	push	r30
    1360:	ff 93       	push	r31
	static u16 count = 0;
	count ++;
    1362:	80 91 bc 01 	lds	r24, 0x01BC
    1366:	90 91 bd 01 	lds	r25, 0x01BD
    136a:	01 96       	adiw	r24, 0x01	; 1
    136c:	90 93 bd 01 	sts	0x01BD, r25
    1370:	80 93 bc 01 	sts	0x01BC, r24
	if(count == private_CTC_counter)
    1374:	20 91 b8 01 	lds	r18, 0x01B8
    1378:	30 91 b9 01 	lds	r19, 0x01B9
    137c:	82 17       	cp	r24, r18
    137e:	93 07       	cpc	r25, r19
    1380:	59 f4       	brne	.+22     	; 0x1398 <__vector_4+0x58>
	{
		count = 0;
    1382:	10 92 bd 01 	sts	0x01BD, r1
    1386:	10 92 bc 01 	sts	0x01BC, r1
		if(privatePTR_OC !=NULL)
    138a:	e0 91 ba 01 	lds	r30, 0x01BA
    138e:	f0 91 bb 01 	lds	r31, 0x01BB
    1392:	30 97       	sbiw	r30, 0x00	; 0
    1394:	09 f0       	breq	.+2      	; 0x1398 <__vector_4+0x58>
			{
			privatePTR_OC();
    1396:	09 95       	icall
			}
	}
}
    1398:	ff 91       	pop	r31
    139a:	ef 91       	pop	r30
    139c:	bf 91       	pop	r27
    139e:	af 91       	pop	r26
    13a0:	9f 91       	pop	r25
    13a2:	8f 91       	pop	r24
    13a4:	7f 91       	pop	r23
    13a6:	6f 91       	pop	r22
    13a8:	5f 91       	pop	r21
    13aa:	4f 91       	pop	r20
    13ac:	3f 91       	pop	r19
    13ae:	2f 91       	pop	r18
    13b0:	0f 90       	pop	r0
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	0f 90       	pop	r0
    13b6:	1f 90       	pop	r1
    13b8:	18 95       	reti

000013ba <TMR1_voidStop>:
 * @param	void
 * @return	void
 */
void TMR1_voidStop(void)
{
	CLR_BIT(_TCCR1B, _CS10);
    13ba:	ee e4       	ldi	r30, 0x4E	; 78
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	8e 7f       	andi	r24, 0xFE	; 254
    13c2:	80 83       	st	Z, r24
	CLR_BIT(_TCCR1B, _CS11);
    13c4:	80 81       	ld	r24, Z
    13c6:	8d 7f       	andi	r24, 0xFD	; 253
    13c8:	80 83       	st	Z, r24
	CLR_BIT(_TCCR1B, _CS12);
    13ca:	80 81       	ld	r24, Z
    13cc:	8b 7f       	andi	r24, 0xFB	; 251
    13ce:	80 83       	st	Z, r24
}
    13d0:	08 95       	ret

000013d2 <TMR1_voidSetCompareMatchValueA>:

void TMR1_voidSetCompareMatchValueA(u16 copy_u8CompareMatchValueA){
	_OCR1A = copy_u8CompareMatchValueA;
    13d2:	9b bd       	out	0x2b, r25	; 43
    13d4:	8a bd       	out	0x2a, r24	; 42
}
    13d6:	08 95       	ret

000013d8 <TMR1_voidSetFreq_Mode14>:

//under condition ticktime = 4 microsecond
void TMR1_voidSetFreq_Mode14(u16 copy_u16_frequency)
{
#if TMR1_PRESCALER == 64
	_ICR1 = (1000000UL / copy_u16_frequency) / 4 - 1;
    13d8:	9c 01       	movw	r18, r24
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	50 e0       	ldi	r21, 0x00	; 0
    13de:	60 e9       	ldi	r22, 0x90	; 144
    13e0:	70 ed       	ldi	r23, 0xD0	; 208
    13e2:	83 e0       	ldi	r24, 0x03	; 3
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	0e 94 57 19 	call	0x32ae	; 0x32ae <__udivmodsi4>
    13ea:	21 50       	subi	r18, 0x01	; 1
    13ec:	30 40       	sbci	r19, 0x00	; 0
    13ee:	37 bd       	out	0x27, r19	; 39
    13f0:	26 bd       	out	0x26, r18	; 38
#endif// TMR1_PRESCALER
}
    13f2:	08 95       	ret

000013f4 <TMR1_voidInit>:
 * @return	void
 */
void TMR1_voidInit(void)
{
#if TMR1_MODE 	== TMR1_FastPWM_MODE_14
	CLR_BIT(_TCCR1A, _WGM10);
    13f4:	af e4       	ldi	r26, 0x4F	; 79
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	8c 91       	ld	r24, X
    13fa:	8e 7f       	andi	r24, 0xFE	; 254
    13fc:	8c 93       	st	X, r24
	SET_BIT(_TCCR1A, _WGM11);
    13fe:	8c 91       	ld	r24, X
    1400:	82 60       	ori	r24, 0x02	; 2
    1402:	8c 93       	st	X, r24
	SET_BIT(_TCCR1B, _WGM12);
    1404:	ee e4       	ldi	r30, 0x4E	; 78
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	88 60       	ori	r24, 0x08	; 8
    140c:	80 83       	st	Z, r24
	SET_BIT(_TCCR1B, _WGM13);
    140e:	80 81       	ld	r24, Z
    1410:	80 61       	ori	r24, 0x10	; 16
    1412:	80 83       	st	Z, r24
	switch(TMR1_FastPWM_14_MODE)
	{
	case non_inverting1:
		CLR_BIT(_TCCR1A, _COM1A0);
    1414:	8c 91       	ld	r24, X
    1416:	8f 7b       	andi	r24, 0xBF	; 191
    1418:	8c 93       	st	X, r24
		SET_BIT(_TCCR1A, _COM1A1);
    141a:	8c 91       	ld	r24, X
    141c:	80 68       	ori	r24, 0x80	; 128
    141e:	8c 93       	st	X, r24
	case inverting1:
		SET_BIT(_TCCR1A, _COM1A0);
		SET_BIT(_TCCR1A, _COM1A1);
		break;
	}
	TMR1_voidSetFreq_Mode14(50);
    1420:	82 e3       	ldi	r24, 0x32	; 50
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <TMR1_voidSetFreq_Mode14>
#endif // TMR1_MODE
}
    1428:	08 95       	ret

0000142a <TMR1_voidSetDuty_Mode14>:
	_ICR1 = (1000000UL / copy_u16_frequency) / 4 - 1;
#endif// TMR1_PRESCALER
}

void TMR1_voidSetDuty_Mode14(f32 copy_u8_duty)
{
    142a:	ef 92       	push	r14
    142c:	ff 92       	push	r15
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	7b 01       	movw	r14, r22
    1434:	8c 01       	movw	r16, r24
	if(copy_u8_duty <= 100)
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	48 ec       	ldi	r20, 0xC8	; 200
    143c:	52 e4       	ldi	r21, 0x42	; 66
    143e:	0e 94 25 04 	call	0x84a	; 0x84a <__lesf2>
    1442:	18 16       	cp	r1, r24
    1444:	4c f1       	brlt	.+82     	; 0x1498 <TMR1_voidSetDuty_Mode14+0x6e>
		{
		#if TMR1_FastPWM_14_MODE == non_inverting1
			if(copy_u8_duty == 0){
    1446:	c8 01       	movw	r24, r16
    1448:	b7 01       	movw	r22, r14
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e0       	ldi	r20, 0x00	; 0
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    1456:	88 23       	and	r24, r24
    1458:	19 f4       	brne	.+6      	; 0x1460 <TMR1_voidSetDuty_Mode14+0x36>
				_OCR1A = 0;
    145a:	1b bc       	out	0x2b, r1	; 43
    145c:	1a bc       	out	0x2a, r1	; 42
    145e:	1c c0       	rjmp	.+56     	; 0x1498 <TMR1_voidSetDuty_Mode14+0x6e>
			}
			else{
				_OCR1A = ((copy_u8_duty * (_ICR1+1)) / 100) -1;
    1460:	66 b5       	in	r22, 0x26	; 38
    1462:	77 b5       	in	r23, 0x27	; 39
    1464:	6f 5f       	subi	r22, 0xFF	; 255
    1466:	7f 4f       	sbci	r23, 0xFF	; 255
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1470:	a8 01       	movw	r20, r16
    1472:	97 01       	movw	r18, r14
    1474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	48 ec       	ldi	r20, 0xC8	; 200
    147e:	52 e4       	ldi	r21, 0x42	; 66
    1480:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e8       	ldi	r20, 0x80	; 128
    148a:	5f e3       	ldi	r21, 0x3F	; 63
    148c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1494:	7b bd       	out	0x2b, r23	; 43
    1496:	6a bd       	out	0x2a, r22	; 42
				copy_u8_duty = 100 - copy_u8_duty;
				_OCR1A = (((float)copy_u8_duty * (_ICR1+1)) / 100) -1;
			}
		#endif	//TMR1_FastPWM_14_MODE
		}
}
    1498:	1f 91       	pop	r17
    149a:	0f 91       	pop	r16
    149c:	ff 90       	pop	r15
    149e:	ef 90       	pop	r14
    14a0:	08 95       	ret

000014a2 <TMR1_voidStart>:
		CLR_BIT(_TCCR1B, _CS10);
		SET_BIT(_TCCR1B, _CS11);
		CLR_BIT(_TCCR1B, _CS12);
		break;
	case 64:
		SET_BIT(_TCCR1B, _CS10);
    14a2:	ee e4       	ldi	r30, 0x4E	; 78
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	81 60       	ori	r24, 0x01	; 1
    14aa:	80 83       	st	Z, r24
		SET_BIT(_TCCR1B, _CS11);
    14ac:	80 81       	ld	r24, Z
    14ae:	82 60       	ori	r24, 0x02	; 2
    14b0:	80 83       	st	Z, r24
		CLR_BIT(_TCCR1B, _CS12);
    14b2:	80 81       	ld	r24, Z
    14b4:	8b 7f       	andi	r24, 0xFB	; 251
    14b6:	80 83       	st	Z, r24


void TMR1_voidStart(void)
{
	PrescalerValue_set((u16)TMR1_PRESCALER);
}
    14b8:	08 95       	ret

000014ba <TMR0_voidStop>:
 * @param	void
 * @return	void
 */
void TMR0_voidStop(void)
{
	CLR_BIT(_TCCR0,0);
    14ba:	e3 e5       	ldi	r30, 0x53	; 83
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	8e 7f       	andi	r24, 0xFE	; 254
    14c2:	80 83       	st	Z, r24
	CLR_BIT(_TCCR0,1);
    14c4:	80 81       	ld	r24, Z
    14c6:	8d 7f       	andi	r24, 0xFD	; 253
    14c8:	80 83       	st	Z, r24
	CLR_BIT(_TCCR0,2);
    14ca:	80 81       	ld	r24, Z
    14cc:	8b 7f       	andi	r24, 0xFB	; 251
    14ce:	80 83       	st	Z, r24
}
    14d0:	08 95       	ret

000014d2 <TMR0_Preload_value_set>:
 * @param	value: The preload value to be set
 * @return	void
 */
void TMR0_Preload_value_set(u8 value)
{
	_TCNT0 = value;
    14d2:	82 bf       	out	0x32, r24	; 50
}
    14d4:	08 95       	ret

000014d6 <TMR0_voidSetDelay_ms_using_CTC>:
#if TMR0_PRESCALER == 1
	private_CTC_counter = ((u32)_del_ms*1000) / ((TMR0_OCR0_val + 1) * 0.0625);
#elif TMR0_PRESCALER == 8
	private_CTC_counter = ((u32)_del_ms*1000) / ((TMR0_OCR0_val + 1) * 0.5);
#elif TMR0_PRESCALER == 64
	private_CTC_counter = ((u32)_del_ms*1000) / ((TMR0_OCR0_val + 1) * 4);
    14d6:	a0 e0       	ldi	r26, 0x00	; 0
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	bc 01       	movw	r22, r24
    14dc:	cd 01       	movw	r24, r26
    14de:	28 ee       	ldi	r18, 0xE8	; 232
    14e0:	33 e0       	ldi	r19, 0x03	; 3
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	0e 94 38 19 	call	0x3270	; 0x3270 <__mulsi3>
    14ea:	67 2f       	mov	r22, r23
    14ec:	78 2f       	mov	r23, r24
    14ee:	89 2f       	mov	r24, r25
    14f0:	99 27       	eor	r25, r25
    14f2:	70 93 c1 01 	sts	0x01C1, r23
    14f6:	60 93 c0 01 	sts	0x01C0, r22
	private_CTC_counter = ((u32)_del_ms*1000) / ((TMR0_OCR0_val + 1) * 16);

#elif TMR0_PRESCALER == 1024
	private_CTC_counter = ((u32)_del_ms*1000) / ((TMR0_OCR0_val + 1) * 64);
#endif
}
    14fa:	08 95       	ret

000014fc <TMR0_voidSetDutyCycle>:
	copy_u8_duty = 100 - copy_u8_duty;
	_OCR0 = (((u16)copy_u8_duty * 256) / 100) - 510;;
	#endif	//Phase_Correct_PWM_MODE
	}
#endif // TMR0_MODE
}
    14fc:	08 95       	ret

000014fe <TMR0_voidSendCallBack_OVF>:
 * @param	PtrF: A pointer to the overflow callback function
 * @return	void
 */
void TMR0_voidSendCallBack_OVF(void (*PtrF)(void))
{
	if(PtrF != NULL)
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	21 f0       	breq	.+8      	; 0x150a <TMR0_voidSendCallBack_OVF+0xc>
	{
		privatePTR_OV = PtrF;
    1502:	90 93 c7 01 	sts	0x01C7, r25
    1506:	80 93 c6 01 	sts	0x01C6, r24
    150a:	08 95       	ret

0000150c <TMR0_voidSendCallBack_OCM>:
 * @return	void
 */

void TMR0_voidSendCallBack_OCM(void (*PtrF)(void))
{
	if(PtrF != NULL)
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	21 f0       	breq	.+8      	; 0x1518 <TMR0_voidSendCallBack_OCM+0xc>
	{
		privatePTR_OC = PtrF;
    1510:	90 93 c3 01 	sts	0x01C3, r25
    1514:	80 93 c2 01 	sts	0x01C2, r24
    1518:	08 95       	ret

0000151a <TMR0_voidInit>:
static void select_mode(u8 mode)
{
	switch(mode)
	{
	case Normal:
		CLR_BIT(_TCCR0, 3);
    151a:	e3 e5       	ldi	r30, 0x53	; 83
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	87 7f       	andi	r24, 0xF7	; 247
    1522:	80 83       	st	Z, r24
		CLR_BIT(_TCCR0, 6);
    1524:	80 81       	ld	r24, Z
    1526:	8f 7b       	andi	r24, 0xBF	; 191
    1528:	80 83       	st	Z, r24
}

#if TMR0_MODE 	== TMR0_NORMAL_MODE
static void Enable_OVI0(void)
{
	SET_BIT(_TIMSK, 0);
    152a:	e9 e5       	ldi	r30, 0x59	; 89
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	81 60       	ori	r24, 0x01	; 1
    1532:	80 83       	st	Z, r24
void TMR0_voidInit(void)
{
#if TMR0_MODE 	== TMR0_NORMAL_MODE
	select_mode(Normal);
	Enable_OVI0();
	TMR0_Preload_value_set(TMR0_PRELOAD);
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <TMR0_Preload_value_set>
		SET_BIT(_TCCR0, 4);
		SET_BIT(_TCCR0, 5);
		break;
	}
#endif
}
    153a:	08 95       	ret

0000153c <TMR0_voidStart>:
		CLR_BIT(_TCCR0,0);
		SET_BIT(_TCCR0,1);
		CLR_BIT(_TCCR0,2);
		break;
	case 64:
		SET_BIT(_TCCR0,0);
    153c:	e3 e5       	ldi	r30, 0x53	; 83
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	81 60       	ori	r24, 0x01	; 1
    1544:	80 83       	st	Z, r24
		SET_BIT(_TCCR0,1);
    1546:	80 81       	ld	r24, Z
    1548:	82 60       	ori	r24, 0x02	; 2
    154a:	80 83       	st	Z, r24
		CLR_BIT(_TCCR0,2);
    154c:	80 81       	ld	r24, Z
    154e:	8b 7f       	andi	r24, 0xFB	; 251
    1550:	80 83       	st	Z, r24
 * @return	void
 */
void TMR0_voidStart(void)
{
	PrescalerValue_set((u16)TMR0_PRESCALER);
}
    1552:	08 95       	ret

00001554 <__vector_11>:
//CTC Mode ISR
void __vector_10(void) __attribute__((signal));


void __vector_11(void)
{
    1554:	1f 92       	push	r1
    1556:	0f 92       	push	r0
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	0f 92       	push	r0
    155c:	11 24       	eor	r1, r1
    155e:	2f 93       	push	r18
    1560:	3f 93       	push	r19
    1562:	4f 93       	push	r20
    1564:	5f 93       	push	r21
    1566:	6f 93       	push	r22
    1568:	7f 93       	push	r23
    156a:	8f 93       	push	r24
    156c:	9f 93       	push	r25
    156e:	af 93       	push	r26
    1570:	bf 93       	push	r27
    1572:	ef 93       	push	r30
    1574:	ff 93       	push	r31
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    1576:	80 91 c8 01 	lds	r24, 0x01C8
    157a:	90 91 c9 01 	lds	r25, 0x01C9
    157e:	01 96       	adiw	r24, 0x01	; 1
    1580:	90 93 c9 01 	sts	0x01C9, r25
    1584:	80 93 c8 01 	sts	0x01C8, r24

	if (TMR0_OVERFLOW == local_u16ovCounter) {
    1588:	06 97       	sbiw	r24, 0x06	; 6
    158a:	61 f4       	brne	.+24     	; 0x15a4 <__vector_11+0x50>
		// Reload preload value
		_TCNT0 = TMR0_PRELOAD;
    158c:	12 be       	out	0x32, r1	; 50
		// Clear the counter
		local_u16ovCounter = 0;
    158e:	10 92 c9 01 	sts	0x01C9, r1
    1592:	10 92 c8 01 	sts	0x01C8, r1

		// Call the callback function if assigned
		if (privatePTR_OV != NULL) {
    1596:	e0 91 c6 01 	lds	r30, 0x01C6
    159a:	f0 91 c7 01 	lds	r31, 0x01C7
    159e:	30 97       	sbiw	r30, 0x00	; 0
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <__vector_11+0x50>
			privatePTR_OV();
    15a2:	09 95       	icall
		}
	}
}
    15a4:	ff 91       	pop	r31
    15a6:	ef 91       	pop	r30
    15a8:	bf 91       	pop	r27
    15aa:	af 91       	pop	r26
    15ac:	9f 91       	pop	r25
    15ae:	8f 91       	pop	r24
    15b0:	7f 91       	pop	r23
    15b2:	6f 91       	pop	r22
    15b4:	5f 91       	pop	r21
    15b6:	4f 91       	pop	r20
    15b8:	3f 91       	pop	r19
    15ba:	2f 91       	pop	r18
    15bc:	0f 90       	pop	r0
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	0f 90       	pop	r0
    15c2:	1f 90       	pop	r1
    15c4:	18 95       	reti

000015c6 <__vector_10>:


void __vector_10(void)
{
    15c6:	1f 92       	push	r1
    15c8:	0f 92       	push	r0
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	0f 92       	push	r0
    15ce:	11 24       	eor	r1, r1
    15d0:	2f 93       	push	r18
    15d2:	3f 93       	push	r19
    15d4:	4f 93       	push	r20
    15d6:	5f 93       	push	r21
    15d8:	6f 93       	push	r22
    15da:	7f 93       	push	r23
    15dc:	8f 93       	push	r24
    15de:	9f 93       	push	r25
    15e0:	af 93       	push	r26
    15e2:	bf 93       	push	r27
    15e4:	ef 93       	push	r30
    15e6:	ff 93       	push	r31
	static u16 count = 0;
	count ++;
    15e8:	80 91 c4 01 	lds	r24, 0x01C4
    15ec:	90 91 c5 01 	lds	r25, 0x01C5
    15f0:	01 96       	adiw	r24, 0x01	; 1
    15f2:	90 93 c5 01 	sts	0x01C5, r25
    15f6:	80 93 c4 01 	sts	0x01C4, r24
	if(count == private_CTC_counter)
    15fa:	20 91 c0 01 	lds	r18, 0x01C0
    15fe:	30 91 c1 01 	lds	r19, 0x01C1
    1602:	82 17       	cp	r24, r18
    1604:	93 07       	cpc	r25, r19
    1606:	59 f4       	brne	.+22     	; 0x161e <__vector_10+0x58>
	{
		count = 0;
    1608:	10 92 c5 01 	sts	0x01C5, r1
    160c:	10 92 c4 01 	sts	0x01C4, r1
		if(privatePTR_OC !=NULL)
    1610:	e0 91 c2 01 	lds	r30, 0x01C2
    1614:	f0 91 c3 01 	lds	r31, 0x01C3
    1618:	30 97       	sbiw	r30, 0x00	; 0
    161a:	09 f0       	breq	.+2      	; 0x161e <__vector_10+0x58>
			{
			privatePTR_OC();
    161c:	09 95       	icall
			}
	}
}
    161e:	ff 91       	pop	r31
    1620:	ef 91       	pop	r30
    1622:	bf 91       	pop	r27
    1624:	af 91       	pop	r26
    1626:	9f 91       	pop	r25
    1628:	8f 91       	pop	r24
    162a:	7f 91       	pop	r23
    162c:	6f 91       	pop	r22
    162e:	5f 91       	pop	r21
    1630:	4f 91       	pop	r20
    1632:	3f 91       	pop	r19
    1634:	2f 91       	pop	r18
    1636:	0f 90       	pop	r0
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	0f 90       	pop	r0
    163c:	1f 90       	pop	r1
    163e:	18 95       	reti

00001640 <SPI_voidInit>:
   SET_BIT(_SPCR, 0);
   CLR_BIT(_SPCR, 1);
   CLR_BIT(_SPSR, 0);

#elif SPI_MODE	==	SLAVE
   CLR_BIT(_SPCR, 4);
    1640:	ed e2       	ldi	r30, 0x2D	; 45
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	8f 7e       	andi	r24, 0xEF	; 239
    1648:	80 83       	st	Z, r24
#endif //SPI_MODE

   // Data Order --> LSB:SET	or  MSB:CLEAR
   SET_BIT(_SPCR, 5);
    164a:	80 81       	ld	r24, Z
    164c:	80 62       	ori	r24, 0x20	; 32
    164e:	80 83       	st	Z, r24

   //POLARITY, PHASE	--> Falling Rising	Setup Sample
   SET_BIT(_SPCR, 3);
    1650:	80 81       	ld	r24, Z
    1652:	88 60       	ori	r24, 0x08	; 8
    1654:	80 83       	st	Z, r24
   SET_BIT(_SPCR, 2);
    1656:	80 81       	ld	r24, Z
    1658:	84 60       	ori	r24, 0x04	; 4
    165a:	80 83       	st	Z, r24

   // enable SPI
	SET_BIT(_SPCR, 6);
    165c:	80 81       	ld	r24, Z
    165e:	80 64       	ori	r24, 0x40	; 64
    1660:	80 83       	st	Z, r24
}
    1662:	08 95       	ret

00001664 <SPI_voidTranseive>:

void SPI_voidTranseive(u8 copy_u8_TX_data, u8 * copy_u8_RX_data)
{
    1664:	98 2f       	mov	r25, r24
    1666:	db 01       	movw	r26, r22
	if (copy_u8_RX_data != NULL)
    1668:	61 15       	cp	r22, r1
    166a:	71 05       	cpc	r23, r1
    166c:	69 f0       	breq	.+26     	; 0x1688 <SPI_voidTranseive+0x24>
	{
		while(GET_BIT(_SPSR, 6));	// To prevent collision (Writing in buffer while still have the data to be sent
    166e:	ee e2       	ldi	r30, 0x2E	; 46
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	86 fd       	sbrc	r24, 6
    1676:	fd cf       	rjmp	.-6      	; 0x1672 <SPI_voidTranseive+0xe>
		_SPDR = copy_u8_TX_data;	// write buffer >> Data register
    1678:	9f b9       	out	0x0f, r25	; 15
		while(!GET_BIT(_SPSR, 7));	// blocking
    167a:	ee e2       	ldi	r30, 0x2E	; 46
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	88 23       	and	r24, r24
    1682:	ec f7       	brge	.-6      	; 0x167e <SPI_voidTranseive+0x1a>
		*copy_u8_RX_data =  _SPDR;	// Read data from buffer (Receive)
    1684:	8f b1       	in	r24, 0x0f	; 15
    1686:	8c 93       	st	X, r24
    1688:	08 95       	ret

0000168a <SPI_voidTransmit_Async>:
		return;
	}
}

void SPI_voidTransmit_Async(u8 copy_u8_TX_data, void(*PtrFunc)(u8 copy_u8_RX_data))
{
    168a:	98 2f       	mov	r25, r24
	if (PtrFunc != NULL)
    168c:	61 15       	cp	r22, r1
    168e:	71 05       	cpc	r23, r1
    1690:	79 f0       	breq	.+30     	; 0x16b0 <SPI_voidTransmit_Async+0x26>
	{
		// Enable SPI Interrupt
		SET_BIT(_SPCR, 7);
    1692:	ed e2       	ldi	r30, 0x2D	; 45
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	80 68       	ori	r24, 0x80	; 128
    169a:	80 83       	st	Z, r24

		Private_pCallback = PtrFunc;
    169c:	70 93 cb 01 	sts	0x01CB, r23
    16a0:	60 93 ca 01 	sts	0x01CA, r22
		while(GET_BIT(_SPSR, 6));	// To prevent collision (Writing in buffer while still have the data to be sent
    16a4:	ee e2       	ldi	r30, 0x2E	; 46
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	86 fd       	sbrc	r24, 6
    16ac:	fd cf       	rjmp	.-6      	; 0x16a8 <SPI_voidTransmit_Async+0x1e>
		_SPDR = copy_u8_TX_data;	// write buffer >> Data register
    16ae:	9f b9       	out	0x0f, r25	; 15
    16b0:	08 95       	ret

000016b2 <__vector_12>:

/* ----------------- Section : ISRs -----------------*/
void __vector_12(void) __attribute__((signal));

void __vector_12(void)
{
    16b2:	1f 92       	push	r1
    16b4:	0f 92       	push	r0
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	0f 92       	push	r0
    16ba:	11 24       	eor	r1, r1
    16bc:	2f 93       	push	r18
    16be:	3f 93       	push	r19
    16c0:	4f 93       	push	r20
    16c2:	5f 93       	push	r21
    16c4:	6f 93       	push	r22
    16c6:	7f 93       	push	r23
    16c8:	8f 93       	push	r24
    16ca:	9f 93       	push	r25
    16cc:	af 93       	push	r26
    16ce:	bf 93       	push	r27
    16d0:	ef 93       	push	r30
    16d2:	ff 93       	push	r31
	if(Private_pCallback)
    16d4:	e0 91 ca 01 	lds	r30, 0x01CA
    16d8:	f0 91 cb 01 	lds	r31, 0x01CB
    16dc:	30 97       	sbiw	r30, 0x00	; 0
    16de:	11 f0       	breq	.+4      	; 0x16e4 <__vector_12+0x32>
	{
		Private_pCallback(_SPDR);
    16e0:	8f b1       	in	r24, 0x0f	; 15
    16e2:	09 95       	icall
	}
}
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	bf 91       	pop	r27
    16ea:	af 91       	pop	r26
    16ec:	9f 91       	pop	r25
    16ee:	8f 91       	pop	r24
    16f0:	7f 91       	pop	r23
    16f2:	6f 91       	pop	r22
    16f4:	5f 91       	pop	r21
    16f6:	4f 91       	pop	r20
    16f8:	3f 91       	pop	r19
    16fa:	2f 91       	pop	r18
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	0f 90       	pop	r0
    1702:	1f 90       	pop	r1
    1704:	18 95       	reti

00001706 <Port_Init>:
 * 			   		the function will make PA_4, PA_5 as Output  and PA_6 as Input
 * @param	1- Pin_ConfigType *pins_cfg 	-> which is a pointer to a structure of data type "Pin_ConfigType"
 * @return	void
 */
void Port_Init (Pin_ConfigType *pins_cfg)
{
    1706:	4f 92       	push	r4
    1708:	5f 92       	push	r5
    170a:	6f 92       	push	r6
    170c:	7f 92       	push	r7
    170e:	8f 92       	push	r8
    1710:	9f 92       	push	r9
    1712:	af 92       	push	r10
    1714:	bf 92       	push	r11
    1716:	cf 92       	push	r12
    1718:	df 92       	push	r13
    171a:	ef 92       	push	r14
    171c:	ff 92       	push	r15
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	fc 01       	movw	r30, r24
    1728:	40 e0       	ldi	r20, 0x00	; 0
    172a:	50 e0       	ldi	r21, 0x00	; 0
			{
				SET_BIT(_DDRB, pins_cfg[i].Pin);
			}
			else
			{
				CLR_BIT(_DDRB, pins_cfg[i].Pin);
    172c:	0f 2e       	mov	r0, r31
    172e:	f7 e3       	ldi	r31, 0x37	; 55
    1730:	ef 2e       	mov	r14, r31
    1732:	ff 24       	eor	r15, r15
    1734:	f0 2d       	mov	r31, r0
    1736:	61 e0       	ldi	r22, 0x01	; 1
    1738:	70 e0       	ldi	r23, 0x00	; 0
				SET_BIT(_PORTB, pins_cfg[i].Pin);
    173a:	0f 2e       	mov	r0, r31
    173c:	f8 e3       	ldi	r31, 0x38	; 56
    173e:	8f 2e       	mov	r8, r31
    1740:	99 24       	eor	r9, r9
    1742:	f0 2d       	mov	r31, r0
			{
				SET_BIT(_DDRA, pins_cfg[i].Pin);
			}
			else
			{
				CLR_BIT(_DDRA, pins_cfg[i].Pin);
    1744:	0a e3       	ldi	r16, 0x3A	; 58
    1746:	10 e0       	ldi	r17, 0x00	; 0
				SET_BIT(_PORTA, pins_cfg[i].Pin);
    1748:	0f 2e       	mov	r0, r31
    174a:	fb e3       	ldi	r31, 0x3B	; 59
    174c:	6f 2e       	mov	r6, r31
    174e:	77 24       	eor	r7, r7
    1750:	f0 2d       	mov	r31, r0
			{
				SET_BIT(_DDRC, pins_cfg[i].Pin);
			}
			else
			{
				CLR_BIT(_DDRC, pins_cfg[i].Pin);
    1752:	c4 e3       	ldi	r28, 0x34	; 52
    1754:	d0 e0       	ldi	r29, 0x00	; 0
				SET_BIT(_PORTC, pins_cfg[i].Pin);
    1756:	0f 2e       	mov	r0, r31
    1758:	f5 e3       	ldi	r31, 0x35	; 53
    175a:	af 2e       	mov	r10, r31
    175c:	bb 24       	eor	r11, r11
    175e:	f0 2d       	mov	r31, r0
			{
				SET_BIT(_DDRD, pins_cfg[i].Pin);
			}
			else
			{
				CLR_BIT(_DDRD, pins_cfg[i].Pin);
    1760:	0f 2e       	mov	r0, r31
    1762:	f1 e3       	ldi	r31, 0x31	; 49
    1764:	4f 2e       	mov	r4, r31
    1766:	55 24       	eor	r5, r5
    1768:	f0 2d       	mov	r31, r0
				SET_BIT(_PORTD, pins_cfg[i].Pin);
    176a:	0f 2e       	mov	r0, r31
    176c:	f2 e3       	ldi	r31, 0x32	; 50
    176e:	cf 2e       	mov	r12, r31
    1770:	dd 24       	eor	r13, r13
    1772:	f0 2d       	mov	r31, r0
	for(int i = 0 ; i < 32 ; i ++)
	{
		if((pins_cfg[i].Port) == -1){
			break;
		}
		switch(pins_cfg[i].Port)
    1774:	80 81       	ld	r24, Z
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	51 f1       	breq	.+84     	; 0x17ce <Port_Init+0xc8>
    177a:	81 30       	cpi	r24, 0x01	; 1
    177c:	38 f0       	brcs	.+14     	; 0x178c <Port_Init+0x86>
    177e:	82 30       	cpi	r24, 0x02	; 2
    1780:	09 f4       	brne	.+2      	; 0x1784 <Port_Init+0x7e>
    1782:	46 c0       	rjmp	.+140    	; 0x1810 <Port_Init+0x10a>
    1784:	83 30       	cpi	r24, 0x03	; 3
    1786:	09 f0       	breq	.+2      	; 0x178a <Port_Init+0x84>
    1788:	82 c0       	rjmp	.+260    	; 0x188e <Port_Init+0x188>
    178a:	61 c0       	rjmp	.+194    	; 0x184e <Port_Init+0x148>
		{
		case Dio_PORTA:
			if((pins_cfg[i].Direction) == STD_OUT)
    178c:	82 81       	ldd	r24, Z+2	; 0x02
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	61 f4       	brne	.+24     	; 0x17aa <Port_Init+0xa4>
			{
				SET_BIT(_DDRA, pins_cfg[i].Pin);
    1792:	d8 01       	movw	r26, r16
    1794:	2c 91       	ld	r18, X
    1796:	cb 01       	movw	r24, r22
    1798:	01 80       	ldd	r0, Z+1	; 0x01
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <Port_Init+0x9a>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <Port_Init+0x96>
    17a4:	28 2b       	or	r18, r24
    17a6:	2c 93       	st	X, r18
    17a8:	72 c0       	rjmp	.+228    	; 0x188e <Port_Init+0x188>
			}
			else
			{
				CLR_BIT(_DDRA, pins_cfg[i].Pin);
    17aa:	d8 01       	movw	r26, r16
    17ac:	3c 91       	ld	r19, X
    17ae:	cb 01       	movw	r24, r22
    17b0:	01 80       	ldd	r0, Z+1	; 0x01
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <Port_Init+0xb2>
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	0a 94       	dec	r0
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <Port_Init+0xae>
    17bc:	28 2f       	mov	r18, r24
    17be:	20 95       	com	r18
    17c0:	23 23       	and	r18, r19
    17c2:	2c 93       	st	X, r18
				SET_BIT(_PORTA, pins_cfg[i].Pin);
    17c4:	d3 01       	movw	r26, r6
    17c6:	2c 91       	ld	r18, X
    17c8:	82 2b       	or	r24, r18
    17ca:	8c 93       	st	X, r24
    17cc:	60 c0       	rjmp	.+192    	; 0x188e <Port_Init+0x188>
			}
			break;
		case Dio_PORTB:
			if((pins_cfg[i].Direction) == STD_OUT)
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	61 f4       	brne	.+24     	; 0x17ec <Port_Init+0xe6>
			{
				SET_BIT(_DDRB, pins_cfg[i].Pin);
    17d4:	d7 01       	movw	r26, r14
    17d6:	2c 91       	ld	r18, X
    17d8:	cb 01       	movw	r24, r22
    17da:	01 80       	ldd	r0, Z+1	; 0x01
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <Port_Init+0xdc>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <Port_Init+0xd8>
    17e6:	28 2b       	or	r18, r24
    17e8:	2c 93       	st	X, r18
    17ea:	51 c0       	rjmp	.+162    	; 0x188e <Port_Init+0x188>
			}
			else
			{
				CLR_BIT(_DDRB, pins_cfg[i].Pin);
    17ec:	d7 01       	movw	r26, r14
    17ee:	3c 91       	ld	r19, X
    17f0:	cb 01       	movw	r24, r22
    17f2:	01 80       	ldd	r0, Z+1	; 0x01
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <Port_Init+0xf4>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <Port_Init+0xf0>
    17fe:	28 2f       	mov	r18, r24
    1800:	20 95       	com	r18
    1802:	23 23       	and	r18, r19
    1804:	2c 93       	st	X, r18
				SET_BIT(_PORTB, pins_cfg[i].Pin);
    1806:	d4 01       	movw	r26, r8
    1808:	2c 91       	ld	r18, X
    180a:	82 2b       	or	r24, r18
    180c:	8c 93       	st	X, r24
    180e:	3f c0       	rjmp	.+126    	; 0x188e <Port_Init+0x188>
			}
			break;
		case Dio_PORTC:
			if((pins_cfg[i].Direction) == STD_OUT)
    1810:	82 81       	ldd	r24, Z+2	; 0x02
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	59 f4       	brne	.+22     	; 0x182c <Port_Init+0x126>
			{
				SET_BIT(_DDRC, pins_cfg[i].Pin);
    1816:	28 81       	ld	r18, Y
    1818:	cb 01       	movw	r24, r22
    181a:	01 80       	ldd	r0, Z+1	; 0x01
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <Port_Init+0x11c>
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	0a 94       	dec	r0
    1824:	e2 f7       	brpl	.-8      	; 0x181e <Port_Init+0x118>
    1826:	28 2b       	or	r18, r24
    1828:	28 83       	st	Y, r18
    182a:	31 c0       	rjmp	.+98     	; 0x188e <Port_Init+0x188>
			}
			else
			{
				CLR_BIT(_DDRC, pins_cfg[i].Pin);
    182c:	38 81       	ld	r19, Y
    182e:	cb 01       	movw	r24, r22
    1830:	01 80       	ldd	r0, Z+1	; 0x01
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <Port_Init+0x132>
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	0a 94       	dec	r0
    183a:	e2 f7       	brpl	.-8      	; 0x1834 <Port_Init+0x12e>
    183c:	28 2f       	mov	r18, r24
    183e:	20 95       	com	r18
    1840:	23 23       	and	r18, r19
    1842:	28 83       	st	Y, r18
				SET_BIT(_PORTC, pins_cfg[i].Pin);
    1844:	d5 01       	movw	r26, r10
    1846:	2c 91       	ld	r18, X
    1848:	82 2b       	or	r24, r18
    184a:	8c 93       	st	X, r24
    184c:	20 c0       	rjmp	.+64     	; 0x188e <Port_Init+0x188>
			}
			break;
		case Dio_PORTD:
			if((pins_cfg[i].Direction) == STD_OUT)
    184e:	82 81       	ldd	r24, Z+2	; 0x02
    1850:	81 30       	cpi	r24, 0x01	; 1
    1852:	61 f4       	brne	.+24     	; 0x186c <Port_Init+0x166>
			{
				SET_BIT(_DDRD, pins_cfg[i].Pin);
    1854:	d2 01       	movw	r26, r4
    1856:	2c 91       	ld	r18, X
    1858:	cb 01       	movw	r24, r22
    185a:	01 80       	ldd	r0, Z+1	; 0x01
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <Port_Init+0x15c>
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	0a 94       	dec	r0
    1864:	e2 f7       	brpl	.-8      	; 0x185e <Port_Init+0x158>
    1866:	28 2b       	or	r18, r24
    1868:	2c 93       	st	X, r18
    186a:	11 c0       	rjmp	.+34     	; 0x188e <Port_Init+0x188>
			}
			else
			{
				CLR_BIT(_DDRD, pins_cfg[i].Pin);
    186c:	d2 01       	movw	r26, r4
    186e:	3c 91       	ld	r19, X
    1870:	cb 01       	movw	r24, r22
    1872:	01 80       	ldd	r0, Z+1	; 0x01
    1874:	02 c0       	rjmp	.+4      	; 0x187a <Port_Init+0x174>
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	0a 94       	dec	r0
    187c:	e2 f7       	brpl	.-8      	; 0x1876 <Port_Init+0x170>
    187e:	28 2f       	mov	r18, r24
    1880:	20 95       	com	r18
    1882:	23 23       	and	r18, r19
    1884:	2c 93       	st	X, r18
				SET_BIT(_PORTD, pins_cfg[i].Pin);
    1886:	d6 01       	movw	r26, r12
    1888:	2c 91       	ld	r18, X
    188a:	82 2b       	or	r24, r18
    188c:	8c 93       	st	X, r24
 * @param	1- Pin_ConfigType *pins_cfg 	-> which is a pointer to a structure of data type "Pin_ConfigType"
 * @return	void
 */
void Port_Init (Pin_ConfigType *pins_cfg)
{
	for(int i = 0 ; i < 32 ; i ++)
    188e:	4f 5f       	subi	r20, 0xFF	; 255
    1890:	5f 4f       	sbci	r21, 0xFF	; 255
    1892:	33 96       	adiw	r30, 0x03	; 3
    1894:	40 32       	cpi	r20, 0x20	; 32
    1896:	51 05       	cpc	r21, r1
    1898:	09 f0       	breq	.+2      	; 0x189c <Port_Init+0x196>
    189a:	6c cf       	rjmp	.-296    	; 0x1774 <Port_Init+0x6e>
			}
			break;
		default: break;
		}
	}
}
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	ff 90       	pop	r15
    18a6:	ef 90       	pop	r14
    18a8:	df 90       	pop	r13
    18aa:	cf 90       	pop	r12
    18ac:	bf 90       	pop	r11
    18ae:	af 90       	pop	r10
    18b0:	9f 90       	pop	r9
    18b2:	8f 90       	pop	r8
    18b4:	7f 90       	pop	r7
    18b6:	6f 90       	pop	r6
    18b8:	5f 90       	pop	r5
    18ba:	4f 90       	pop	r4
    18bc:	08 95       	ret

000018be <Port_SetPinDirection>:
 * @param	1- Pin 			-> to choose the PIN to set its Direction  EX: (PA_2)
 * 			2- Direction 	-> to choose the Direction to the PIN  	Ex : (1 for HIGH or 0 for LOW)
 * @return	void
 */
void Port_SetPinDirection (Dio_ChannelType Pin,Dio_DirectionType Direction)
{
    18be:	48 2f       	mov	r20, r24
	switch(Pin/8)
    18c0:	86 95       	lsr	r24
    18c2:	86 95       	lsr	r24
    18c4:	86 95       	lsr	r24
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	31 f1       	breq	.+76     	; 0x1916 <Port_SetPinDirection+0x58>
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	38 f0       	brcs	.+14     	; 0x18dc <Port_SetPinDirection+0x1e>
    18ce:	82 30       	cpi	r24, 0x02	; 2
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <Port_SetPinDirection+0x16>
    18d2:	42 c0       	rjmp	.+132    	; 0x1958 <Port_SetPinDirection+0x9a>
    18d4:	83 30       	cpi	r24, 0x03	; 3
    18d6:	09 f0       	breq	.+2      	; 0x18da <Port_SetPinDirection+0x1c>
    18d8:	80 c0       	rjmp	.+256    	; 0x19da <Port_SetPinDirection+0x11c>
    18da:	5f c0       	rjmp	.+190    	; 0x199a <Port_SetPinDirection+0xdc>
	{
	case Dio_PORTA:
		if(Direction == STD_OUT)
    18dc:	61 30       	cpi	r22, 0x01	; 1
    18de:	69 f4       	brne	.+26     	; 0x18fa <Port_SetPinDirection+0x3c>
			SET_BIT(_DDRA, Pin);
    18e0:	ea e3       	ldi	r30, 0x3A	; 58
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	20 81       	ld	r18, Z
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <Port_SetPinDirection+0x32>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	4a 95       	dec	r20
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <Port_SetPinDirection+0x2e>
    18f4:	28 2b       	or	r18, r24
    18f6:	20 83       	st	Z, r18
    18f8:	08 95       	ret
		else
			CLR_BIT(_DDRA, Pin);
    18fa:	ea e3       	ldi	r30, 0x3A	; 58
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	20 81       	ld	r18, Z
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	02 c0       	rjmp	.+4      	; 0x190a <Port_SetPinDirection+0x4c>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	4a 95       	dec	r20
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <Port_SetPinDirection+0x48>
    190e:	80 95       	com	r24
    1910:	82 23       	and	r24, r18
    1912:	80 83       	st	Z, r24
    1914:	08 95       	ret
		break;
	case Dio_PORTB:
		if(Direction == STD_OUT)
    1916:	61 30       	cpi	r22, 0x01	; 1
    1918:	79 f4       	brne	.+30     	; 0x1938 <Port_SetPinDirection+0x7a>
			SET_BIT(_DDRB, Pin % 8);
    191a:	e7 e3       	ldi	r30, 0x37	; 55
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	20 81       	ld	r18, Z
    1920:	34 2f       	mov	r19, r20
    1922:	37 70       	andi	r19, 0x07	; 7
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 c0       	rjmp	.+4      	; 0x192e <Port_SetPinDirection+0x70>
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	3a 95       	dec	r19
    1930:	e2 f7       	brpl	.-8      	; 0x192a <Port_SetPinDirection+0x6c>
    1932:	28 2b       	or	r18, r24
    1934:	20 83       	st	Z, r18
    1936:	08 95       	ret
		else
			CLR_BIT(_DDRB, Pin % 8);
    1938:	e7 e3       	ldi	r30, 0x37	; 55
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	30 81       	ld	r19, Z
    193e:	24 2f       	mov	r18, r20
    1940:	27 70       	andi	r18, 0x07	; 7
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 c0       	rjmp	.+4      	; 0x194c <Port_SetPinDirection+0x8e>
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	2a 95       	dec	r18
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <Port_SetPinDirection+0x8a>
    1950:	80 95       	com	r24
    1952:	83 23       	and	r24, r19
    1954:	80 83       	st	Z, r24
    1956:	08 95       	ret
		break;
	case Dio_PORTC:
		if(Direction == STD_OUT)
    1958:	61 30       	cpi	r22, 0x01	; 1
    195a:	79 f4       	brne	.+30     	; 0x197a <Port_SetPinDirection+0xbc>
			SET_BIT(_DDRC, Pin % 8);
    195c:	e4 e3       	ldi	r30, 0x34	; 52
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	20 81       	ld	r18, Z
    1962:	34 2f       	mov	r19, r20
    1964:	37 70       	andi	r19, 0x07	; 7
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <Port_SetPinDirection+0xb2>
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	3a 95       	dec	r19
    1972:	e2 f7       	brpl	.-8      	; 0x196c <Port_SetPinDirection+0xae>
    1974:	28 2b       	or	r18, r24
    1976:	20 83       	st	Z, r18
    1978:	08 95       	ret
		else
			CLR_BIT(_DDRC, Pin % 8);
    197a:	e4 e3       	ldi	r30, 0x34	; 52
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	30 81       	ld	r19, Z
    1980:	24 2f       	mov	r18, r20
    1982:	27 70       	andi	r18, 0x07	; 7
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	02 c0       	rjmp	.+4      	; 0x198e <Port_SetPinDirection+0xd0>
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	2a 95       	dec	r18
    1990:	e2 f7       	brpl	.-8      	; 0x198a <Port_SetPinDirection+0xcc>
    1992:	80 95       	com	r24
    1994:	83 23       	and	r24, r19
    1996:	80 83       	st	Z, r24
    1998:	08 95       	ret
		break;
	case Dio_PORTD:
		if(Direction == STD_OUT)
    199a:	61 30       	cpi	r22, 0x01	; 1
    199c:	79 f4       	brne	.+30     	; 0x19bc <Port_SetPinDirection+0xfe>
			SET_BIT(_DDRD, Pin % 8);
    199e:	e1 e3       	ldi	r30, 0x31	; 49
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	20 81       	ld	r18, Z
    19a4:	34 2f       	mov	r19, r20
    19a6:	37 70       	andi	r19, 0x07	; 7
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <Port_SetPinDirection+0xf4>
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	3a 95       	dec	r19
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <Port_SetPinDirection+0xf0>
    19b6:	28 2b       	or	r18, r24
    19b8:	20 83       	st	Z, r18
    19ba:	08 95       	ret
		else
			CLR_BIT(_DDRD, Pin % 8);
    19bc:	e1 e3       	ldi	r30, 0x31	; 49
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	30 81       	ld	r19, Z
    19c2:	24 2f       	mov	r18, r20
    19c4:	27 70       	andi	r18, 0x07	; 7
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <Port_SetPinDirection+0x112>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	2a 95       	dec	r18
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <Port_SetPinDirection+0x10e>
    19d4:	80 95       	com	r24
    19d6:	83 23       	and	r24, r19
    19d8:	80 83       	st	Z, r24
    19da:	08 95       	ret

000019dc <ICU_voidInit>:
/* ----------------- Section : Software Interfaces Implementation -----------------*/

void ICU_voidInit(void)
{
	// Timer 1 mode --> Normal
	CLR_BIT(_TCCR1A, _WGM10);
    19dc:	ef e4       	ldi	r30, 0x4F	; 79
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	8e 7f       	andi	r24, 0xFE	; 254
    19e4:	80 83       	st	Z, r24
	CLR_BIT(_TCCR1A, _WGM11);
    19e6:	80 81       	ld	r24, Z
    19e8:	8d 7f       	andi	r24, 0xFD	; 253
    19ea:	80 83       	st	Z, r24
	CLR_BIT(_TCCR1B, _WGM12);
    19ec:	ee e4       	ldi	r30, 0x4E	; 78
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	87 7f       	andi	r24, 0xF7	; 247
    19f4:	80 83       	st	Z, r24
	CLR_BIT(_TCCR1B, _WGM13);
    19f6:	80 81       	ld	r24, Z
    19f8:	8f 7e       	andi	r24, 0xEF	; 239
    19fa:	80 83       	st	Z, r24
#if ICU_Starting_Edge == FAIILING
	// Edge select --> Falling
	CLR_BIT(_TCCR1B, _ICES1);
#elif ICU_Starting_Edge == RISING
	SET_BIT(_TCCR1B, _ICES1);
    19fc:	80 81       	ld	r24, Z
    19fe:	80 64       	ori	r24, 0x40	; 64
    1a00:	80 83       	st	Z, r24
#endif
	// ICU Interrupt Enable
	SET_BIT(_TIMSK, _TICIE1);
    1a02:	a9 e5       	ldi	r26, 0x59	; 89
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	8c 91       	ld	r24, X
    1a08:	80 62       	ori	r24, 0x20	; 32
    1a0a:	8c 93       	st	X, r24

	// Start Timer  --> for 64 prescaler
	SET_BIT(_TCCR1B, _CS10);
    1a0c:	80 81       	ld	r24, Z
    1a0e:	81 60       	ori	r24, 0x01	; 1
    1a10:	80 83       	st	Z, r24
	SET_BIT(_TCCR1B, _CS11);
    1a12:	80 81       	ld	r24, Z
    1a14:	82 60       	ori	r24, 0x02	; 2
    1a16:	80 83       	st	Z, r24
	CLR_BIT(_TCCR1B, _CS12);
    1a18:	80 81       	ld	r24, Z
    1a1a:	8b 7f       	andi	r24, 0xFB	; 251
    1a1c:	80 83       	st	Z, r24

}
    1a1e:	08 95       	ret

00001a20 <ICU_voidGetDutyCycle>:

void ICU_voidGetDutyCycle(u8 * copy_u8_duty)
{
    1a20:	cf 92       	push	r12
    1a22:	df 92       	push	r13
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	ec 01       	movw	r28, r24
	if(copy_u8_duty != NULL)
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	e9 f0       	breq	.+58     	; 0x1a70 <ICU_voidGetDutyCycle+0x50>
	{
		*copy_u8_duty = ((u32) private_u16_On_Period * 100 ) / (private_u16_On_Period + private_u16_Off_Period);
    1a36:	60 91 d0 01 	lds	r22, 0x01D0
    1a3a:	70 91 d1 01 	lds	r23, 0x01D1
    1a3e:	c0 90 d0 01 	lds	r12, 0x01D0
    1a42:	d0 90 d1 01 	lds	r13, 0x01D1
    1a46:	e0 90 d2 01 	lds	r14, 0x01D2
    1a4a:	f0 90 d3 01 	lds	r15, 0x01D3
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	24 e6       	ldi	r18, 0x64	; 100
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	50 e0       	ldi	r21, 0x00	; 0
    1a5a:	0e 94 38 19 	call	0x3270	; 0x3270 <__mulsi3>
    1a5e:	ec 0c       	add	r14, r12
    1a60:	fd 1c       	adc	r15, r13
    1a62:	00 e0       	ldi	r16, 0x00	; 0
    1a64:	10 e0       	ldi	r17, 0x00	; 0
    1a66:	a8 01       	movw	r20, r16
    1a68:	97 01       	movw	r18, r14
    1a6a:	0e 94 57 19 	call	0x32ae	; 0x32ae <__udivmodsi4>
    1a6e:	28 83       	st	Y, r18
	}
}
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	1f 91       	pop	r17
    1a76:	0f 91       	pop	r16
    1a78:	ff 90       	pop	r15
    1a7a:	ef 90       	pop	r14
    1a7c:	df 90       	pop	r13
    1a7e:	cf 90       	pop	r12
    1a80:	08 95       	ret

00001a82 <ICU_voidGetFrequency>:

void ICU_voidGetFrequency(u32 * copy_u32_freq_HZ)
{
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
    1a86:	ec 01       	movw	r28, r24
	if(copy_u32_freq_HZ != NULL)
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	b1 f0       	breq	.+44     	; 0x1ab8 <ICU_voidGetFrequency+0x36>
	{
		*copy_u32_freq_HZ = 1000000UL / (private_u16_On_Period + private_u16_Off_Period);		// 1 S = 1000000 us
    1a8c:	80 91 d0 01 	lds	r24, 0x01D0
    1a90:	90 91 d1 01 	lds	r25, 0x01D1
    1a94:	20 91 d2 01 	lds	r18, 0x01D2
    1a98:	30 91 d3 01 	lds	r19, 0x01D3
    1a9c:	28 0f       	add	r18, r24
    1a9e:	39 1f       	adc	r19, r25
    1aa0:	40 e0       	ldi	r20, 0x00	; 0
    1aa2:	50 e0       	ldi	r21, 0x00	; 0
    1aa4:	60 e4       	ldi	r22, 0x40	; 64
    1aa6:	72 e4       	ldi	r23, 0x42	; 66
    1aa8:	8f e0       	ldi	r24, 0x0F	; 15
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	0e 94 57 19 	call	0x32ae	; 0x32ae <__udivmodsi4>
    1ab0:	28 83       	st	Y, r18
    1ab2:	39 83       	std	Y+1, r19	; 0x01
    1ab4:	4a 83       	std	Y+2, r20	; 0x02
    1ab6:	5b 83       	std	Y+3, r21	; 0x03
	}
}
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	08 95       	ret

00001abe <ICU_u32GetFallingEdgeTime>:

u32 ICU_u32GetFallingEdgeTime(void)
{
    // Assuming the time is in microseconds
    return (u32)private_u16_On_Period;
    1abe:	20 91 d0 01 	lds	r18, 0x01D0
    1ac2:	30 91 d1 01 	lds	r19, 0x01D1
    1ac6:	40 e0       	ldi	r20, 0x00	; 0
    1ac8:	50 e0       	ldi	r21, 0x00	; 0
}
    1aca:	62 2f       	mov	r22, r18
    1acc:	73 2f       	mov	r23, r19
    1ace:	84 2f       	mov	r24, r20
    1ad0:	95 2f       	mov	r25, r21
    1ad2:	08 95       	ret

00001ad4 <__vector_6>:

//ICU ISR
void __vector_6(void) __attribute__((signal));

void __vector_6(void)
{
    1ad4:	1f 92       	push	r1
    1ad6:	0f 92       	push	r0
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	0f 92       	push	r0
    1adc:	11 24       	eor	r1, r1
    1ade:	2f 93       	push	r18
    1ae0:	3f 93       	push	r19
    1ae2:	4f 93       	push	r20
    1ae4:	5f 93       	push	r21
    1ae6:	8f 93       	push	r24
    1ae8:	9f 93       	push	r25
    1aea:	ef 93       	push	r30
    1aec:	ff 93       	push	r31
	static u8 local_edge_falg = ICU_Starting_Edge;
	static u16 local_u16_OldValue = 0 ;
	static u16 local_u16_CounterValue = 0 ;

	local_u16_CounterValue = _ICR1;
    1aee:	26 b5       	in	r18, 0x26	; 38
    1af0:	37 b5       	in	r19, 0x27	; 39
    1af2:	30 93 cd 01 	sts	0x01CD, r19
    1af6:	20 93 cc 01 	sts	0x01CC, r18

	if(local_edge_falg == RISING)
    1afa:	80 91 6b 01 	lds	r24, 0x016B
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	c9 f4       	brne	.+50     	; 0x1b34 <__vector_6+0x60>
	{
		private_u16_Off_Period = (local_u16_CounterValue - local_u16_OldValue) * 4;   // 4 : tick time for 64 prescaler
    1b02:	80 91 ce 01 	lds	r24, 0x01CE
    1b06:	90 91 cf 01 	lds	r25, 0x01CF
    1b0a:	a9 01       	movw	r20, r18
    1b0c:	48 1b       	sub	r20, r24
    1b0e:	59 0b       	sbc	r21, r25
    1b10:	ca 01       	movw	r24, r20
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	90 93 d3 01 	sts	0x01D3, r25
    1b1e:	80 93 d2 01 	sts	0x01D2, r24
		CLR_BIT(_TCCR1B, _ICES1);
    1b22:	ee e4       	ldi	r30, 0x4E	; 78
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	8f 7b       	andi	r24, 0xBF	; 191
    1b2a:	80 83       	st	Z, r24
		local_edge_falg = FALLING;
    1b2c:	82 e0       	ldi	r24, 0x02	; 2
    1b2e:	80 93 6b 01 	sts	0x016B, r24
    1b32:	1a c0       	rjmp	.+52     	; 0x1b68 <__vector_6+0x94>
	}
	else if(local_edge_falg == FALLING)
    1b34:	82 30       	cpi	r24, 0x02	; 2
    1b36:	c1 f4       	brne	.+48     	; 0x1b68 <__vector_6+0x94>
	{
		private_u16_On_Period = (local_u16_CounterValue - local_u16_OldValue) * 4;   // 4 : tick time for 64 prescaler
    1b38:	80 91 ce 01 	lds	r24, 0x01CE
    1b3c:	90 91 cf 01 	lds	r25, 0x01CF
    1b40:	a9 01       	movw	r20, r18
    1b42:	48 1b       	sub	r20, r24
    1b44:	59 0b       	sbc	r21, r25
    1b46:	ca 01       	movw	r24, r20
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	90 93 d1 01 	sts	0x01D1, r25
    1b54:	80 93 d0 01 	sts	0x01D0, r24
		SET_BIT(_TCCR1B, _ICES1);
    1b58:	ee e4       	ldi	r30, 0x4E	; 78
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	80 64       	ori	r24, 0x40	; 64
    1b60:	80 83       	st	Z, r24
		local_edge_falg = RISING;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	80 93 6b 01 	sts	0x016B, r24
	}
	local_u16_OldValue = _ICR1;
    1b68:	86 b5       	in	r24, 0x26	; 38
    1b6a:	97 b5       	in	r25, 0x27	; 39
    1b6c:	90 93 cf 01 	sts	0x01CF, r25
    1b70:	80 93 ce 01 	sts	0x01CE, r24
}
    1b74:	ff 91       	pop	r31
    1b76:	ef 91       	pop	r30
    1b78:	9f 91       	pop	r25
    1b7a:	8f 91       	pop	r24
    1b7c:	5f 91       	pop	r21
    1b7e:	4f 91       	pop	r20
    1b80:	3f 91       	pop	r19
    1b82:	2f 91       	pop	r18
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	0f 90       	pop	r0
    1b8a:	1f 90       	pop	r1
    1b8c:	18 95       	reti

00001b8e <GI_voidEnable>:
 * @param	void
 * @return	void
 */
void GI_voidEnable(void)
{
	SET_BIT(_SREG, GLE);
    1b8e:	ef e5       	ldi	r30, 0x5F	; 95
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	80 68       	ori	r24, 0x80	; 128
    1b96:	80 83       	st	Z, r24
}
    1b98:	08 95       	ret

00001b9a <GI_voidDisable>:
 * @param	void
 * @return	void
 */
void GI_voidDisable(void)
{
	CLR_BIT(_SREG, GLE);
    1b9a:	ef e5       	ldi	r30, 0x5F	; 95
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	8f 77       	andi	r24, 0x7F	; 127
    1ba2:	80 83       	st	Z, r24
}
    1ba4:	08 95       	ret

00001ba6 <EXTI_voidInit>:
 * 			2- copy_u8SenseControl		-> External interrupt Modes (RISING_EDGE, FALLING_EDGE, LOW_LEVEL or LOGICAL_CHANGE)
 * @return	void
 */
void EXTI_voidInit(u8 copy_u8InterruptSource, u8 copy_u8SenseControl)
{
	switch (copy_u8InterruptSource)
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	81 f1       	breq	.+96     	; 0x1c0a <EXTI_voidInit+0x64>
    1baa:	81 30       	cpi	r24, 0x01	; 1
    1bac:	20 f0       	brcs	.+8      	; 0x1bb6 <EXTI_voidInit+0x10>
    1bae:	82 30       	cpi	r24, 0x02	; 2
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <EXTI_voidInit+0xe>
    1bb2:	62 c0       	rjmp	.+196    	; 0x1c78 <EXTI_voidInit+0xd2>
    1bb4:	54 c0       	rjmp	.+168    	; 0x1c5e <EXTI_voidInit+0xb8>
	{
	case EXTI_INT0:
		switch (copy_u8SenseControl)
    1bb6:	62 30       	cpi	r22, 0x02	; 2
    1bb8:	f9 f0       	breq	.+62     	; 0x1bf8 <EXTI_voidInit+0x52>
    1bba:	63 30       	cpi	r22, 0x03	; 3
    1bbc:	a1 f0       	breq	.+40     	; 0x1be6 <EXTI_voidInit+0x40>
    1bbe:	61 30       	cpi	r22, 0x01	; 1
    1bc0:	49 f0       	breq	.+18     	; 0x1bd4 <EXTI_voidInit+0x2e>
		{
		default:
		case RISING_EDGE:
			SET_BIT(_MCUCR, ISC00);
    1bc2:	e5 e5       	ldi	r30, 0x55	; 85
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	81 60       	ori	r24, 0x01	; 1
    1bca:	80 83       	st	Z, r24
			SET_BIT(_MCUCR, ISC01);
    1bcc:	80 81       	ld	r24, Z
    1bce:	82 60       	ori	r24, 0x02	; 2
    1bd0:	80 83       	st	Z, r24
    1bd2:	08 95       	ret
			break;
		case FALLING_EDGE:
			CLR_BIT(_MCUCR, ISC00);
    1bd4:	e5 e5       	ldi	r30, 0x55	; 85
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	8e 7f       	andi	r24, 0xFE	; 254
    1bdc:	80 83       	st	Z, r24
			SET_BIT(_MCUCR, ISC01);
    1bde:	80 81       	ld	r24, Z
    1be0:	82 60       	ori	r24, 0x02	; 2
    1be2:	80 83       	st	Z, r24
    1be4:	08 95       	ret
			break;
		case LOGICAL_CHANGE:
			SET_BIT(_MCUCR, ISC00);
    1be6:	e5 e5       	ldi	r30, 0x55	; 85
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	81 60       	ori	r24, 0x01	; 1
    1bee:	80 83       	st	Z, r24
			CLR_BIT(_MCUCR, ISC01);
    1bf0:	80 81       	ld	r24, Z
    1bf2:	8d 7f       	andi	r24, 0xFD	; 253
    1bf4:	80 83       	st	Z, r24
    1bf6:	08 95       	ret
			break;
		case LOW_LEVEL:
			CLR_BIT(_MCUCR, ISC00);
    1bf8:	e5 e5       	ldi	r30, 0x55	; 85
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	8e 7f       	andi	r24, 0xFE	; 254
    1c00:	80 83       	st	Z, r24
			CLR_BIT(_MCUCR, ISC01);
    1c02:	80 81       	ld	r24, Z
    1c04:	8d 7f       	andi	r24, 0xFD	; 253
    1c06:	80 83       	st	Z, r24
    1c08:	08 95       	ret
			break;
		}
		break;

	case EXTI_INT1:
		switch (copy_u8SenseControl)
    1c0a:	62 30       	cpi	r22, 0x02	; 2
    1c0c:	f9 f0       	breq	.+62     	; 0x1c4c <EXTI_voidInit+0xa6>
    1c0e:	63 30       	cpi	r22, 0x03	; 3
    1c10:	a1 f0       	breq	.+40     	; 0x1c3a <EXTI_voidInit+0x94>
    1c12:	61 30       	cpi	r22, 0x01	; 1
    1c14:	49 f0       	breq	.+18     	; 0x1c28 <EXTI_voidInit+0x82>
		{
		default:
		case RISING_EDGE:
			SET_BIT(_MCUCR, ISC10);
    1c16:	e5 e5       	ldi	r30, 0x55	; 85
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	84 60       	ori	r24, 0x04	; 4
    1c1e:	80 83       	st	Z, r24
			SET_BIT(_MCUCR, ISC11);
    1c20:	80 81       	ld	r24, Z
    1c22:	88 60       	ori	r24, 0x08	; 8
    1c24:	80 83       	st	Z, r24
    1c26:	08 95       	ret
			break;
		case FALLING_EDGE:
			CLR_BIT(_MCUCR, ISC10);
    1c28:	e5 e5       	ldi	r30, 0x55	; 85
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	8b 7f       	andi	r24, 0xFB	; 251
    1c30:	80 83       	st	Z, r24
			SET_BIT(_MCUCR, ISC11);
    1c32:	80 81       	ld	r24, Z
    1c34:	88 60       	ori	r24, 0x08	; 8
    1c36:	80 83       	st	Z, r24
    1c38:	08 95       	ret
			break;
		case LOGICAL_CHANGE:
			SET_BIT(_MCUCR, ISC10);
    1c3a:	e5 e5       	ldi	r30, 0x55	; 85
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	84 60       	ori	r24, 0x04	; 4
    1c42:	80 83       	st	Z, r24
			CLR_BIT(_MCUCR, ISC11);
    1c44:	80 81       	ld	r24, Z
    1c46:	87 7f       	andi	r24, 0xF7	; 247
    1c48:	80 83       	st	Z, r24
    1c4a:	08 95       	ret
			break;
		case LOW_LEVEL:
			CLR_BIT(_MCUCR, ISC10);
    1c4c:	e5 e5       	ldi	r30, 0x55	; 85
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	8b 7f       	andi	r24, 0xFB	; 251
    1c54:	80 83       	st	Z, r24
			CLR_BIT(_MCUCR, ISC11);
    1c56:	80 81       	ld	r24, Z
    1c58:	87 7f       	andi	r24, 0xF7	; 247
    1c5a:	80 83       	st	Z, r24
    1c5c:	08 95       	ret
			break;
		}
		break;

	case EXTI_INT2:
		switch (copy_u8SenseControl)
    1c5e:	61 30       	cpi	r22, 0x01	; 1
    1c60:	31 f0       	breq	.+12     	; 0x1c6e <EXTI_voidInit+0xc8>
		{
		default:
		case RISING_EDGE:
			SET_BIT(_MCUCSR, ISC2);
    1c62:	e4 e5       	ldi	r30, 0x54	; 84
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	80 64       	ori	r24, 0x40	; 64
    1c6a:	80 83       	st	Z, r24
    1c6c:	08 95       	ret
			break;
		case FALLING_EDGE:
			CLR_BIT(_MCUCSR, ISC2);
    1c6e:	e4 e5       	ldi	r30, 0x54	; 84
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	8f 7b       	andi	r24, 0xBF	; 191
    1c76:	80 83       	st	Z, r24
    1c78:	08 95       	ret

00001c7a <EXTI_voidEnable>:
 * @param	1- copy_u8InterruptSource 	-> External interrupt source (EXTI_INTx where x = (0, 1 or 2))
 * @return	void
 */
void EXTI_voidEnable(u8 copy_u8InterruptSource)
{
	switch (copy_u8InterruptSource)
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	59 f0       	breq	.+22     	; 0x1c94 <EXTI_voidEnable+0x1a>
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	18 f0       	brcs	.+6      	; 0x1c88 <EXTI_voidEnable+0xe>
    1c82:	82 30       	cpi	r24, 0x02	; 2
    1c84:	91 f4       	brne	.+36     	; 0x1caa <EXTI_voidEnable+0x30>
    1c86:	0c c0       	rjmp	.+24     	; 0x1ca0 <EXTI_voidEnable+0x26>
	{
	case EXTI_INT0:
		SET_BIT(_GICR, INT0);
    1c88:	eb e5       	ldi	r30, 0x5B	; 91
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	80 64       	ori	r24, 0x40	; 64
    1c90:	80 83       	st	Z, r24
    1c92:	08 95       	ret
		break;
	case EXTI_INT1:
		SET_BIT(_GICR, INT1);
    1c94:	eb e5       	ldi	r30, 0x5B	; 91
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	80 68       	ori	r24, 0x80	; 128
    1c9c:	80 83       	st	Z, r24
    1c9e:	08 95       	ret
		break;
	case EXTI_INT2:
		SET_BIT(_GICR, INT2);
    1ca0:	eb e5       	ldi	r30, 0x5B	; 91
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	80 62       	ori	r24, 0x20	; 32
    1ca8:	80 83       	st	Z, r24
    1caa:	08 95       	ret

00001cac <EXTI_voidDisable>:
 * @param	1- copy_u8InterruptSource 	-> External interrupt source (EXTI_INTx where x = (0, 1 or 2))
 * @return	void
 */
void EXTI_voidDisable(u8 copy_u8InterruptSource)
{
	switch (copy_u8InterruptSource)
    1cac:	81 30       	cpi	r24, 0x01	; 1
    1cae:	59 f0       	breq	.+22     	; 0x1cc6 <EXTI_voidDisable+0x1a>
    1cb0:	81 30       	cpi	r24, 0x01	; 1
    1cb2:	18 f0       	brcs	.+6      	; 0x1cba <EXTI_voidDisable+0xe>
    1cb4:	82 30       	cpi	r24, 0x02	; 2
    1cb6:	91 f4       	brne	.+36     	; 0x1cdc <EXTI_voidDisable+0x30>
    1cb8:	0c c0       	rjmp	.+24     	; 0x1cd2 <EXTI_voidDisable+0x26>
	{
	case EXTI_INT0:
		CLR_BIT(_GICR, INT0);
    1cba:	eb e5       	ldi	r30, 0x5B	; 91
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	8f 7b       	andi	r24, 0xBF	; 191
    1cc2:	80 83       	st	Z, r24
    1cc4:	08 95       	ret
		break;
	case EXTI_INT1:
		CLR_BIT(_GICR, INT1);
    1cc6:	eb e5       	ldi	r30, 0x5B	; 91
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	8f 77       	andi	r24, 0x7F	; 127
    1cce:	80 83       	st	Z, r24
    1cd0:	08 95       	ret
		break;
	case EXTI_INT2:
		CLR_BIT(_GICR, INT2);
    1cd2:	eb e5       	ldi	r30, 0x5B	; 91
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	8f 7d       	andi	r24, 0xDF	; 223
    1cda:	80 83       	st	Z, r24
    1cdc:	08 95       	ret

00001cde <EXTI0_voidSendCallBack>:
}

//CallBack Functions Implementation for EXTI0, 1, 2
void EXTI0_voidSendCallBack(void (*PtrF0)(void))
{
	if(PtrF0 !=NULL)
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	21 f0       	breq	.+8      	; 0x1cea <EXTI0_voidSendCallBack+0xc>
	{
		EXTI_prviate_PtrCallBack0 = PtrF0;
    1ce2:	90 93 d9 01 	sts	0x01D9, r25
    1ce6:	80 93 d8 01 	sts	0x01D8, r24
    1cea:	08 95       	ret

00001cec <EXTI1_voidSendCallBack>:
	}
}

void EXTI1_voidSendCallBack(void (*PtrF1)(void))
{
	if(PtrF1 !=NULL)
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	21 f0       	breq	.+8      	; 0x1cf8 <EXTI1_voidSendCallBack+0xc>
	{
		EXTI_prviate_PtrCallBack1 = PtrF1;
    1cf0:	90 93 d7 01 	sts	0x01D7, r25
    1cf4:	80 93 d6 01 	sts	0x01D6, r24
    1cf8:	08 95       	ret

00001cfa <EXTI2_voidSendCallBack>:
	}
}

void EXTI2_voidSendCallBack(void (*PtrF2)(void))
{
	if(PtrF2 !=NULL)
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	21 f0       	breq	.+8      	; 0x1d06 <EXTI2_voidSendCallBack+0xc>
	{
		EXTI_prviate_PtrCallBack2 = PtrF2;
    1cfe:	90 93 d5 01 	sts	0x01D5, r25
    1d02:	80 93 d4 01 	sts	0x01D4, r24
    1d06:	08 95       	ret

00001d08 <__vector_1>:
//EXTI2 ISR
void __vector_3(void) __attribute__((signal));


void __vector_1(void)
{
    1d08:	1f 92       	push	r1
    1d0a:	0f 92       	push	r0
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	0f 92       	push	r0
    1d10:	11 24       	eor	r1, r1
    1d12:	2f 93       	push	r18
    1d14:	3f 93       	push	r19
    1d16:	4f 93       	push	r20
    1d18:	5f 93       	push	r21
    1d1a:	6f 93       	push	r22
    1d1c:	7f 93       	push	r23
    1d1e:	8f 93       	push	r24
    1d20:	9f 93       	push	r25
    1d22:	af 93       	push	r26
    1d24:	bf 93       	push	r27
    1d26:	ef 93       	push	r30
    1d28:	ff 93       	push	r31
	if(EXTI_prviate_PtrCallBack0 !=NULL)
    1d2a:	e0 91 d8 01 	lds	r30, 0x01D8
    1d2e:	f0 91 d9 01 	lds	r31, 0x01D9
    1d32:	30 97       	sbiw	r30, 0x00	; 0
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <__vector_1+0x30>
	{
		EXTI_prviate_PtrCallBack0();
    1d36:	09 95       	icall
	}
}
    1d38:	ff 91       	pop	r31
    1d3a:	ef 91       	pop	r30
    1d3c:	bf 91       	pop	r27
    1d3e:	af 91       	pop	r26
    1d40:	9f 91       	pop	r25
    1d42:	8f 91       	pop	r24
    1d44:	7f 91       	pop	r23
    1d46:	6f 91       	pop	r22
    1d48:	5f 91       	pop	r21
    1d4a:	4f 91       	pop	r20
    1d4c:	3f 91       	pop	r19
    1d4e:	2f 91       	pop	r18
    1d50:	0f 90       	pop	r0
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	0f 90       	pop	r0
    1d56:	1f 90       	pop	r1
    1d58:	18 95       	reti

00001d5a <__vector_2>:

void __vector_2(void)
{
    1d5a:	1f 92       	push	r1
    1d5c:	0f 92       	push	r0
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	0f 92       	push	r0
    1d62:	11 24       	eor	r1, r1
    1d64:	2f 93       	push	r18
    1d66:	3f 93       	push	r19
    1d68:	4f 93       	push	r20
    1d6a:	5f 93       	push	r21
    1d6c:	6f 93       	push	r22
    1d6e:	7f 93       	push	r23
    1d70:	8f 93       	push	r24
    1d72:	9f 93       	push	r25
    1d74:	af 93       	push	r26
    1d76:	bf 93       	push	r27
    1d78:	ef 93       	push	r30
    1d7a:	ff 93       	push	r31
	if(EXTI_prviate_PtrCallBack1 !=NULL)
    1d7c:	e0 91 d6 01 	lds	r30, 0x01D6
    1d80:	f0 91 d7 01 	lds	r31, 0x01D7
    1d84:	30 97       	sbiw	r30, 0x00	; 0
    1d86:	09 f0       	breq	.+2      	; 0x1d8a <__vector_2+0x30>
	{
		EXTI_prviate_PtrCallBack1();
    1d88:	09 95       	icall
	}
}
    1d8a:	ff 91       	pop	r31
    1d8c:	ef 91       	pop	r30
    1d8e:	bf 91       	pop	r27
    1d90:	af 91       	pop	r26
    1d92:	9f 91       	pop	r25
    1d94:	8f 91       	pop	r24
    1d96:	7f 91       	pop	r23
    1d98:	6f 91       	pop	r22
    1d9a:	5f 91       	pop	r21
    1d9c:	4f 91       	pop	r20
    1d9e:	3f 91       	pop	r19
    1da0:	2f 91       	pop	r18
    1da2:	0f 90       	pop	r0
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	0f 90       	pop	r0
    1da8:	1f 90       	pop	r1
    1daa:	18 95       	reti

00001dac <__vector_3>:

void __vector_3(void)
{
    1dac:	1f 92       	push	r1
    1dae:	0f 92       	push	r0
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	0f 92       	push	r0
    1db4:	11 24       	eor	r1, r1
    1db6:	2f 93       	push	r18
    1db8:	3f 93       	push	r19
    1dba:	4f 93       	push	r20
    1dbc:	5f 93       	push	r21
    1dbe:	6f 93       	push	r22
    1dc0:	7f 93       	push	r23
    1dc2:	8f 93       	push	r24
    1dc4:	9f 93       	push	r25
    1dc6:	af 93       	push	r26
    1dc8:	bf 93       	push	r27
    1dca:	ef 93       	push	r30
    1dcc:	ff 93       	push	r31
	if(EXTI_prviate_PtrCallBack2 !=NULL)
    1dce:	e0 91 d4 01 	lds	r30, 0x01D4
    1dd2:	f0 91 d5 01 	lds	r31, 0x01D5
    1dd6:	30 97       	sbiw	r30, 0x00	; 0
    1dd8:	09 f0       	breq	.+2      	; 0x1ddc <__vector_3+0x30>
	{
		EXTI_prviate_PtrCallBack2();
    1dda:	09 95       	icall
	}
}
    1ddc:	ff 91       	pop	r31
    1dde:	ef 91       	pop	r30
    1de0:	bf 91       	pop	r27
    1de2:	af 91       	pop	r26
    1de4:	9f 91       	pop	r25
    1de6:	8f 91       	pop	r24
    1de8:	7f 91       	pop	r23
    1dea:	6f 91       	pop	r22
    1dec:	5f 91       	pop	r21
    1dee:	4f 91       	pop	r20
    1df0:	3f 91       	pop	r19
    1df2:	2f 91       	pop	r18
    1df4:	0f 90       	pop	r0
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	0f 90       	pop	r0
    1dfa:	1f 90       	pop	r1
    1dfc:	18 95       	reti

00001dfe <Dio_WriteChannel>:
 * @param	1- ChannelId 	-> to choose the right PIN  EX: (PA_0) refers to PIN0 in PORTA
 * 			2- Level		-> to choose the level on that PIN	(0 or 1)
 * @return	void
 */
void Dio_WriteChannel(Dio_ChannelType ChannelId, Dio_LevelType Level)
{
    1dfe:	48 2f       	mov	r20, r24
	switch(ChannelId/8)
    1e00:	86 95       	lsr	r24
    1e02:	86 95       	lsr	r24
    1e04:	86 95       	lsr	r24
    1e06:	81 30       	cpi	r24, 0x01	; 1
    1e08:	31 f1       	breq	.+76     	; 0x1e56 <Dio_WriteChannel+0x58>
    1e0a:	81 30       	cpi	r24, 0x01	; 1
    1e0c:	38 f0       	brcs	.+14     	; 0x1e1c <Dio_WriteChannel+0x1e>
    1e0e:	82 30       	cpi	r24, 0x02	; 2
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <Dio_WriteChannel+0x16>
    1e12:	42 c0       	rjmp	.+132    	; 0x1e98 <Dio_WriteChannel+0x9a>
    1e14:	83 30       	cpi	r24, 0x03	; 3
    1e16:	09 f0       	breq	.+2      	; 0x1e1a <Dio_WriteChannel+0x1c>
    1e18:	80 c0       	rjmp	.+256    	; 0x1f1a <Dio_WriteChannel+0x11c>
    1e1a:	5f c0       	rjmp	.+190    	; 0x1eda <Dio_WriteChannel+0xdc>
	{
	case Dio_PORTA:
		if(Level == 1)
    1e1c:	61 30       	cpi	r22, 0x01	; 1
    1e1e:	69 f4       	brne	.+26     	; 0x1e3a <Dio_WriteChannel+0x3c>
			SET_BIT(_PORTA, ChannelId);
    1e20:	eb e3       	ldi	r30, 0x3B	; 59
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	20 81       	ld	r18, Z
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <Dio_WriteChannel+0x32>
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	4a 95       	dec	r20
    1e32:	e2 f7       	brpl	.-8      	; 0x1e2c <Dio_WriteChannel+0x2e>
    1e34:	28 2b       	or	r18, r24
    1e36:	20 83       	st	Z, r18
    1e38:	08 95       	ret
		else
			CLR_BIT(_PORTA, ChannelId);
    1e3a:	eb e3       	ldi	r30, 0x3B	; 59
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	20 81       	ld	r18, Z
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <Dio_WriteChannel+0x4c>
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	4a 95       	dec	r20
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <Dio_WriteChannel+0x48>
    1e4e:	80 95       	com	r24
    1e50:	82 23       	and	r24, r18
    1e52:	80 83       	st	Z, r24
    1e54:	08 95       	ret
		break;
	case Dio_PORTB:
		if(Level == 1)
    1e56:	61 30       	cpi	r22, 0x01	; 1
    1e58:	79 f4       	brne	.+30     	; 0x1e78 <Dio_WriteChannel+0x7a>
			SET_BIT(_PORTB, ChannelId % 8);
    1e5a:	e8 e3       	ldi	r30, 0x38	; 56
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	20 81       	ld	r18, Z
    1e60:	34 2f       	mov	r19, r20
    1e62:	37 70       	andi	r19, 0x07	; 7
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <Dio_WriteChannel+0x70>
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	3a 95       	dec	r19
    1e70:	e2 f7       	brpl	.-8      	; 0x1e6a <Dio_WriteChannel+0x6c>
    1e72:	28 2b       	or	r18, r24
    1e74:	20 83       	st	Z, r18
    1e76:	08 95       	ret
		else
			CLR_BIT(_PORTB, ChannelId % 8);
    1e78:	e8 e3       	ldi	r30, 0x38	; 56
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	30 81       	ld	r19, Z
    1e7e:	24 2f       	mov	r18, r20
    1e80:	27 70       	andi	r18, 0x07	; 7
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <Dio_WriteChannel+0x8e>
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	2a 95       	dec	r18
    1e8e:	e2 f7       	brpl	.-8      	; 0x1e88 <Dio_WriteChannel+0x8a>
    1e90:	80 95       	com	r24
    1e92:	83 23       	and	r24, r19
    1e94:	80 83       	st	Z, r24
    1e96:	08 95       	ret
		break;
	case Dio_PORTC:
		if(Level == 1)
    1e98:	61 30       	cpi	r22, 0x01	; 1
    1e9a:	79 f4       	brne	.+30     	; 0x1eba <Dio_WriteChannel+0xbc>
			SET_BIT(_PORTC, ChannelId % 8);
    1e9c:	e5 e3       	ldi	r30, 0x35	; 53
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	20 81       	ld	r18, Z
    1ea2:	34 2f       	mov	r19, r20
    1ea4:	37 70       	andi	r19, 0x07	; 7
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <Dio_WriteChannel+0xb2>
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	3a 95       	dec	r19
    1eb2:	e2 f7       	brpl	.-8      	; 0x1eac <Dio_WriteChannel+0xae>
    1eb4:	28 2b       	or	r18, r24
    1eb6:	20 83       	st	Z, r18
    1eb8:	08 95       	ret
		else
			CLR_BIT(_PORTC, ChannelId % 8);
    1eba:	e5 e3       	ldi	r30, 0x35	; 53
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	30 81       	ld	r19, Z
    1ec0:	24 2f       	mov	r18, r20
    1ec2:	27 70       	andi	r18, 0x07	; 7
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <Dio_WriteChannel+0xd0>
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	2a 95       	dec	r18
    1ed0:	e2 f7       	brpl	.-8      	; 0x1eca <Dio_WriteChannel+0xcc>
    1ed2:	80 95       	com	r24
    1ed4:	83 23       	and	r24, r19
    1ed6:	80 83       	st	Z, r24
    1ed8:	08 95       	ret
		break;
	case Dio_PORTD:
		if(Level == 1)
    1eda:	61 30       	cpi	r22, 0x01	; 1
    1edc:	79 f4       	brne	.+30     	; 0x1efc <Dio_WriteChannel+0xfe>
			SET_BIT(_PORTD, ChannelId % 8);
    1ede:	e2 e3       	ldi	r30, 0x32	; 50
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	20 81       	ld	r18, Z
    1ee4:	34 2f       	mov	r19, r20
    1ee6:	37 70       	andi	r19, 0x07	; 7
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <Dio_WriteChannel+0xf4>
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	3a 95       	dec	r19
    1ef4:	e2 f7       	brpl	.-8      	; 0x1eee <Dio_WriteChannel+0xf0>
    1ef6:	28 2b       	or	r18, r24
    1ef8:	20 83       	st	Z, r18
    1efa:	08 95       	ret
		else
			CLR_BIT(_PORTD, ChannelId % 8);
    1efc:	e2 e3       	ldi	r30, 0x32	; 50
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	30 81       	ld	r19, Z
    1f02:	24 2f       	mov	r18, r20
    1f04:	27 70       	andi	r18, 0x07	; 7
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <Dio_WriteChannel+0x112>
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	2a 95       	dec	r18
    1f12:	e2 f7       	brpl	.-8      	; 0x1f0c <Dio_WriteChannel+0x10e>
    1f14:	80 95       	com	r24
    1f16:	83 23       	and	r24, r19
    1f18:	80 83       	st	Z, r24
    1f1a:	08 95       	ret

00001f1c <Dio_ReadChannel>:
 * Dio_ReadChannel : This function READ the level on a PIN
 * @param	1- ChannelId 	-> to choose the PIN to read from  EX: (PA_0) refers to PIN0 in PORTA
 * @return	Dio_LevelType 	-> if 1 then the level id HIGH, if 0 then the level id LOW
 */
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId)
{
    1f1c:	28 2f       	mov	r18, r24
	Dio_LevelType ret = STD_LOW;
	switch(ChannelId /8)
    1f1e:	86 95       	lsr	r24
    1f20:	86 95       	lsr	r24
    1f22:	86 95       	lsr	r24
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	89 f0       	breq	.+34     	; 0x1f4a <Dio_ReadChannel+0x2e>
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	30 f0       	brcs	.+12     	; 0x1f38 <Dio_ReadChannel+0x1c>
    1f2c:	82 30       	cpi	r24, 0x02	; 2
    1f2e:	b9 f0       	breq	.+46     	; 0x1f5e <Dio_ReadChannel+0x42>
    1f30:	83 30       	cpi	r24, 0x03	; 3
    1f32:	f9 f0       	breq	.+62     	; 0x1f72 <Dio_ReadChannel+0x56>
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	08 95       	ret
	{
	case Dio_PORTA:
		ret = GET_BIT(_PINA, ChannelId);
    1f38:	89 b3       	in	r24, 0x19	; 25
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <Dio_ReadChannel+0x26>
    1f3e:	95 95       	asr	r25
    1f40:	87 95       	ror	r24
    1f42:	2a 95       	dec	r18
    1f44:	e2 f7       	brpl	.-8      	; 0x1f3e <Dio_ReadChannel+0x22>
    1f46:	81 70       	andi	r24, 0x01	; 1
    1f48:	08 95       	ret
		break;
	case Dio_PORTB:
		ret = GET_BIT(_PINB, ChannelId %8);
    1f4a:	86 b3       	in	r24, 0x16	; 22
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	27 70       	andi	r18, 0x07	; 7
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <Dio_ReadChannel+0x3a>
    1f52:	95 95       	asr	r25
    1f54:	87 95       	ror	r24
    1f56:	2a 95       	dec	r18
    1f58:	e2 f7       	brpl	.-8      	; 0x1f52 <Dio_ReadChannel+0x36>
    1f5a:	81 70       	andi	r24, 0x01	; 1
    1f5c:	08 95       	ret
		break;
	case Dio_PORTC:
		ret = GET_BIT(_PINC, ChannelId % 8);
    1f5e:	83 b3       	in	r24, 0x13	; 19
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	27 70       	andi	r18, 0x07	; 7
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <Dio_ReadChannel+0x4e>
    1f66:	95 95       	asr	r25
    1f68:	87 95       	ror	r24
    1f6a:	2a 95       	dec	r18
    1f6c:	e2 f7       	brpl	.-8      	; 0x1f66 <Dio_ReadChannel+0x4a>
    1f6e:	81 70       	andi	r24, 0x01	; 1
    1f70:	08 95       	ret
		break;
	case Dio_PORTD:
		ret = GET_BIT(_PIND, ChannelId % 8);
    1f72:	80 b3       	in	r24, 0x10	; 16
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	27 70       	andi	r18, 0x07	; 7
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <Dio_ReadChannel+0x62>
    1f7a:	95 95       	asr	r25
    1f7c:	87 95       	ror	r24
    1f7e:	2a 95       	dec	r18
    1f80:	e2 f7       	brpl	.-8      	; 0x1f7a <Dio_ReadChannel+0x5e>
    1f82:	81 70       	andi	r24, 0x01	; 1
		break;
	default:	break;
	}
	return ret;
}
    1f84:	08 95       	ret

00001f86 <Dio_FlipChannel>:
 * Dio_FlipChannel : This function toggle the level on a PIN
 * @param	1- ChannelId 	-> to choose the PIN to toggle its level  EX: (PA_0) refers to PIN0 in PORTA
 * @return	Dio_LevelType 	-> return the level of the pin after toggling --> 1 for level HIGH,  0 for level LOW
 */
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId)
{
    1f86:	38 2f       	mov	r19, r24
	Dio_LevelType ret = STD_LOW;
	switch(ChannelId / 8)
    1f88:	86 95       	lsr	r24
    1f8a:	86 95       	lsr	r24
    1f8c:	86 95       	lsr	r24
    1f8e:	81 30       	cpi	r24, 0x01	; 1
    1f90:	f9 f0       	breq	.+62     	; 0x1fd0 <Dio_FlipChannel+0x4a>
    1f92:	81 30       	cpi	r24, 0x01	; 1
    1f94:	38 f0       	brcs	.+14     	; 0x1fa4 <Dio_FlipChannel+0x1e>
    1f96:	82 30       	cpi	r24, 0x02	; 2
    1f98:	a9 f1       	breq	.+106    	; 0x2004 <Dio_FlipChannel+0x7e>
    1f9a:	83 30       	cpi	r24, 0x03	; 3
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <Dio_FlipChannel+0x1a>
    1f9e:	4c c0       	rjmp	.+152    	; 0x2038 <Dio_FlipChannel+0xb2>
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	08 95       	ret
	{
	case Dio_PORTA:
		TOG_BIT(_PORTA, ChannelId);
    1fa4:	eb e3       	ldi	r30, 0x3B	; 59
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	20 81       	ld	r18, Z
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	03 2e       	mov	r0, r19
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <Dio_FlipChannel+0x30>
    1fb2:	88 0f       	add	r24, r24
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	0a 94       	dec	r0
    1fb8:	e2 f7       	brpl	.-8      	; 0x1fb2 <Dio_FlipChannel+0x2c>
    1fba:	28 27       	eor	r18, r24
    1fbc:	20 83       	st	Z, r18
		ret = GET_BIT(_PORTA, ChannelId);
    1fbe:	80 81       	ld	r24, Z
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <Dio_FlipChannel+0x42>
    1fc4:	95 95       	asr	r25
    1fc6:	87 95       	ror	r24
    1fc8:	3a 95       	dec	r19
    1fca:	e2 f7       	brpl	.-8      	; 0x1fc4 <Dio_FlipChannel+0x3e>
    1fcc:	81 70       	andi	r24, 0x01	; 1
    1fce:	08 95       	ret
		break;
	case Dio_PORTB:
		TOG_BIT(_PORTB, ChannelId % 8);
    1fd0:	e8 e3       	ldi	r30, 0x38	; 56
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	40 81       	ld	r20, Z
    1fd6:	23 2f       	mov	r18, r19
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	27 70       	andi	r18, 0x07	; 7
    1fdc:	30 70       	andi	r19, 0x00	; 0
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	02 2e       	mov	r0, r18
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <Dio_FlipChannel+0x64>
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	0a 94       	dec	r0
    1fec:	e2 f7       	brpl	.-8      	; 0x1fe6 <Dio_FlipChannel+0x60>
    1fee:	48 27       	eor	r20, r24
    1ff0:	40 83       	st	Z, r20
		ret = GET_BIT(_PORTB, ChannelId %8);
    1ff2:	80 81       	ld	r24, Z
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <Dio_FlipChannel+0x76>
    1ff8:	95 95       	asr	r25
    1ffa:	87 95       	ror	r24
    1ffc:	2a 95       	dec	r18
    1ffe:	e2 f7       	brpl	.-8      	; 0x1ff8 <Dio_FlipChannel+0x72>
    2000:	81 70       	andi	r24, 0x01	; 1
    2002:	08 95       	ret
		break;
	case Dio_PORTC:
		TOG_BIT(_PORTC, ChannelId % 8);
    2004:	e5 e3       	ldi	r30, 0x35	; 53
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	40 81       	ld	r20, Z
    200a:	23 2f       	mov	r18, r19
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	27 70       	andi	r18, 0x07	; 7
    2010:	30 70       	andi	r19, 0x00	; 0
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	02 2e       	mov	r0, r18
    2018:	02 c0       	rjmp	.+4      	; 0x201e <Dio_FlipChannel+0x98>
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	0a 94       	dec	r0
    2020:	e2 f7       	brpl	.-8      	; 0x201a <Dio_FlipChannel+0x94>
    2022:	48 27       	eor	r20, r24
    2024:	40 83       	st	Z, r20
		ret = GET_BIT(_PORTC, ChannelId % 8);
    2026:	80 81       	ld	r24, Z
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <Dio_FlipChannel+0xaa>
    202c:	95 95       	asr	r25
    202e:	87 95       	ror	r24
    2030:	2a 95       	dec	r18
    2032:	e2 f7       	brpl	.-8      	; 0x202c <Dio_FlipChannel+0xa6>
    2034:	81 70       	andi	r24, 0x01	; 1
    2036:	08 95       	ret
		break;
	case Dio_PORTD:
		TOG_BIT(_PORTD, ChannelId % 8);
    2038:	e2 e3       	ldi	r30, 0x32	; 50
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	40 81       	ld	r20, Z
    203e:	23 2f       	mov	r18, r19
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	27 70       	andi	r18, 0x07	; 7
    2044:	30 70       	andi	r19, 0x00	; 0
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	02 2e       	mov	r0, r18
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <Dio_FlipChannel+0xcc>
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	0a 94       	dec	r0
    2054:	e2 f7       	brpl	.-8      	; 0x204e <Dio_FlipChannel+0xc8>
    2056:	48 27       	eor	r20, r24
    2058:	40 83       	st	Z, r20
		ret = GET_BIT(_PORTD, ChannelId % 8);
    205a:	80 81       	ld	r24, Z
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <Dio_FlipChannel+0xde>
    2060:	95 95       	asr	r25
    2062:	87 95       	ror	r24
    2064:	2a 95       	dec	r18
    2066:	e2 f7       	brpl	.-8      	; 0x2060 <Dio_FlipChannel+0xda>
    2068:	81 70       	andi	r24, 0x01	; 1
		break;
	default:	break;
	}
	return ret;
}
    206a:	08 95       	ret

0000206c <Dio_ReadPort>:
 * @return	Dio_PortLevelType 	-> return the level of the PORT
 */
Dio_PortLevelType Dio_ReadPort(Dio_PortType PortId)
{
	Dio_PortLevelType ret = 0;
	switch(PortId)
    206c:	81 30       	cpi	r24, 0x01	; 1
    206e:	51 f0       	breq	.+20     	; 0x2084 <Dio_ReadPort+0x18>
    2070:	81 30       	cpi	r24, 0x01	; 1
    2072:	30 f0       	brcs	.+12     	; 0x2080 <Dio_ReadPort+0x14>
    2074:	82 30       	cpi	r24, 0x02	; 2
    2076:	41 f0       	breq	.+16     	; 0x2088 <Dio_ReadPort+0x1c>
    2078:	83 30       	cpi	r24, 0x03	; 3
    207a:	41 f0       	breq	.+16     	; 0x208c <Dio_ReadPort+0x20>
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	08 95       	ret
	{
	case Dio_PORTA:
		ret = _PINA;
    2080:	89 b3       	in	r24, 0x19	; 25
    2082:	08 95       	ret
		break;
	case Dio_PORTB:
		ret = _PINB;
    2084:	86 b3       	in	r24, 0x16	; 22
    2086:	08 95       	ret
		break;
	case Dio_PORTC:
		ret = _PINC;
    2088:	83 b3       	in	r24, 0x13	; 19
    208a:	08 95       	ret
		break;
	case Dio_PORTD:
		ret =_PIND;
    208c:	80 b3       	in	r24, 0x10	; 16
			break;
	}
	return ret;
}
    208e:	08 95       	ret

00002090 <Dio_WritePort>:
 * 			2- Level 	-> the level to write 	Ex : (255) to write 1111 1111
 * @return	Dio_LevelType 	-> return the level of the PORT
 */
void Dio_WritePort(Dio_PortType PortId,Dio_PortLevelType Level)
{
	switch(PortId)
    2090:	81 30       	cpi	r24, 0x01	; 1
    2092:	49 f0       	breq	.+18     	; 0x20a6 <Dio_WritePort+0x16>
    2094:	81 30       	cpi	r24, 0x01	; 1
    2096:	28 f0       	brcs	.+10     	; 0x20a2 <Dio_WritePort+0x12>
    2098:	82 30       	cpi	r24, 0x02	; 2
    209a:	39 f0       	breq	.+14     	; 0x20aa <Dio_WritePort+0x1a>
    209c:	83 30       	cpi	r24, 0x03	; 3
    209e:	41 f4       	brne	.+16     	; 0x20b0 <Dio_WritePort+0x20>
    20a0:	06 c0       	rjmp	.+12     	; 0x20ae <Dio_WritePort+0x1e>
		{
		case Dio_PORTA:
			_PORTA = Level;
    20a2:	6b bb       	out	0x1b, r22	; 27
    20a4:	08 95       	ret
			break;
		case Dio_PORTB:
			_PORTB = Level;
    20a6:	68 bb       	out	0x18, r22	; 24
    20a8:	08 95       	ret
			break;
		case Dio_PORTC:
			_PORTC = Level;
    20aa:	65 bb       	out	0x15, r22	; 21
    20ac:	08 95       	ret
			break;
		case Dio_PORTD:
			_PORTD = Level;
    20ae:	62 bb       	out	0x12, r22	; 18
    20b0:	08 95       	ret

000020b2 <ADC_void_Init>:
	case AREF:
		CLR_BIT(_ADMUX, 6);
		CLR_BIT(_ADMUX, 7);
		break;
	case AVCC :
		SET_BIT(_ADMUX, 6);
    20b2:	e7 e2       	ldi	r30, 0x27	; 39
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	80 64       	ori	r24, 0x40	; 64
    20ba:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 7);
    20bc:	80 81       	ld	r24, Z
    20be:	8f 77       	andi	r24, 0x7F	; 127
    20c0:	80 83       	st	Z, r24
static void ADC_voidLeft_Adjust_Result(void)
{
	switch(ADC_Left_Adjust_Result)
	{
	case LEFT:
		SET_BIT(_ADMUX, 5);
    20c2:	80 81       	ld	r24, Z
    20c4:	80 62       	ori	r24, 0x20	; 32
    20c6:	80 83       	st	Z, r24
		CLR_BIT(_ADCSRA, 0);
		SET_BIT(_ADCSRA, 1);
		SET_BIT(_ADCSRA, 2);
		break;
	case 128:
		SET_BIT(_ADCSRA, 0);
    20c8:	e6 e2       	ldi	r30, 0x26	; 38
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	81 60       	ori	r24, 0x01	; 1
    20d0:	80 83       	st	Z, r24
		SET_BIT(_ADCSRA, 1);
    20d2:	80 81       	ld	r24, Z
    20d4:	82 60       	ori	r24, 0x02	; 2
    20d6:	80 83       	st	Z, r24
		SET_BIT(_ADCSRA, 2);
    20d8:	80 81       	ld	r24, Z
    20da:	84 60       	ori	r24, 0x04	; 4
    20dc:	80 83       	st	Z, r24
void ADC_void_Init(void)
{
	ADC_voidSetVoltageReference();
	ADC_voidLeft_Adjust_Result();
	ADC_voidSet_Prescaler();
	SET_BIT(_ADCSRA, 7); // Enable ADC
    20de:	80 81       	ld	r24, Z
    20e0:	80 68       	ori	r24, 0x80	; 128
    20e2:	80 83       	st	Z, r24
}
    20e4:	08 95       	ret

000020e6 <ADC_void_Read_CH>:
	default: break;
	}
}
static void ADC_Select_Channel(u8 u8_Copy_CH)
{
	switch(u8_Copy_CH)
    20e6:	83 30       	cpi	r24, 0x03	; 3
    20e8:	09 f4       	brne	.+2      	; 0x20ec <ADC_void_Read_CH+0x6>
    20ea:	4a c0       	rjmp	.+148    	; 0x2180 <ADC_void_Read_CH+0x9a>
    20ec:	84 30       	cpi	r24, 0x04	; 4
    20ee:	28 f4       	brcc	.+10     	; 0x20fa <ADC_void_Read_CH+0x14>
    20f0:	81 30       	cpi	r24, 0x01	; 1
    20f2:	11 f1       	breq	.+68     	; 0x2138 <ADC_void_Read_CH+0x52>
    20f4:	82 30       	cpi	r24, 0x02	; 2
    20f6:	90 f5       	brcc	.+100    	; 0x215c <ADC_void_Read_CH+0x76>
    20f8:	0d c0       	rjmp	.+26     	; 0x2114 <ADC_void_Read_CH+0x2e>
    20fa:	85 30       	cpi	r24, 0x05	; 5
    20fc:	09 f4       	brne	.+2      	; 0x2100 <ADC_void_Read_CH+0x1a>
    20fe:	64 c0       	rjmp	.+200    	; 0x21c8 <ADC_void_Read_CH+0xe2>
    2100:	85 30       	cpi	r24, 0x05	; 5
    2102:	08 f4       	brcc	.+2      	; 0x2106 <ADC_void_Read_CH+0x20>
    2104:	4f c0       	rjmp	.+158    	; 0x21a4 <ADC_void_Read_CH+0xbe>
    2106:	86 30       	cpi	r24, 0x06	; 6
    2108:	09 f4       	brne	.+2      	; 0x210c <ADC_void_Read_CH+0x26>
    210a:	70 c0       	rjmp	.+224    	; 0x21ec <ADC_void_Read_CH+0x106>
    210c:	87 30       	cpi	r24, 0x07	; 7
    210e:	09 f0       	breq	.+2      	; 0x2112 <ADC_void_Read_CH+0x2c>
    2110:	90 c0       	rjmp	.+288    	; 0x2232 <ADC_void_Read_CH+0x14c>
    2112:	7e c0       	rjmp	.+252    	; 0x2210 <ADC_void_Read_CH+0x12a>
	{
	case(ADC0_SE):
		CLR_BIT(_ADMUX, 0);
    2114:	e7 e2       	ldi	r30, 0x27	; 39
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	8e 7f       	andi	r24, 0xFE	; 254
    211c:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 1);
    211e:	80 81       	ld	r24, Z
    2120:	8d 7f       	andi	r24, 0xFD	; 253
    2122:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 2);
    2124:	80 81       	ld	r24, Z
    2126:	8b 7f       	andi	r24, 0xFB	; 251
    2128:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 3);
    212a:	80 81       	ld	r24, Z
    212c:	87 7f       	andi	r24, 0xF7	; 247
    212e:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 4);
    2130:	80 81       	ld	r24, Z
    2132:	8f 7e       	andi	r24, 0xEF	; 239
    2134:	80 83       	st	Z, r24
    2136:	7d c0       	rjmp	.+250    	; 0x2232 <ADC_void_Read_CH+0x14c>
		break;
	case(ADC1_SE):
		SET_BIT(_ADMUX, 0);
    2138:	e7 e2       	ldi	r30, 0x27	; 39
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	81 60       	ori	r24, 0x01	; 1
    2140:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 1);
    2142:	80 81       	ld	r24, Z
    2144:	8d 7f       	andi	r24, 0xFD	; 253
    2146:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 2);
    2148:	80 81       	ld	r24, Z
    214a:	8b 7f       	andi	r24, 0xFB	; 251
    214c:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 3);
    214e:	80 81       	ld	r24, Z
    2150:	87 7f       	andi	r24, 0xF7	; 247
    2152:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 4);
    2154:	80 81       	ld	r24, Z
    2156:	8f 7e       	andi	r24, 0xEF	; 239
    2158:	80 83       	st	Z, r24
    215a:	6b c0       	rjmp	.+214    	; 0x2232 <ADC_void_Read_CH+0x14c>
		break;
	case(ADC2_SE):
		CLR_BIT(_ADMUX, 0);
    215c:	e7 e2       	ldi	r30, 0x27	; 39
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	8e 7f       	andi	r24, 0xFE	; 254
    2164:	80 83       	st	Z, r24
		SET_BIT(_ADMUX, 1);
    2166:	80 81       	ld	r24, Z
    2168:	82 60       	ori	r24, 0x02	; 2
    216a:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 2);
    216c:	80 81       	ld	r24, Z
    216e:	8b 7f       	andi	r24, 0xFB	; 251
    2170:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 3);
    2172:	80 81       	ld	r24, Z
    2174:	87 7f       	andi	r24, 0xF7	; 247
    2176:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 4);
    2178:	80 81       	ld	r24, Z
    217a:	8f 7e       	andi	r24, 0xEF	; 239
    217c:	80 83       	st	Z, r24
    217e:	59 c0       	rjmp	.+178    	; 0x2232 <ADC_void_Read_CH+0x14c>
		break;
	case(ADC3_SE):
		SET_BIT(_ADMUX, 0);
    2180:	e7 e2       	ldi	r30, 0x27	; 39
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	81 60       	ori	r24, 0x01	; 1
    2188:	80 83       	st	Z, r24
		SET_BIT(_ADMUX, 1);
    218a:	80 81       	ld	r24, Z
    218c:	82 60       	ori	r24, 0x02	; 2
    218e:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 2);
    2190:	80 81       	ld	r24, Z
    2192:	8b 7f       	andi	r24, 0xFB	; 251
    2194:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 3);
    2196:	80 81       	ld	r24, Z
    2198:	87 7f       	andi	r24, 0xF7	; 247
    219a:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 4);
    219c:	80 81       	ld	r24, Z
    219e:	8f 7e       	andi	r24, 0xEF	; 239
    21a0:	80 83       	st	Z, r24
    21a2:	47 c0       	rjmp	.+142    	; 0x2232 <ADC_void_Read_CH+0x14c>
		break;
	case(ADC4_SE):
		CLR_BIT(_ADMUX, 0);
    21a4:	e7 e2       	ldi	r30, 0x27	; 39
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	8e 7f       	andi	r24, 0xFE	; 254
    21ac:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 1);
    21ae:	80 81       	ld	r24, Z
    21b0:	8d 7f       	andi	r24, 0xFD	; 253
    21b2:	80 83       	st	Z, r24
		SET_BIT(_ADMUX, 2);
    21b4:	80 81       	ld	r24, Z
    21b6:	84 60       	ori	r24, 0x04	; 4
    21b8:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 3);
    21ba:	80 81       	ld	r24, Z
    21bc:	87 7f       	andi	r24, 0xF7	; 247
    21be:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 4);
    21c0:	80 81       	ld	r24, Z
    21c2:	8f 7e       	andi	r24, 0xEF	; 239
    21c4:	80 83       	st	Z, r24
    21c6:	35 c0       	rjmp	.+106    	; 0x2232 <ADC_void_Read_CH+0x14c>
		break;
	case(ADC5_SE):
		SET_BIT(_ADMUX, 0);
    21c8:	e7 e2       	ldi	r30, 0x27	; 39
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	81 60       	ori	r24, 0x01	; 1
    21d0:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 1);
    21d2:	80 81       	ld	r24, Z
    21d4:	8d 7f       	andi	r24, 0xFD	; 253
    21d6:	80 83       	st	Z, r24
		SET_BIT(_ADMUX, 2);
    21d8:	80 81       	ld	r24, Z
    21da:	84 60       	ori	r24, 0x04	; 4
    21dc:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 3);
    21de:	80 81       	ld	r24, Z
    21e0:	87 7f       	andi	r24, 0xF7	; 247
    21e2:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 4);
    21e4:	80 81       	ld	r24, Z
    21e6:	8f 7e       	andi	r24, 0xEF	; 239
    21e8:	80 83       	st	Z, r24
    21ea:	23 c0       	rjmp	.+70     	; 0x2232 <ADC_void_Read_CH+0x14c>
		break;
	case(ADC6_SE):
		CLR_BIT(_ADMUX, 0);
    21ec:	e7 e2       	ldi	r30, 0x27	; 39
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	8e 7f       	andi	r24, 0xFE	; 254
    21f4:	80 83       	st	Z, r24
		SET_BIT(_ADMUX, 1);
    21f6:	80 81       	ld	r24, Z
    21f8:	82 60       	ori	r24, 0x02	; 2
    21fa:	80 83       	st	Z, r24
		SET_BIT(_ADMUX, 2);
    21fc:	80 81       	ld	r24, Z
    21fe:	84 60       	ori	r24, 0x04	; 4
    2200:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 3);
    2202:	80 81       	ld	r24, Z
    2204:	87 7f       	andi	r24, 0xF7	; 247
    2206:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 4);
    2208:	80 81       	ld	r24, Z
    220a:	8f 7e       	andi	r24, 0xEF	; 239
    220c:	80 83       	st	Z, r24
    220e:	11 c0       	rjmp	.+34     	; 0x2232 <ADC_void_Read_CH+0x14c>
		break;
	case(ADC7_SE):
		SET_BIT(_ADMUX, 0);
    2210:	e7 e2       	ldi	r30, 0x27	; 39
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	81 60       	ori	r24, 0x01	; 1
    2218:	80 83       	st	Z, r24
		SET_BIT(_ADMUX, 1);
    221a:	80 81       	ld	r24, Z
    221c:	82 60       	ori	r24, 0x02	; 2
    221e:	80 83       	st	Z, r24
		SET_BIT(_ADMUX, 2);
    2220:	80 81       	ld	r24, Z
    2222:	84 60       	ori	r24, 0x04	; 4
    2224:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 3);
    2226:	80 81       	ld	r24, Z
    2228:	87 7f       	andi	r24, 0xF7	; 247
    222a:	80 83       	st	Z, r24
		CLR_BIT(_ADMUX, 4);
    222c:	80 81       	ld	r24, Z
    222e:	8f 7e       	andi	r24, 0xEF	; 239
    2230:	80 83       	st	Z, r24

u16 ADC_void_Read_CH(u8 u8_Copychannel)
{
	u16 result = 0;
	ADC_Select_Channel(u8_Copychannel);
	SET_BIT(_ADCSRA , 6); // ADC start conversion
    2232:	e6 e2       	ldi	r30, 0x26	; 38
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	80 64       	ori	r24, 0x40	; 64
    223a:	80 83       	st	Z, r24
	while(_ADCSRA & (1 << 6));
    223c:	80 81       	ld	r24, Z
    223e:	86 fd       	sbrc	r24, 6
    2240:	fd cf       	rjmp	.-6      	; 0x223c <ADC_void_Read_CH+0x156>
	switch(ADC_Left_Adjust_Result)
	{
	case LEFT:
		 result = (_ADCL >> 6);
    2242:	84 b1       	in	r24, 0x04	; 4
    2244:	82 95       	swap	r24
    2246:	86 95       	lsr	r24
    2248:	86 95       	lsr	r24
    224a:	83 70       	andi	r24, 0x03	; 3
    224c:	90 e0       	ldi	r25, 0x00	; 0
		 result |= (_ADCH << 2);
    224e:	25 b1       	in	r18, 0x05	; 5
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	22 0f       	add	r18, r18
    2254:	33 1f       	adc	r19, r19
    2256:	22 0f       	add	r18, r18
    2258:	33 1f       	adc	r19, r19
    225a:	28 2b       	or	r18, r24
    225c:	39 2b       	or	r19, r25
		 result = _ADCL;
		 result |= (_ADCH << 8);
		break;
	}
	return result;
}
    225e:	82 2f       	mov	r24, r18
    2260:	93 2f       	mov	r25, r19
    2262:	08 95       	ret

00002264 <Ultra_Sonic_Distance_in_cm>:
	_delay_ms(60);
}

u16 Ultra_Sonic_Distance_in_cm(void)
{
	return (ICU_u32GetFallingEdgeTime() / 58);
    2264:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <ICU_u32GetFallingEdgeTime>
    2268:	2a e3       	ldi	r18, 0x3A	; 58
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	50 e0       	ldi	r21, 0x00	; 0
    2270:	0e 94 57 19 	call	0x32ae	; 0x32ae <__udivmodsi4>
    2274:	82 2f       	mov	r24, r18
    2276:	93 2f       	mov	r25, r19
}
    2278:	08 95       	ret

0000227a <Ultra_Sonic_void_trigger>:
#include "../../_MY_LIBS/BIT_MATH.h"
#include "../../_MCAL/HICU/ICU_Interface.h"
#include "util/delay.h"

void Ultra_Sonic_void_trigger(u8 channel)
{
    227a:	1f 93       	push	r17
    227c:	18 2f       	mov	r17, r24
	Dio_WriteChannel(channel, 1);
    227e:	61 e0       	ldi	r22, 0x01	; 1
    2280:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2284:	85 e3       	ldi	r24, 0x35	; 53
    2286:	8a 95       	dec	r24
    2288:	f1 f7       	brne	.-4      	; 0x2286 <Ultra_Sonic_void_trigger+0xc>
	_delay_us(10);
	Dio_WriteChannel(channel, 0);
    228a:	81 2f       	mov	r24, r17
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
    2292:	28 e5       	ldi	r18, 0x58	; 88
    2294:	32 e0       	ldi	r19, 0x02	; 2
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2296:	40 e9       	ldi	r20, 0x90	; 144
    2298:	51 e0       	ldi	r21, 0x01	; 1
    229a:	ca 01       	movw	r24, r20
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <Ultra_Sonic_void_trigger+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a0:	21 50       	subi	r18, 0x01	; 1
    22a2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a4:	d1 f7       	brne	.-12     	; 0x229a <Ultra_Sonic_void_trigger+0x20>
	_delay_ms(60);
}
    22a6:	1f 91       	pop	r17
    22a8:	08 95       	ret

000022aa <Simple_Scheduler>:
    TMR0_voidSendCallBack_OVF(Simple_Scheduler);
}

/*-----------------------------------------------------*/
static void Simple_Scheduler(void)
{
    22aa:	cf 92       	push	r12
    22ac:	df 92       	push	r13
    22ae:	ef 92       	push	r14
    22b0:	ff 92       	push	r15
    22b2:	1f 93       	push	r17
    22b4:	cf 93       	push	r28
    22b6:	df 93       	push	r29
    22b8:	10 e0       	ldi	r17, 0x00	; 0
    for (u8 i = 0; i <= created_tasks_number ; i++)
    {
    	if (My_Tasks[i].Task_FuncPtr == NULL)
    22ba:	0f 2e       	mov	r0, r31
    22bc:	fc ee       	ldi	r31, 0xEC	; 236
    22be:	cf 2e       	mov	r12, r31
    22c0:	f1 e0       	ldi	r31, 0x01	; 1
    22c2:	df 2e       	mov	r13, r31
    22c4:	f0 2d       	mov	r31, r0
    	{
    		continue;
    	}
        if (temp_priodicity[i] == 0)
    22c6:	0f 2e       	mov	r0, r31
    22c8:	f0 ee       	ldi	r31, 0xE0	; 224
    22ca:	ef 2e       	mov	r14, r31
    22cc:	f1 e0       	ldi	r31, 0x01	; 1
    22ce:	ff 2e       	mov	r15, r31
    22d0:	f0 2d       	mov	r31, r0
/*-----------------------------------------------------*/
static void Simple_Scheduler(void)
{
    for (u8 i = 0; i <= created_tasks_number ; i++)
    {
    	if (My_Tasks[i].Task_FuncPtr == NULL)
    22d2:	c1 2f       	mov	r28, r17
    22d4:	d0 e0       	ldi	r29, 0x00	; 0
    22d6:	ce 01       	movw	r24, r28
    22d8:	88 0f       	add	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	88 0f       	add	r24, r24
    22de:	99 1f       	adc	r25, r25
    22e0:	88 0f       	add	r24, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	8c 1b       	sub	r24, r28
    22e6:	9d 0b       	sbc	r25, r29
    22e8:	f6 01       	movw	r30, r12
    22ea:	e8 0f       	add	r30, r24
    22ec:	f9 1f       	adc	r31, r25
    22ee:	40 81       	ld	r20, Z
    22f0:	51 81       	ldd	r21, Z+1	; 0x01
    22f2:	41 15       	cp	r20, r1
    22f4:	51 05       	cpc	r21, r1
    22f6:	71 f1       	breq	.+92     	; 0x2354 <Simple_Scheduler+0xaa>
    	{
    		continue;
    	}
        if (temp_priodicity[i] == 0)
    22f8:	ce 01       	movw	r24, r28
    22fa:	88 0f       	add	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	f7 01       	movw	r30, r14
    2300:	e8 0f       	add	r30, r24
    2302:	f9 1f       	adc	r31, r25
    2304:	20 81       	ld	r18, Z
    2306:	31 81       	ldd	r19, Z+1	; 0x01
    2308:	21 15       	cp	r18, r1
    230a:	31 05       	cpc	r19, r1
    230c:	c9 f4       	brne	.+50     	; 0x2340 <Simple_Scheduler+0x96>
        {
            My_Tasks[i].Task_FuncPtr();
    230e:	fa 01       	movw	r30, r20
    2310:	09 95       	icall
            temp_priodicity[i] = My_Tasks[i].Task_Periodicity;
    2312:	ce 01       	movw	r24, r28
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	d7 01       	movw	r26, r14
    231a:	a8 0f       	add	r26, r24
    231c:	b9 1f       	adc	r27, r25
    231e:	ce 01       	movw	r24, r28
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	88 0f       	add	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	8c 1b       	sub	r24, r28
    232e:	9d 0b       	sbc	r25, r29
    2330:	f6 01       	movw	r30, r12
    2332:	e8 0f       	add	r30, r24
    2334:	f9 1f       	adc	r31, r25
    2336:	82 81       	ldd	r24, Z+2	; 0x02
    2338:	93 81       	ldd	r25, Z+3	; 0x03
    233a:	8d 93       	st	X+, r24
    233c:	9c 93       	st	X, r25
    233e:	0a c0       	rjmp	.+20     	; 0x2354 <Simple_Scheduler+0xaa>
        }
        else
        {
        	temp_priodicity[i]--;
    2340:	ce 01       	movw	r24, r28
    2342:	88 0f       	add	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	f7 01       	movw	r30, r14
    2348:	e8 0f       	add	r30, r24
    234a:	f9 1f       	adc	r31, r25
    234c:	c9 01       	movw	r24, r18
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	91 83       	std	Z+1, r25	; 0x01
    2352:	80 83       	st	Z, r24
}

/*-----------------------------------------------------*/
static void Simple_Scheduler(void)
{
    for (u8 i = 0; i <= created_tasks_number ; i++)
    2354:	1f 5f       	subi	r17, 0xFF	; 255
    2356:	80 91 da 01 	lds	r24, 0x01DA
    235a:	81 17       	cp	r24, r17
    235c:	08 f0       	brcs	.+2      	; 0x2360 <Simple_Scheduler+0xb6>
    235e:	b9 cf       	rjmp	.-142    	; 0x22d2 <Simple_Scheduler+0x28>
        else
        {
        	temp_priodicity[i]--;
        }
    }
}
    2360:	df 91       	pop	r29
    2362:	cf 91       	pop	r28
    2364:	1f 91       	pop	r17
    2366:	ff 90       	pop	r15
    2368:	ef 90       	pop	r14
    236a:	df 90       	pop	r13
    236c:	cf 90       	pop	r12
    236e:	08 95       	ret

00002370 <Task_Creat>:
static void Simple_Scheduler(void);
static void shift_array_index(u8 index);

/* ----------------- Section : Software Interfaces Implementation -----------------*/
void Task_Creat(u8 Copy_u8Priority, u16 Copy_u8Periodicity, void (*Fptr)(void), u16 Copy_u16InitialDelay)
{
    2370:	cf 92       	push	r12
    2372:	df 92       	push	r13
    2374:	ef 92       	push	r14
    2376:	ff 92       	push	r15
    2378:	1f 93       	push	r17
    237a:	cf 93       	push	r28
    237c:	df 93       	push	r29
    237e:	18 2f       	mov	r17, r24
    2380:	6b 01       	movw	r12, r22
    2382:	7a 01       	movw	r14, r20
    2384:	e9 01       	movw	r28, r18
	u8 flag = 0;
	//check if the priority (index) is repeated
	for (int i = 0; i<created_tasks_number ; i++)
    2386:	60 91 da 01 	lds	r22, 0x01DA
    238a:	46 2f       	mov	r20, r22
    238c:	50 e0       	ldi	r21, 0x00	; 0
    238e:	14 16       	cp	r1, r20
    2390:	15 06       	cpc	r1, r21
    2392:	0c f0       	brlt	.+2      	; 0x2396 <Task_Creat+0x26>
    2394:	42 c0       	rjmp	.+132    	; 0x241a <Task_Creat+0xaa>
	{
		if (Copy_u8Priority == My_Tasks[i].Task_Priority)
    2396:	80 91 f2 01 	lds	r24, 0x01F2
    239a:	81 17       	cp	r24, r17
    239c:	79 f0       	breq	.+30     	; 0x23bc <Task_Creat+0x4c>
    239e:	e9 ef       	ldi	r30, 0xF9	; 249
    23a0:	f1 e0       	ldi	r31, 0x01	; 1
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	04 c0       	rjmp	.+8      	; 0x23b0 <Task_Creat+0x40>
    23a8:	80 81       	ld	r24, Z
    23aa:	37 96       	adiw	r30, 0x07	; 7
    23ac:	81 17       	cp	r24, r17
    23ae:	31 f0       	breq	.+12     	; 0x23bc <Task_Creat+0x4c>
/* ----------------- Section : Software Interfaces Implementation -----------------*/
void Task_Creat(u8 Copy_u8Priority, u16 Copy_u8Periodicity, void (*Fptr)(void), u16 Copy_u16InitialDelay)
{
	u8 flag = 0;
	//check if the priority (index) is repeated
	for (int i = 0; i<created_tasks_number ; i++)
    23b0:	2f 5f       	subi	r18, 0xFF	; 255
    23b2:	3f 4f       	sbci	r19, 0xFF	; 255
    23b4:	24 17       	cp	r18, r20
    23b6:	35 07       	cpc	r19, r21
    23b8:	bc f3       	brlt	.-18     	; 0x23a8 <Task_Creat+0x38>
    23ba:	2f c0       	rjmp	.+94     	; 0x241a <Task_Creat+0xaa>
    }
}

static void shift_array_index(u8 index)
{
	for(int i = index; i< created_tasks_number-1 ; i ++)
    23bc:	21 2f       	mov	r18, r17
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	ca 01       	movw	r24, r20
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	28 17       	cp	r18, r24
    23c6:	39 07       	cpc	r19, r25
    23c8:	3c f5       	brge	.+78     	; 0x2418 <Task_Creat+0xa8>
    23ca:	c9 01       	movw	r24, r18
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	82 1b       	sub	r24, r18
    23da:	93 0b       	sbc	r25, r19
    23dc:	fc 01       	movw	r30, r24
    23de:	ee 50       	subi	r30, 0x0E	; 14
    23e0:	fe 4f       	sbci	r31, 0xFE	; 254
    23e2:	ac 01       	movw	r20, r24
    23e4:	40 95       	com	r20
    23e6:	50 95       	com	r21
    23e8:	86 2f       	mov	r24, r22
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	28 0f       	add	r18, r24
    23ee:	39 1f       	adc	r19, r25
    23f0:	c9 01       	movw	r24, r18
    23f2:	88 0f       	add	r24, r24
    23f4:	99 1f       	adc	r25, r25
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	88 0f       	add	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	82 1b       	sub	r24, r18
    2400:	93 0b       	sbc	r25, r19
    2402:	84 51       	subi	r24, 0x14	; 20
    2404:	9e 4f       	sbci	r25, 0xFE	; 254
    2406:	48 0f       	add	r20, r24
    2408:	59 1f       	adc	r21, r25
	{
		My_Tasks[i].Task_Priority++;
    240a:	80 81       	ld	r24, Z
    240c:	8f 5f       	subi	r24, 0xFF	; 255
    240e:	80 83       	st	Z, r24
    2410:	37 96       	adiw	r30, 0x07	; 7
    }
}

static void shift_array_index(u8 index)
{
	for(int i = index; i< created_tasks_number-1 ; i ++)
    2412:	e4 17       	cp	r30, r20
    2414:	f5 07       	cpc	r31, r21
    2416:	c9 f7       	brne	.-14     	; 0x240a <Task_Creat+0x9a>
	}

	if (flag == 1)
	{
		shift_array_index(Copy_u8Priority);
		Copy_u8Priority++;
    2418:	1f 5f       	subi	r17, 0xFF	; 255
	}
	My_Tasks[Copy_u8Priority].Task_FuncPtr = Fptr;
    241a:	81 2f       	mov	r24, r17
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	dc 01       	movw	r26, r24
    2420:	aa 0f       	add	r26, r26
    2422:	bb 1f       	adc	r27, r27
    2424:	aa 0f       	add	r26, r26
    2426:	bb 1f       	adc	r27, r27
    2428:	aa 0f       	add	r26, r26
    242a:	bb 1f       	adc	r27, r27
    242c:	a8 1b       	sub	r26, r24
    242e:	b9 0b       	sbc	r27, r25
    2430:	a4 51       	subi	r26, 0x14	; 20
    2432:	be 4f       	sbci	r27, 0xFE	; 254
    2434:	fd 01       	movw	r30, r26
    2436:	e1 92       	st	Z+, r14
    2438:	f1 92       	st	Z+, r15
	My_Tasks[Copy_u8Priority].Task_Periodicity = Copy_u8Periodicity;
    243a:	d1 82       	std	Z+1, r13	; 0x01
    243c:	c0 82       	st	Z, r12
	My_Tasks[Copy_u8Priority].Task_Priority = Copy_u8Priority;
    243e:	16 96       	adiw	r26, 0x06	; 6
    2440:	1c 93       	st	X, r17
    2442:	16 97       	sbiw	r26, 0x06	; 6
	My_Tasks[Copy_u8Priority].Task_InitialDelay = Copy_u16InitialDelay;
    2444:	15 96       	adiw	r26, 0x05	; 5
    2446:	dc 93       	st	X, r29
    2448:	ce 93       	st	-X, r28
    244a:	14 97       	sbiw	r26, 0x04	; 4

    temp_priodicity[Copy_u8Priority] = Copy_u16InitialDelay;
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	80 52       	subi	r24, 0x20	; 32
    2452:	9e 4f       	sbci	r25, 0xFE	; 254
    2454:	fc 01       	movw	r30, r24
    2456:	d1 83       	std	Z+1, r29	; 0x01
    2458:	c0 83       	st	Z, r28
    created_tasks_number++;
    245a:	86 2f       	mov	r24, r22
    245c:	8f 5f       	subi	r24, 0xFF	; 255
    245e:	80 93 da 01 	sts	0x01DA, r24
}
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	1f 91       	pop	r17
    2468:	ff 90       	pop	r15
    246a:	ef 90       	pop	r14
    246c:	df 90       	pop	r13
    246e:	cf 90       	pop	r12
    2470:	08 95       	ret

00002472 <Scheduler_Start>:

void Scheduler_Start(void) {
    TMR0_voidInit();
    2472:	0e 94 8d 0a 	call	0x151a	; 0x151a <TMR0_voidInit>
    TMR0_voidStart();
    2476:	0e 94 9e 0a 	call	0x153c	; 0x153c <TMR0_voidStart>
    TMR0_voidSendCallBack_OVF(Simple_Scheduler);
    247a:	85 e5       	ldi	r24, 0x55	; 85
    247c:	91 e1       	ldi	r25, 0x11	; 17
    247e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <TMR0_voidSendCallBack_OVF>
}
    2482:	08 95       	ret

00002484 <SRVM_voidOff>:


void SRVM_voidOff(void)
{
	/* TMR1 stop */
	TMR1_voidStop();
    2484:	0e 94 dd 09 	call	0x13ba	; 0x13ba <TMR1_voidStop>
}
    2488:	08 95       	ret

0000248a <SRVM_voidOn>:
/*------------------- Statics -------------------------*/
static u8 timer1Initialized = 0;		// the purpose of it is to init TMR0 only once

/* ----------------- Section : Software Interfaces Implementation -----------------*/
void SRVM_voidOn(u8 Copy_u8Angle)
{
    248a:	1f 93       	push	r17
    248c:	18 2f       	mov	r17, r24
	if (timer1Initialized == 0)
    248e:	80 91 db 01 	lds	r24, 0x01DB
    2492:	88 23       	and	r24, r24
    2494:	29 f4       	brne	.+10     	; 0x24a0 <SRVM_voidOn+0x16>
	{
	/* TMR1 init at pwm mode 14 */
	TMR1_voidInit();
    2496:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <TMR1_voidInit>

	timer1Initialized = 1;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	80 93 db 01 	sts	0x01DB, r24
	}

	/* Set pwm duty cycle between 5 : 10
	 depend on desired angle[0 : 180] */
	f32 duty_cycle = (f32) ( 5 + (Copy_u8Angle *(5/ 180.0) ));
	TMR1_voidSetDuty_Mode14(duty_cycle);
    24a0:	61 2f       	mov	r22, r17
    24a2:	70 e0       	ldi	r23, 0x00	; 0
    24a4:	88 27       	eor	r24, r24
    24a6:	77 fd       	sbrc	r23, 7
    24a8:	80 95       	com	r24
    24aa:	98 2f       	mov	r25, r24
    24ac:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    24b0:	29 e3       	ldi	r18, 0x39	; 57
    24b2:	3e e8       	ldi	r19, 0x8E	; 142
    24b4:	43 ee       	ldi	r20, 0xE3	; 227
    24b6:	5c e3       	ldi	r21, 0x3C	; 60
    24b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 ea       	ldi	r20, 0xA0	; 160
    24c2:	50 e4       	ldi	r21, 0x40	; 64
    24c4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    24c8:	0e 94 15 0a 	call	0x142a	; 0x142a <TMR1_voidSetDuty_Mode14>

	/* TMR1 start */
	TMR1_voidStart();
    24cc:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <TMR1_voidStart>
}
    24d0:	1f 91       	pop	r17
    24d2:	08 95       	ret

000024d4 <LCD4_Command_Write>:
	Dio_WriteChannel(EN,STD_LOW);
	_delay_ms(1);
}

void LCD4_Command_Write(u8 command)
{
    24d4:	ef 92       	push	r14
    24d6:	ff 92       	push	r15
    24d8:	1f 93       	push	r17
    24da:	18 2f       	mov	r17, r24
	Dio_WriteChannel(RS,STD_LOW);
    24dc:	83 e0       	ldi	r24, 0x03	; 3
    24de:	60 e0       	ldi	r22, 0x00	; 0
    24e0:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>

	Dio_WriteChannel(D4,GET_BIT(command,4));
    24e4:	61 2f       	mov	r22, r17
    24e6:	62 95       	swap	r22
    24e8:	6f 70       	andi	r22, 0x0F	; 15
    24ea:	61 70       	andi	r22, 0x01	; 1
    24ec:	88 e0       	ldi	r24, 0x08	; 8
    24ee:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(D5,GET_BIT(command,5));
    24f2:	61 2f       	mov	r22, r17
    24f4:	62 95       	swap	r22
    24f6:	66 95       	lsr	r22
    24f8:	67 70       	andi	r22, 0x07	; 7
    24fa:	61 70       	andi	r22, 0x01	; 1
    24fc:	89 e0       	ldi	r24, 0x09	; 9
    24fe:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(D6,GET_BIT(command,6));
    2502:	61 2f       	mov	r22, r17
    2504:	62 95       	swap	r22
    2506:	66 95       	lsr	r22
    2508:	66 95       	lsr	r22
    250a:	63 70       	andi	r22, 0x03	; 3
    250c:	61 70       	andi	r22, 0x01	; 1
    250e:	8a e0       	ldi	r24, 0x0A	; 10
    2510:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(D7,GET_BIT(command,7));
    2514:	61 2f       	mov	r22, r17
    2516:	66 1f       	adc	r22, r22
    2518:	66 27       	eor	r22, r22
    251a:	66 1f       	adc	r22, r22
    251c:	8c e0       	ldi	r24, 0x0C	; 12
    251e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(EN,STD_HIGH);
    2522:	82 e0       	ldi	r24, 0x02	; 2
    2524:	61 e0       	ldi	r22, 0x01	; 1
    2526:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
    252a:	0f 2e       	mov	r0, r31
    252c:	f0 ea       	ldi	r31, 0xA0	; 160
    252e:	ef 2e       	mov	r14, r31
    2530:	ff e0       	ldi	r31, 0x0F	; 15
    2532:	ff 2e       	mov	r15, r31
    2534:	f0 2d       	mov	r31, r0
    2536:	c7 01       	movw	r24, r14
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <LCD4_Command_Write+0x64>
	_delay_ms(1);
	Dio_WriteChannel(EN,STD_LOW);
    253c:	82 e0       	ldi	r24, 0x02	; 2
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
    2544:	c7 01       	movw	r24, r14
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <LCD4_Command_Write+0x72>
	_delay_ms(1);

	Dio_WriteChannel(D4,GET_BIT(command,0));
    254a:	61 2f       	mov	r22, r17
    254c:	61 70       	andi	r22, 0x01	; 1
    254e:	88 e0       	ldi	r24, 0x08	; 8
    2550:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(D5,GET_BIT(command,1));
    2554:	61 2f       	mov	r22, r17
    2556:	66 95       	lsr	r22
    2558:	61 70       	andi	r22, 0x01	; 1
    255a:	89 e0       	ldi	r24, 0x09	; 9
    255c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(D6,GET_BIT(command,2));
    2560:	61 2f       	mov	r22, r17
    2562:	66 95       	lsr	r22
    2564:	66 95       	lsr	r22
    2566:	61 70       	andi	r22, 0x01	; 1
    2568:	8a e0       	ldi	r24, 0x0A	; 10
    256a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(D7,GET_BIT(command,3));
    256e:	16 95       	lsr	r17
    2570:	16 95       	lsr	r17
    2572:	16 95       	lsr	r17
    2574:	11 70       	andi	r17, 0x01	; 1
    2576:	8c e0       	ldi	r24, 0x0C	; 12
    2578:	61 2f       	mov	r22, r17
    257a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(EN,STD_HIGH);
    257e:	82 e0       	ldi	r24, 0x02	; 2
    2580:	61 e0       	ldi	r22, 0x01	; 1
    2582:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
    2586:	c7 01       	movw	r24, r14
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <LCD4_Command_Write+0xb4>
	_delay_ms(1);
	Dio_WriteChannel(EN,STD_LOW);
    258c:	82 e0       	ldi	r24, 0x02	; 2
    258e:	60 e0       	ldi	r22, 0x00	; 0
    2590:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
    2594:	c7 01       	movw	r24, r14
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <LCD4_Command_Write+0xc2>
	_delay_ms(1);
}
    259a:	1f 91       	pop	r17
    259c:	ff 90       	pop	r15
    259e:	ef 90       	pop	r14
    25a0:	08 95       	ret

000025a2 <lcd4_set_cursor>:
	}
	lcd4_disply_char_at_X_Y(MemPos, row, col);
}

void lcd4_set_cursor(u8 row, u8 coul){
    coul--;
    25a2:	61 50       	subi	r22, 0x01	; 1
    switch (row){
    25a4:	82 30       	cpi	r24, 0x02	; 2
    25a6:	89 f0       	breq	.+34     	; 0x25ca <lcd4_set_cursor+0x28>
    25a8:	83 30       	cpi	r24, 0x03	; 3
    25aa:	18 f4       	brcc	.+6      	; 0x25b2 <lcd4_set_cursor+0x10>
    25ac:	81 30       	cpi	r24, 0x01	; 1
    25ae:	21 f5       	brne	.+72     	; 0x25f8 <lcd4_set_cursor+0x56>
    25b0:	05 c0       	rjmp	.+10     	; 0x25bc <lcd4_set_cursor+0x1a>
    25b2:	83 30       	cpi	r24, 0x03	; 3
    25b4:	91 f0       	breq	.+36     	; 0x25da <lcd4_set_cursor+0x38>
    25b6:	84 30       	cpi	r24, 0x04	; 4
    25b8:	f9 f4       	brne	.+62     	; 0x25f8 <lcd4_set_cursor+0x56>
    25ba:	17 c0       	rjmp	.+46     	; 0x25ea <lcd4_set_cursor+0x48>
        case ROW1:
            LCD4_Command_Write(0x80+coul);
    25bc:	86 2f       	mov	r24, r22
    25be:	80 58       	subi	r24, 0x80	; 128
    25c0:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <LCD4_Command_Write>
            current_pos = 0;
    25c4:	10 92 dc 01 	sts	0x01DC, r1
    25c8:	08 95       	ret
        break;
        case ROW2:
            LCD4_Command_Write(0xC0+coul);
    25ca:	86 2f       	mov	r24, r22
    25cc:	80 54       	subi	r24, 0x40	; 64
    25ce:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <LCD4_Command_Write>
            current_pos = 20;
    25d2:	84 e1       	ldi	r24, 0x14	; 20
    25d4:	80 93 dc 01 	sts	0x01DC, r24
    25d8:	08 95       	ret
        break;
        case ROW3:
            LCD4_Command_Write(0x94+coul);
    25da:	86 2f       	mov	r24, r22
    25dc:	8c 56       	subi	r24, 0x6C	; 108
    25de:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <LCD4_Command_Write>
            current_pos = 40;
    25e2:	88 e2       	ldi	r24, 0x28	; 40
    25e4:	80 93 dc 01 	sts	0x01DC, r24
    25e8:	08 95       	ret
        break;
        case ROW4:
            LCD4_Command_Write(0xD4+coul);
    25ea:	86 2f       	mov	r24, r22
    25ec:	8c 52       	subi	r24, 0x2C	; 44
    25ee:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <LCD4_Command_Write>
            current_pos = 60;
    25f2:	8c e3       	ldi	r24, 0x3C	; 60
    25f4:	80 93 dc 01 	sts	0x01DC, r24
    25f8:	08 95       	ret

000025fa <lcd4_CLR>:
 * @param	void
 * @return	void
 */
void lcd4_CLR(void)
{
	LCD4_Command_Write(0x01);
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <LCD4_Command_Write>
	current_pos = 0;
    2600:	10 92 dc 01 	sts	0x01DC, r1
	lcd4_set_cursor(1,1);
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	61 e0       	ldi	r22, 0x01	; 1
    2608:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <lcd4_set_cursor>
}
    260c:	08 95       	ret

0000260e <lcd4_Init>:
 * lcd4_Init : This function initializes the LCD 4bit
 * @param	void
 * @return	void
 */
void lcd4_Init(void)
{
    260e:	0f 93       	push	r16
    2610:	1f 93       	push	r17
    2612:	24 ef       	ldi	r18, 0xF4	; 244
    2614:	31 e0       	ldi	r19, 0x01	; 1
    2616:	40 e9       	ldi	r20, 0x90	; 144
    2618:	51 e0       	ldi	r21, 0x01	; 1
    261a:	ca 01       	movw	r24, r20
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	f1 f7       	brne	.-4      	; 0x261c <lcd4_Init+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2620:	21 50       	subi	r18, 0x01	; 1
    2622:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2624:	d1 f7       	brne	.-12     	; 0x261a <lcd4_Init+0xc>
	_delay_ms(50);
	LCD4_Command_Write(LCD_CURSOR_HOME);
    2626:	82 e0       	ldi	r24, 0x02	; 2
    2628:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <LCD4_Command_Write>
	LCD4_Command_Write(LCD_FUNCTION_SET_4_BIT_2_LINE_8_DOTS);	//LCD 4bit mode, 2 line
    262c:	88 e2       	ldi	r24, 0x28	; 40
    262e:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <LCD4_Command_Write>
    2632:	00 ea       	ldi	r16, 0xA0	; 160
    2634:	1f e0       	ldi	r17, 0x0F	; 15
    2636:	c8 01       	movw	r24, r16
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	f1 f7       	brne	.-4      	; 0x2638 <lcd4_Init+0x2a>
	_delay_ms(1);
	LCD4_Command_Write(LCD_DISPLAY_ON_UNDER_LINE_CURSOR_ON_BLOCK_CURSOR_ON); //cursor on off,blink  0x0f,0x0c,0x0e
    263c:	8f e0       	ldi	r24, 0x0F	; 15
    263e:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <LCD4_Command_Write>
    2642:	c8 01       	movw	r24, r16
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	f1 f7       	brne	.-4      	; 0x2644 <lcd4_Init+0x36>
	_delay_ms(1);
	LCD4_Command_Write(LCD_CLEAR_COMMAND); //clear screen
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <LCD4_Command_Write>
    264e:	80 e4       	ldi	r24, 0x40	; 64
    2650:	9f e1       	ldi	r25, 0x1F	; 31
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	f1 f7       	brne	.-4      	; 0x2652 <lcd4_Init+0x44>
	_delay_ms(2);
	LCD4_Command_Write(LCD_ENTRY_MODE_INC_SHIFT_OFF);	//increase DDRAM address
    2656:	86 e0       	ldi	r24, 0x06	; 6
    2658:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <LCD4_Command_Write>
    265c:	c8 01       	movw	r24, r16
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	f1 f7       	brne	.-4      	; 0x265e <lcd4_Init+0x50>
	_delay_ms(1);

	LCD4_Command_Write(LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    2662:	8c e0       	ldi	r24, 0x0C	; 12
    2664:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <LCD4_Command_Write>
	LCD4_Command_Write(LCD_DDRAM_START);
    2668:	80 e8       	ldi	r24, 0x80	; 128
    266a:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <LCD4_Command_Write>
}
    266e:	1f 91       	pop	r17
    2670:	0f 91       	pop	r16
    2672:	08 95       	ret

00002674 <LCD_Data_write>:
    }
}
/* ----------------- Section : Static "Private" Functions Declaration Implementation -----------------*/

static void LCD_Data_write(u8 data)
{
    2674:	ef 92       	push	r14
    2676:	ff 92       	push	r15
    2678:	1f 93       	push	r17
    267a:	18 2f       	mov	r17, r24
	Dio_WriteChannel(RS,STD_HIGH);
    267c:	83 e0       	ldi	r24, 0x03	; 3
    267e:	61 e0       	ldi	r22, 0x01	; 1
    2680:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>

	Dio_WriteChannel(D4,GET_BIT(data,4));
    2684:	61 2f       	mov	r22, r17
    2686:	62 95       	swap	r22
    2688:	6f 70       	andi	r22, 0x0F	; 15
    268a:	61 70       	andi	r22, 0x01	; 1
    268c:	88 e0       	ldi	r24, 0x08	; 8
    268e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(D5,GET_BIT(data,5));
    2692:	61 2f       	mov	r22, r17
    2694:	62 95       	swap	r22
    2696:	66 95       	lsr	r22
    2698:	67 70       	andi	r22, 0x07	; 7
    269a:	61 70       	andi	r22, 0x01	; 1
    269c:	89 e0       	ldi	r24, 0x09	; 9
    269e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(D6,GET_BIT(data,6));
    26a2:	61 2f       	mov	r22, r17
    26a4:	62 95       	swap	r22
    26a6:	66 95       	lsr	r22
    26a8:	66 95       	lsr	r22
    26aa:	63 70       	andi	r22, 0x03	; 3
    26ac:	61 70       	andi	r22, 0x01	; 1
    26ae:	8a e0       	ldi	r24, 0x0A	; 10
    26b0:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(D7,GET_BIT(data,7));
    26b4:	61 2f       	mov	r22, r17
    26b6:	66 1f       	adc	r22, r22
    26b8:	66 27       	eor	r22, r22
    26ba:	66 1f       	adc	r22, r22
    26bc:	8c e0       	ldi	r24, 0x0C	; 12
    26be:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(EN,STD_HIGH);
    26c2:	82 e0       	ldi	r24, 0x02	; 2
    26c4:	61 e0       	ldi	r22, 0x01	; 1
    26c6:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
    26ca:	0f 2e       	mov	r0, r31
    26cc:	f0 ea       	ldi	r31, 0xA0	; 160
    26ce:	ef 2e       	mov	r14, r31
    26d0:	ff e0       	ldi	r31, 0x0F	; 15
    26d2:	ff 2e       	mov	r15, r31
    26d4:	f0 2d       	mov	r31, r0
    26d6:	c7 01       	movw	r24, r14
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	f1 f7       	brne	.-4      	; 0x26d8 <LCD_Data_write+0x64>
	_delay_ms(1);
	Dio_WriteChannel(EN,STD_LOW);
    26dc:	82 e0       	ldi	r24, 0x02	; 2
    26de:	60 e0       	ldi	r22, 0x00	; 0
    26e0:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
    26e4:	c7 01       	movw	r24, r14
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <LCD_Data_write+0x72>
	_delay_ms(1);

	Dio_WriteChannel(D4,GET_BIT(data,0));
    26ea:	61 2f       	mov	r22, r17
    26ec:	61 70       	andi	r22, 0x01	; 1
    26ee:	88 e0       	ldi	r24, 0x08	; 8
    26f0:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(D5,GET_BIT(data,1));
    26f4:	61 2f       	mov	r22, r17
    26f6:	66 95       	lsr	r22
    26f8:	61 70       	andi	r22, 0x01	; 1
    26fa:	89 e0       	ldi	r24, 0x09	; 9
    26fc:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(D6,GET_BIT(data,2));
    2700:	61 2f       	mov	r22, r17
    2702:	66 95       	lsr	r22
    2704:	66 95       	lsr	r22
    2706:	61 70       	andi	r22, 0x01	; 1
    2708:	8a e0       	ldi	r24, 0x0A	; 10
    270a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(D7,GET_BIT(data,3));
    270e:	16 95       	lsr	r17
    2710:	16 95       	lsr	r17
    2712:	16 95       	lsr	r17
    2714:	11 70       	andi	r17, 0x01	; 1
    2716:	8c e0       	ldi	r24, 0x0C	; 12
    2718:	61 2f       	mov	r22, r17
    271a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(EN,STD_HIGH);
    271e:	82 e0       	ldi	r24, 0x02	; 2
    2720:	61 e0       	ldi	r22, 0x01	; 1
    2722:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
    2726:	c7 01       	movw	r24, r14
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	f1 f7       	brne	.-4      	; 0x2728 <LCD_Data_write+0xb4>
	_delay_ms(1);
	Dio_WriteChannel(EN,STD_LOW);
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	60 e0       	ldi	r22, 0x00	; 0
    2730:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
    2734:	c7 01       	movw	r24, r14
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	f1 f7       	brne	.-4      	; 0x2736 <LCD_Data_write+0xc2>
	_delay_ms(1);
}
    273a:	1f 91       	pop	r17
    273c:	ff 90       	pop	r15
    273e:	ef 90       	pop	r14
    2740:	08 95       	ret

00002742 <lcd4_disply_char_at_X_Y>:
 * 			3- col : the Column position of the character
 * 			Ex ('A', 2, 3) -> will display A @ [2,3]
 * @return	void
 */
void lcd4_disply_char_at_X_Y (u8 data, u8 row, u8 col)
{
    2742:	1f 93       	push	r17
    2744:	18 2f       	mov	r17, r24
    2746:	86 2f       	mov	r24, r22
	lcd4_set_cursor(row, col);
    2748:	64 2f       	mov	r22, r20
    274a:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <lcd4_set_cursor>
	LCD_Data_write(data);
    274e:	81 2f       	mov	r24, r17
    2750:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_Data_write>
}
    2754:	1f 91       	pop	r17
    2756:	08 95       	ret

00002758 <lcd4_disply_CustomCharacter>:
 * 			Ex: u8 customChar[] = {0x0E, 0x1B, 0x1F, 0x1F, 0x1F, 0x1F, 0x1B, 0x0E};
 * 				lcd4_disply_CustomCharacter(1, 5, customChar, 0);
 * @return	void
 */
void lcd4_disply_CustomCharacter(u8 row, u8 col, u8* CustomCharacter, u8 MemPos)
{
    2758:	df 92       	push	r13
    275a:	ef 92       	push	r14
    275c:	ff 92       	push	r15
    275e:	0f 93       	push	r16
    2760:	1f 93       	push	r17
    2762:	cf 93       	push	r28
    2764:	df 93       	push	r29
    2766:	e8 2e       	mov	r14, r24
    2768:	d6 2e       	mov	r13, r22
    276a:	8a 01       	movw	r16, r20
    276c:	f2 2e       	mov	r15, r18
	LCD4_Command_Write(LCD_CGRAM_START + (MemPos * 8));
    276e:	82 2f       	mov	r24, r18
    2770:	88 0f       	add	r24, r24
    2772:	88 0f       	add	r24, r24
    2774:	88 0f       	add	r24, r24
    2776:	80 5c       	subi	r24, 0xC0	; 192
    2778:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <LCD4_Command_Write>
    277c:	c0 e0       	ldi	r28, 0x00	; 0
    277e:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0 ; i < 8 ; i++)
	{
		LCD_Data_write(CustomCharacter[i]);
    2780:	f8 01       	movw	r30, r16
    2782:	ec 0f       	add	r30, r28
    2784:	fd 1f       	adc	r31, r29
    2786:	80 81       	ld	r24, Z
    2788:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_Data_write>
 * @return	void
 */
void lcd4_disply_CustomCharacter(u8 row, u8 col, u8* CustomCharacter, u8 MemPos)
{
	LCD4_Command_Write(LCD_CGRAM_START + (MemPos * 8));
	for(int i = 0 ; i < 8 ; i++)
    278c:	21 96       	adiw	r28, 0x01	; 1
    278e:	c8 30       	cpi	r28, 0x08	; 8
    2790:	d1 05       	cpc	r29, r1
    2792:	b1 f7       	brne	.-20     	; 0x2780 <lcd4_disply_CustomCharacter+0x28>
	{
		LCD_Data_write(CustomCharacter[i]);
	}
	lcd4_disply_char_at_X_Y(MemPos, row, col);
    2794:	8f 2d       	mov	r24, r15
    2796:	6e 2d       	mov	r22, r14
    2798:	4d 2d       	mov	r20, r13
    279a:	0e 94 a1 13 	call	0x2742	; 0x2742 <lcd4_disply_char_at_X_Y>
}
    279e:	df 91       	pop	r29
    27a0:	cf 91       	pop	r28
    27a2:	1f 91       	pop	r17
    27a4:	0f 91       	pop	r16
    27a6:	ff 90       	pop	r15
    27a8:	ef 90       	pop	r14
    27aa:	df 90       	pop	r13
    27ac:	08 95       	ret

000027ae <lcd4_disply_char>:
 * lcd4_disply_char : This function displays a character on the LCD 4bit
 * @param	data which is the character to display Ex: 'A'
 * @return	void
 */
void lcd4_disply_char (const u8 character)
{
    27ae:	1f 93       	push	r17
    27b0:	18 2f       	mov	r17, r24
	if(current_pos == 20 )
    27b2:	80 91 dc 01 	lds	r24, 0x01DC
    27b6:	84 31       	cpi	r24, 0x14	; 20
    27b8:	29 f4       	brne	.+10     	; 0x27c4 <lcd4_disply_char+0x16>
	{
		lcd4_set_cursor(2, 1);
    27ba:	82 e0       	ldi	r24, 0x02	; 2
    27bc:	61 e0       	ldi	r22, 0x01	; 1
    27be:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <lcd4_set_cursor>
    27c2:	16 c0       	rjmp	.+44     	; 0x27f0 <lcd4_disply_char+0x42>
	}
	else if(current_pos == 40 )
    27c4:	88 32       	cpi	r24, 0x28	; 40
    27c6:	29 f4       	brne	.+10     	; 0x27d2 <lcd4_disply_char+0x24>
	{
		lcd4_set_cursor(3, 1);
    27c8:	83 e0       	ldi	r24, 0x03	; 3
    27ca:	61 e0       	ldi	r22, 0x01	; 1
    27cc:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <lcd4_set_cursor>
    27d0:	0f c0       	rjmp	.+30     	; 0x27f0 <lcd4_disply_char+0x42>
	}
	else if(current_pos == 60 )
    27d2:	8c 33       	cpi	r24, 0x3C	; 60
    27d4:	29 f4       	brne	.+10     	; 0x27e0 <lcd4_disply_char+0x32>
	{
		lcd4_set_cursor(4, 1);
    27d6:	84 e0       	ldi	r24, 0x04	; 4
    27d8:	61 e0       	ldi	r22, 0x01	; 1
    27da:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <lcd4_set_cursor>
    27de:	08 c0       	rjmp	.+16     	; 0x27f0 <lcd4_disply_char+0x42>
	}
	else if (current_pos == 80)
    27e0:	80 35       	cpi	r24, 0x50	; 80
    27e2:	31 f4       	brne	.+12     	; 0x27f0 <lcd4_disply_char+0x42>
	{
		lcd4_set_cursor(1, 1);
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	61 e0       	ldi	r22, 0x01	; 1
    27e8:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <lcd4_set_cursor>
		current_pos = 0;
    27ec:	10 92 dc 01 	sts	0x01DC, r1
	}
	LCD_Data_write(character);
    27f0:	81 2f       	mov	r24, r17
    27f2:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_Data_write>
	current_pos ++;
    27f6:	80 91 dc 01 	lds	r24, 0x01DC
    27fa:	8f 5f       	subi	r24, 0xFF	; 255
    27fc:	80 93 dc 01 	sts	0x01DC, r24
}
    2800:	1f 91       	pop	r17
    2802:	08 95       	ret

00002804 <displayTextAnimated>:
        default:
        	break;
    }
}

void displayTextAnimated(const char *text) {
    2804:	cf 92       	push	r12
    2806:	df 92       	push	r13
    2808:	ef 92       	push	r14
    280a:	ff 92       	push	r15
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	cf 93       	push	r28
    2812:	df 93       	push	r29
    2814:	fc 01       	movw	r30, r24
    for (int i = 0; text[i] != '\0'; i++) {
    2816:	20 81       	ld	r18, Z
    2818:	22 23       	and	r18, r18
    281a:	e9 f0       	breq	.+58     	; 0x2856 <displayTextAnimated+0x52>
    281c:	7c 01       	movw	r14, r24
        lcd4_disply_char(text[i]);
    281e:	0f 2e       	mov	r0, r31
    2820:	f4 ef       	ldi	r31, 0xF4	; 244
    2822:	cf 2e       	mov	r12, r31
    2824:	f1 e0       	ldi	r31, 0x01	; 1
    2826:	df 2e       	mov	r13, r31
    2828:	f0 2d       	mov	r31, r0
    282a:	c0 e9       	ldi	r28, 0x90	; 144
    282c:	d1 e0       	ldi	r29, 0x01	; 1
    282e:	ce 01       	movw	r24, r28
    2830:	0c 2f       	mov	r16, r28
    2832:	19 2f       	mov	r17, r25
    2834:	82 2f       	mov	r24, r18
    2836:	0e 94 d7 13 	call	0x27ae	; 0x27ae <lcd4_disply_char>
    283a:	96 01       	movw	r18, r12
    283c:	ce 01       	movw	r24, r28
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <displayTextAnimated+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2842:	21 50       	subi	r18, 0x01	; 1
    2844:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2846:	d1 f7       	brne	.-12     	; 0x283c <displayTextAnimated+0x38>
        	break;
    }
}

void displayTextAnimated(const char *text) {
    for (int i = 0; text[i] != '\0'; i++) {
    2848:	f7 01       	movw	r30, r14
    284a:	21 81       	ldd	r18, Z+1	; 0x01
    284c:	08 94       	sec
    284e:	e1 1c       	adc	r14, r1
    2850:	f1 1c       	adc	r15, r1
    2852:	22 23       	and	r18, r18
    2854:	79 f7       	brne	.-34     	; 0x2834 <displayTextAnimated+0x30>
        lcd4_disply_char(text[i]);
        _delay_ms(50); // Adjust the delay as needed
    }
}
    2856:	df 91       	pop	r29
    2858:	cf 91       	pop	r28
    285a:	1f 91       	pop	r17
    285c:	0f 91       	pop	r16
    285e:	ff 90       	pop	r15
    2860:	ef 90       	pop	r14
    2862:	df 90       	pop	r13
    2864:	cf 90       	pop	r12
    2866:	08 95       	ret

00002868 <lcd4_disply_string>:
 * lcd4_disply_string : This function displays whole string on the LCD 4bit
 * @param	data which is the string to display Ex: "Mahmoud El Arabi"
 * @return	void
 */
void lcd4_disply_string (const u8* str)
{
    2868:	cf 93       	push	r28
    286a:	df 93       	push	r29
    286c:	ec 01       	movw	r28, r24
	 while (*str){
    286e:	88 81       	ld	r24, Y
    2870:	88 23       	and	r24, r24
    2872:	31 f0       	breq	.+12     	; 0x2880 <lcd4_disply_string+0x18>
	lcd4_disply_char(*str);
    2874:	0e 94 d7 13 	call	0x27ae	; 0x27ae <lcd4_disply_char>
	str++;
    2878:	21 96       	adiw	r28, 0x01	; 1
 * @param	data which is the string to display Ex: "Mahmoud El Arabi"
 * @return	void
 */
void lcd4_disply_string (const u8* str)
{
	 while (*str){
    287a:	88 81       	ld	r24, Y
    287c:	88 23       	and	r24, r24
    287e:	d1 f7       	brne	.-12     	; 0x2874 <lcd4_disply_string+0xc>
	lcd4_disply_char(*str);
	str++;
	}
}
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	08 95       	ret

00002886 <lcd4_disply_string_at_X_Y>:
 * 			3- col : the Column position of the 1st character of the string which is 'M' here
 * 			Ex ("Mahmoud El Arabi", 2, 3) -> will display "Mahmoud El Arabi" @ [2,3]
 * @return	void
 */
void lcd4_disply_string_at_X_Y(u8* data, u8 row, u8 col)
{
    2886:	0f 93       	push	r16
    2888:	1f 93       	push	r17
    288a:	8c 01       	movw	r16, r24
    288c:	86 2f       	mov	r24, r22
	lcd4_set_cursor(row, col);
    288e:	64 2f       	mov	r22, r20
    2890:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <lcd4_set_cursor>
	lcd4_disply_string(data);
    2894:	c8 01       	movw	r24, r16
    2896:	0e 94 34 14 	call	0x2868	; 0x2868 <lcd4_disply_string>
}
    289a:	1f 91       	pop	r17
    289c:	0f 91       	pop	r16
    289e:	08 95       	ret

000028a0 <lcd4_disply_num>:
/**
 * lcd4_disply_num : This function converts the nu,ber to string and displays it on the LCD 4bit
 * @param	num which is the number to display
 * @return	void
 */
void lcd4_disply_num(u16 num) {
    28a0:	0f 93       	push	r16
    28a2:	1f 93       	push	r17
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	27 97       	sbiw	r28, 0x07	; 7
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	f8 94       	cli
    28b2:	de bf       	out	0x3e, r29	; 62
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	cd bf       	out	0x3d, r28	; 61
    char num_str[7];  // Assuming a 7-character buffer is sufficient
    snprintf(num_str, sizeof(num_str), "%d", num);
    28b8:	2d b7       	in	r18, 0x3d	; 61
    28ba:	3e b7       	in	r19, 0x3e	; 62
    28bc:	28 50       	subi	r18, 0x08	; 8
    28be:	30 40       	sbci	r19, 0x00	; 0
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	f8 94       	cli
    28c4:	3e bf       	out	0x3e, r19	; 62
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	2d bf       	out	0x3d, r18	; 61
    28ca:	ed b7       	in	r30, 0x3d	; 61
    28cc:	fe b7       	in	r31, 0x3e	; 62
    28ce:	31 96       	adiw	r30, 0x01	; 1
    28d0:	9e 01       	movw	r18, r28
    28d2:	2f 5f       	subi	r18, 0xFF	; 255
    28d4:	3f 4f       	sbci	r19, 0xFF	; 255
    28d6:	31 83       	std	Z+1, r19	; 0x01
    28d8:	20 83       	st	Z, r18
    28da:	27 e0       	ldi	r18, 0x07	; 7
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	33 83       	std	Z+3, r19	; 0x03
    28e0:	22 83       	std	Z+2, r18	; 0x02
    28e2:	20 e6       	ldi	r18, 0x60	; 96
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	35 83       	std	Z+5, r19	; 0x05
    28e8:	24 83       	std	Z+4, r18	; 0x04
    28ea:	97 83       	std	Z+7, r25	; 0x07
    28ec:	86 83       	std	Z+6, r24	; 0x06
    28ee:	0e 94 d6 19 	call	0x33ac	; 0x33ac <snprintf>

    // Display the string on the LCD character by character
    for (int i = 0; num_str[i] != '\0'; i++) {
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	ed b7       	in	r30, 0x3d	; 61
    28f6:	fe b7       	in	r31, 0x3e	; 62
    28f8:	38 96       	adiw	r30, 0x08	; 8
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	fe bf       	out	0x3e, r31	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	ed bf       	out	0x3d, r30	; 61
    2904:	88 23       	and	r24, r24
    2906:	51 f0       	breq	.+20     	; 0x291c <lcd4_disply_num+0x7c>
    2908:	8e 01       	movw	r16, r28
    290a:	0e 5f       	subi	r16, 0xFE	; 254
    290c:	1f 4f       	sbci	r17, 0xFF	; 255
        lcd4_disply_char(num_str[i]);
    290e:	0e 94 d7 13 	call	0x27ae	; 0x27ae <lcd4_disply_char>
void lcd4_disply_num(u16 num) {
    char num_str[7];  // Assuming a 7-character buffer is sufficient
    snprintf(num_str, sizeof(num_str), "%d", num);

    // Display the string on the LCD character by character
    for (int i = 0; num_str[i] != '\0'; i++) {
    2912:	f8 01       	movw	r30, r16
    2914:	81 91       	ld	r24, Z+
    2916:	8f 01       	movw	r16, r30
    2918:	88 23       	and	r24, r24
    291a:	c9 f7       	brne	.-14     	; 0x290e <lcd4_disply_num+0x6e>
        lcd4_disply_char(num_str[i]);
    }
}
    291c:	27 96       	adiw	r28, 0x07	; 7
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	f8 94       	cli
    2922:	de bf       	out	0x3e, r29	; 62
    2924:	0f be       	out	0x3f, r0	; 63
    2926:	cd bf       	out	0x3d, r28	; 61
    2928:	cf 91       	pop	r28
    292a:	df 91       	pop	r29
    292c:	1f 91       	pop	r17
    292e:	0f 91       	pop	r16
    2930:	08 95       	ret

00002932 <Keypad_Init>:
														{'1','2','3','-'},
														{'#','0','=','+'}};

void Keypad_Init(void)
{
	Dio_WriteChannel(R1, 1);
    2932:	80 e1       	ldi	r24, 0x10	; 16
    2934:	61 e0       	ldi	r22, 0x01	; 1
    2936:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(R2, 1);
    293a:	81 e1       	ldi	r24, 0x11	; 17
    293c:	61 e0       	ldi	r22, 0x01	; 1
    293e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(R3, 1);
    2942:	82 e1       	ldi	r24, 0x12	; 18
    2944:	61 e0       	ldi	r22, 0x01	; 1
    2946:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(R4, 1);
    294a:	83 e1       	ldi	r24, 0x13	; 19
    294c:	61 e0       	ldi	r22, 0x01	; 1
    294e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
}
    2952:	08 95       	ret

00002954 <Keypad_Get_value>:

void Keypad_Get_value(u8 *value) {
    2954:	4f 92       	push	r4
    2956:	5f 92       	push	r5
    2958:	7f 92       	push	r7
    295a:	8f 92       	push	r8
    295c:	9f 92       	push	r9
    295e:	af 92       	push	r10
    2960:	bf 92       	push	r11
    2962:	cf 92       	push	r12
    2964:	df 92       	push	r13
    2966:	ef 92       	push	r14
    2968:	ff 92       	push	r15
    296a:	0f 93       	push	r16
    296c:	1f 93       	push	r17
    296e:	df 93       	push	r29
    2970:	cf 93       	push	r28
    2972:	00 d0       	rcall	.+0      	; 0x2974 <Keypad_Get_value+0x20>
    2974:	00 d0       	rcall	.+0      	; 0x2976 <Keypad_Get_value+0x22>
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	2c 01       	movw	r4, r24
    u8 rows[keypad_rows] = {R1, R2, R3, R4};
    297c:	80 e1       	ldi	r24, 0x10	; 16
    297e:	89 83       	std	Y+1, r24	; 0x01
    2980:	81 e1       	ldi	r24, 0x11	; 17
    2982:	8a 83       	std	Y+2, r24	; 0x02
    2984:	82 e1       	ldi	r24, 0x12	; 18
    2986:	8b 83       	std	Y+3, r24	; 0x03
    2988:	83 e1       	ldi	r24, 0x13	; 19
    298a:	8c 83       	std	Y+4, r24	; 0x04
    u8 columns[keypad_coul] = {C1, C2, C3, C4};
    298c:	00 e0       	ldi	r16, 0x00	; 0
    298e:	10 e0       	ldi	r17, 0x00	; 0

    // Loop through rows and columns to scan for a pressed key
    u8 row, col;
    for (row = 0; row < keypad_rows; row++) {
        Dio_WriteChannel(rows[row], STD_LOW);
    2990:	5e 01       	movw	r10, r28
    2992:	08 94       	sec
    2994:	a1 1c       	adc	r10, r1
    2996:	b1 1c       	adc	r11, r1
        for (col = 0; col < keypad_coul; col++) {
            if (Dio_ReadChannel(columns[col]) == STD_LOW) {
    2998:	0f 2e       	mov	r0, r31
    299a:	f4 e1       	ldi	r31, 0x14	; 20
    299c:	9f 2e       	mov	r9, r31
    299e:	f0 2d       	mov	r31, r0
    29a0:	0f 2e       	mov	r0, r31
    29a2:	f5 e1       	ldi	r31, 0x15	; 21
    29a4:	8f 2e       	mov	r8, r31
    29a6:	f0 2d       	mov	r31, r0
    29a8:	0f 2e       	mov	r0, r31
    29aa:	f6 e1       	ldi	r31, 0x16	; 22
    29ac:	7f 2e       	mov	r7, r31
    29ae:	f0 2d       	mov	r31, r0
	Dio_WriteChannel(R4, 1);
}

void Keypad_Get_value(u8 *value) {
    u8 rows[keypad_rows] = {R1, R2, R3, R4};
    u8 columns[keypad_coul] = {C1, C2, C3, C4};
    29b0:	68 01       	movw	r12, r16

    // Loop through rows and columns to scan for a pressed key
    u8 row, col;
    for (row = 0; row < keypad_rows; row++) {
        Dio_WriteChannel(rows[row], STD_LOW);
    29b2:	f5 01       	movw	r30, r10
    29b4:	e0 0f       	add	r30, r16
    29b6:	f1 1f       	adc	r31, r17
    29b8:	e0 80       	ld	r14, Z
    29ba:	8e 2d       	mov	r24, r14
    29bc:	60 e0       	ldi	r22, 0x00	; 0
    29be:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
        for (col = 0; col < keypad_coul; col++) {
            if (Dio_ReadChannel(columns[col]) == STD_LOW) {
    29c2:	f9 2c       	mov	r15, r9
    29c4:	89 2d       	mov	r24, r9
    29c6:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <Dio_ReadChannel>
    29ca:	88 23       	and	r24, r24
    29cc:	19 f4       	brne	.+6      	; 0x29d4 <Keypad_Get_value+0x80>
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	1d c0       	rjmp	.+58     	; 0x2a0e <Keypad_Get_value+0xba>
    29d4:	f8 2c       	mov	r15, r8
    29d6:	88 2d       	mov	r24, r8
    29d8:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <Dio_ReadChannel>
    29dc:	88 23       	and	r24, r24
    29de:	19 f4       	brne	.+6      	; 0x29e6 <Keypad_Get_value+0x92>
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	14 c0       	rjmp	.+40     	; 0x2a0e <Keypad_Get_value+0xba>
    29e6:	f7 2c       	mov	r15, r7
    29e8:	87 2d       	mov	r24, r7
    29ea:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <Dio_ReadChannel>
    29ee:	88 23       	and	r24, r24
    29f0:	19 f4       	brne	.+6      	; 0x29f8 <Keypad_Get_value+0xa4>
    29f2:	82 e0       	ldi	r24, 0x02	; 2
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	0b c0       	rjmp	.+22     	; 0x2a0e <Keypad_Get_value+0xba>
    29f8:	87 e1       	ldi	r24, 0x17	; 23
    29fa:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <Dio_ReadChannel>
    29fe:	88 23       	and	r24, r24
    2a00:	c1 f4       	brne	.+48     	; 0x2a32 <Keypad_Get_value+0xde>
    2a02:	83 e0       	ldi	r24, 0x03	; 3
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	0f 2e       	mov	r0, r31
    2a08:	f7 e1       	ldi	r31, 0x17	; 23
    2a0a:	ff 2e       	mov	r15, r31
    2a0c:	f0 2d       	mov	r31, r0
                *value = btn_values[row][col];
    2a0e:	f6 01       	movw	r30, r12
    2a10:	ee 0f       	add	r30, r30
    2a12:	ff 1f       	adc	r31, r31
    2a14:	ee 0f       	add	r30, r30
    2a16:	ff 1f       	adc	r31, r31
    2a18:	e8 0f       	add	r30, r24
    2a1a:	f9 1f       	adc	r31, r25
    2a1c:	e8 55       	subi	r30, 0x58	; 88
    2a1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a20:	80 81       	ld	r24, Z
    2a22:	f2 01       	movw	r30, r4
    2a24:	80 83       	st	Z, r24
                while (Dio_ReadChannel(columns[col]) == STD_LOW);
    2a26:	8f 2d       	mov	r24, r15
    2a28:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <Dio_ReadChannel>
    2a2c:	88 23       	and	r24, r24
    2a2e:	d9 f3       	breq	.-10     	; 0x2a26 <Keypad_Get_value+0xd2>
    2a30:	0d c0       	rjmp	.+26     	; 0x2a4c <Keypad_Get_value+0xf8>
                return;
            }
        }
        Dio_WriteChannel(rows[row], STD_HIGH);
    2a32:	8e 2d       	mov	r24, r14
    2a34:	61 e0       	ldi	r22, 0x01	; 1
    2a36:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
    2a3a:	0f 5f       	subi	r16, 0xFF	; 255
    2a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    u8 rows[keypad_rows] = {R1, R2, R3, R4};
    u8 columns[keypad_coul] = {C1, C2, C3, C4};

    // Loop through rows and columns to scan for a pressed key
    u8 row, col;
    for (row = 0; row < keypad_rows; row++) {
    2a3e:	04 30       	cpi	r16, 0x04	; 4
    2a40:	11 05       	cpc	r17, r1
    2a42:	09 f0       	breq	.+2      	; 0x2a46 <Keypad_Get_value+0xf2>
    2a44:	b5 cf       	rjmp	.-150    	; 0x29b0 <Keypad_Get_value+0x5c>
                return;
            }
        }
        Dio_WriteChannel(rows[row], STD_HIGH);
    }
    *value = 'T';
    2a46:	84 e5       	ldi	r24, 0x54	; 84
    2a48:	f2 01       	movw	r30, r4
    2a4a:	80 83       	st	Z, r24
}
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	cf 91       	pop	r28
    2a56:	df 91       	pop	r29
    2a58:	1f 91       	pop	r17
    2a5a:	0f 91       	pop	r16
    2a5c:	ff 90       	pop	r15
    2a5e:	ef 90       	pop	r14
    2a60:	df 90       	pop	r13
    2a62:	cf 90       	pop	r12
    2a64:	bf 90       	pop	r11
    2a66:	af 90       	pop	r10
    2a68:	9f 90       	pop	r9
    2a6a:	8f 90       	pop	r8
    2a6c:	7f 90       	pop	r7
    2a6e:	5f 90       	pop	r5
    2a70:	4f 90       	pop	r4
    2a72:	08 95       	ret

00002a74 <EEPROM_voidRead_Page>:
	TWI_voidSendStopCondition();
	_delay_ms(5);	// delay to eeprom to store the data
}

void EEPROM_voidRead_Page(u16 copy_u16WordAdd, u8 *copy_u8PtrReceivedData, u8 copy_u8Size)
{
    2a74:	af 92       	push	r10
    2a76:	bf 92       	push	r11
    2a78:	cf 92       	push	r12
    2a7a:	df 92       	push	r13
    2a7c:	ef 92       	push	r14
    2a7e:	ff 92       	push	r15
    2a80:	0f 93       	push	r16
    2a82:	1f 93       	push	r17
    2a84:	cf 93       	push	r28
    2a86:	df 93       	push	r29
    2a88:	18 2f       	mov	r17, r24
    2a8a:	6b 01       	movw	r12, r22
    2a8c:	f4 2e       	mov	r15, r20
//	SET_BIT(_TWCR, _TWEA);
    u8 local_u8Add = (copy_u16WordAdd >> 8) | EEPROM_FIXED_ADDRESS;
    2a8e:	09 2f       	mov	r16, r25
    2a90:	00 65       	ori	r16, 0x50	; 80
    TWI_voidSendStartCondition();
    2a92:	0e 94 85 08 	call	0x110a	; 0x110a <TWI_voidSendStartCondition>
    TWI_voidSendSlaveAdd_WriteRequest(local_u8Add);
    2a96:	80 2f       	mov	r24, r16
    2a98:	0e 94 b2 08 	call	0x1164	; 0x1164 <TWI_voidSendSlaveAdd_WriteRequest>
    TWI_voidWriteMasterDataByte((u8)copy_u16WordAdd);
    2a9c:	81 2f       	mov	r24, r17
    2a9e:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <TWI_voidWriteMasterDataByte>

    TWI_voidSendReapeatedStartCondition();
    2aa2:	0e 94 a0 08 	call	0x1140	; 0x1140 <TWI_voidSendReapeatedStartCondition>

    TWI_voidSendSlaveAdd_ReadRequest(local_u8Add);
    2aa6:	80 2f       	mov	r24, r16
    2aa8:	0e 94 cd 08 	call	0x119a	; 0x119a <TWI_voidSendSlaveAdd_ReadRequest>

    for (int i = 0; i < copy_u8Size; i++)
    2aac:	cf 2d       	mov	r28, r15
    2aae:	d0 e0       	ldi	r29, 0x00	; 0
    2ab0:	1c 16       	cp	r1, r28
    2ab2:	1d 06       	cpc	r1, r29
    2ab4:	e4 f4       	brge	.+56     	; 0x2aee <EEPROM_voidRead_Page+0x7a>
    2ab6:	00 e0       	ldi	r16, 0x00	; 0
    2ab8:	10 e0       	ldi	r17, 0x00	; 0
    {
    	TWI_voidReadMasterDataByteACK(&copy_u8PtrReceivedData[i]);
    	if(i == copy_u8Size -1)
    2aba:	7e 01       	movw	r14, r28
    2abc:	08 94       	sec
    2abe:	e1 08       	sbc	r14, r1
    2ac0:	f1 08       	sbc	r15, r1
    	{
    		CLR_BIT(_TWCR, _TWEA);
    2ac2:	0f 2e       	mov	r0, r31
    2ac4:	f6 e5       	ldi	r31, 0x56	; 86
    2ac6:	af 2e       	mov	r10, r31
    2ac8:	bb 24       	eor	r11, r11
    2aca:	f0 2d       	mov	r31, r0

    TWI_voidSendSlaveAdd_ReadRequest(local_u8Add);

    for (int i = 0; i < copy_u8Size; i++)
    {
    	TWI_voidReadMasterDataByteACK(&copy_u8PtrReceivedData[i]);
    2acc:	c6 01       	movw	r24, r12
    2ace:	80 0f       	add	r24, r16
    2ad0:	91 1f       	adc	r25, r17
    2ad2:	0e 94 14 09 	call	0x1228	; 0x1228 <TWI_voidReadMasterDataByteACK>
    	if(i == copy_u8Size -1)
    2ad6:	e0 16       	cp	r14, r16
    2ad8:	f1 06       	cpc	r15, r17
    2ada:	21 f4       	brne	.+8      	; 0x2ae4 <EEPROM_voidRead_Page+0x70>
    	{
    		CLR_BIT(_TWCR, _TWEA);
    2adc:	f5 01       	movw	r30, r10
    2ade:	80 81       	ld	r24, Z
    2ae0:	8f 7b       	andi	r24, 0xBF	; 191
    2ae2:	80 83       	st	Z, r24

    TWI_voidSendReapeatedStartCondition();

    TWI_voidSendSlaveAdd_ReadRequest(local_u8Add);

    for (int i = 0; i < copy_u8Size; i++)
    2ae4:	0f 5f       	subi	r16, 0xFF	; 255
    2ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae8:	0c 17       	cp	r16, r28
    2aea:	1d 07       	cpc	r17, r29
    2aec:	7c f3       	brlt	.-34     	; 0x2acc <EEPROM_voidRead_Page+0x58>
    	if(i == copy_u8Size -1)
    	{
    		CLR_BIT(_TWCR, _TWEA);
    	}
    }
    TWI_voidSendStopCondition();
    2aee:	0e 94 97 08 	call	0x112e	; 0x112e <TWI_voidSendStopCondition>
    2af2:	80 e2       	ldi	r24, 0x20	; 32
    2af4:	9e e4       	ldi	r25, 0x4E	; 78
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	f1 f7       	brne	.-4      	; 0x2af6 <EEPROM_voidRead_Page+0x82>

    _delay_ms(5);  // Delay for EEPROM to store the data
}
    2afa:	df 91       	pop	r29
    2afc:	cf 91       	pop	r28
    2afe:	1f 91       	pop	r17
    2b00:	0f 91       	pop	r16
    2b02:	ff 90       	pop	r15
    2b04:	ef 90       	pop	r14
    2b06:	df 90       	pop	r13
    2b08:	cf 90       	pop	r12
    2b0a:	bf 90       	pop	r11
    2b0c:	af 90       	pop	r10
    2b0e:	08 95       	ret

00002b10 <EEPROM_voidWrite_Page>:
	}
}


void EEPROM_voidWrite_Page(u16 copy_u16WordAdd, u8 *copy_u8Data, u8 copy_u8Size)
{
    2b10:	cf 92       	push	r12
    2b12:	df 92       	push	r13
    2b14:	ff 92       	push	r15
    2b16:	0f 93       	push	r16
    2b18:	1f 93       	push	r17
    2b1a:	cf 93       	push	r28
    2b1c:	df 93       	push	r29
    2b1e:	18 2f       	mov	r17, r24
    2b20:	09 2f       	mov	r16, r25
    2b22:	6b 01       	movw	r12, r22
    2b24:	f4 2e       	mov	r15, r20

	u8 local_u8Add = (copy_u16WordAdd >> 8) | EEPROM_FIXED_ADDRESS ;
	TWI_voidSendStartCondition();
    2b26:	0e 94 85 08 	call	0x110a	; 0x110a <TWI_voidSendStartCondition>
	TWI_voidSendSlaveAdd_WriteRequest(local_u8Add);
    2b2a:	80 2f       	mov	r24, r16
    2b2c:	80 65       	ori	r24, 0x50	; 80
    2b2e:	0e 94 b2 08 	call	0x1164	; 0x1164 <TWI_voidSendSlaveAdd_WriteRequest>

	TWI_voidWriteMasterDataByte((u8)copy_u16WordAdd);
    2b32:	81 2f       	mov	r24, r17
    2b34:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <TWI_voidWriteMasterDataByte>
	for (int i = 0; i <copy_u8Size ; i++ )
    2b38:	cf 2d       	mov	r28, r15
    2b3a:	d0 e0       	ldi	r29, 0x00	; 0
    2b3c:	1c 16       	cp	r1, r28
    2b3e:	1d 06       	cpc	r1, r29
    2b40:	6c f4       	brge	.+26     	; 0x2b5c <EEPROM_voidWrite_Page+0x4c>
    2b42:	00 e0       	ldi	r16, 0x00	; 0
    2b44:	10 e0       	ldi	r17, 0x00	; 0
		{
			TWI_voidWriteMasterDataByte(copy_u8Data[i]);
    2b46:	f6 01       	movw	r30, r12
    2b48:	e0 0f       	add	r30, r16
    2b4a:	f1 1f       	adc	r31, r17
    2b4c:	80 81       	ld	r24, Z
    2b4e:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <TWI_voidWriteMasterDataByte>
	u8 local_u8Add = (copy_u16WordAdd >> 8) | EEPROM_FIXED_ADDRESS ;
	TWI_voidSendStartCondition();
	TWI_voidSendSlaveAdd_WriteRequest(local_u8Add);

	TWI_voidWriteMasterDataByte((u8)copy_u16WordAdd);
	for (int i = 0; i <copy_u8Size ; i++ )
    2b52:	0f 5f       	subi	r16, 0xFF	; 255
    2b54:	1f 4f       	sbci	r17, 0xFF	; 255
    2b56:	0c 17       	cp	r16, r28
    2b58:	1d 07       	cpc	r17, r29
    2b5a:	ac f3       	brlt	.-22     	; 0x2b46 <EEPROM_voidWrite_Page+0x36>
		{
			TWI_voidWriteMasterDataByte(copy_u8Data[i]);
		}

	TWI_voidSendStopCondition();
    2b5c:	0e 94 97 08 	call	0x112e	; 0x112e <TWI_voidSendStopCondition>
    2b60:	80 e2       	ldi	r24, 0x20	; 32
    2b62:	9e e4       	ldi	r25, 0x4E	; 78
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <EEPROM_voidWrite_Page+0x54>
	_delay_ms(5);	// delay to eeprom to store the data
}
    2b68:	df 91       	pop	r29
    2b6a:	cf 91       	pop	r28
    2b6c:	1f 91       	pop	r17
    2b6e:	0f 91       	pop	r16
    2b70:	ff 90       	pop	r15
    2b72:	df 90       	pop	r13
    2b74:	cf 90       	pop	r12
    2b76:	08 95       	ret

00002b78 <EEPROM_voidWrite_Byte>:
{
	TWI_voidInitMaster(255);
}

void EEPROM_voidWrite_Byte(u16 copy_u16WordAdd, u8 copy_u8Data)
{
    2b78:	ff 92       	push	r15
    2b7a:	0f 93       	push	r16
    2b7c:	1f 93       	push	r17
    2b7e:	18 2f       	mov	r17, r24
    2b80:	09 2f       	mov	r16, r25
    2b82:	f6 2e       	mov	r15, r22
	u8 local_u8Add = (copy_u16WordAdd >> 8) | EEPROM_FIXED_ADDRESS ;
	TWI_voidSendStartCondition();
    2b84:	0e 94 85 08 	call	0x110a	; 0x110a <TWI_voidSendStartCondition>
	TWI_voidSendSlaveAdd_WriteRequest(local_u8Add);
    2b88:	80 2f       	mov	r24, r16
    2b8a:	80 65       	ori	r24, 0x50	; 80
    2b8c:	0e 94 b2 08 	call	0x1164	; 0x1164 <TWI_voidSendSlaveAdd_WriteRequest>

	TWI_voidWriteMasterDataByte((u8)copy_u16WordAdd);
    2b90:	81 2f       	mov	r24, r17
    2b92:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <TWI_voidWriteMasterDataByte>
	TWI_voidWriteMasterDataByte(copy_u8Data);
    2b96:	8f 2d       	mov	r24, r15
    2b98:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <TWI_voidWriteMasterDataByte>
	TWI_voidSendStopCondition();
    2b9c:	0e 94 97 08 	call	0x112e	; 0x112e <TWI_voidSendStopCondition>
    2ba0:	80 e2       	ldi	r24, 0x20	; 32
    2ba2:	9e e4       	ldi	r25, 0x4E	; 78
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	f1 f7       	brne	.-4      	; 0x2ba4 <EEPROM_voidWrite_Byte+0x2c>
	_delay_ms(5);	// delay to eeprom to store the data
}
    2ba8:	1f 91       	pop	r17
    2baa:	0f 91       	pop	r16
    2bac:	ff 90       	pop	r15
    2bae:	08 95       	ret

00002bb0 <EEPROM_voidRead_Byte>:

void EEPROM_voidRead_Byte(u16 copy_u16WordAdd, u8 *copy_u8PtrReceivedData)
{
    2bb0:	0f 93       	push	r16
    2bb2:	1f 93       	push	r17
    2bb4:	cf 93       	push	r28
    2bb6:	df 93       	push	r29
    2bb8:	08 2f       	mov	r16, r24
    2bba:	eb 01       	movw	r28, r22
	if(copy_u8PtrReceivedData != NULL)
    2bbc:	61 15       	cp	r22, r1
    2bbe:	71 05       	cpc	r23, r1
    2bc0:	c1 f0       	breq	.+48     	; 0x2bf2 <EEPROM_voidRead_Byte+0x42>
	{
		// CLR_BIT(_TWCR, _TWEA);
		u8 local_u8Add = (copy_u16WordAdd >> 8) | EEPROM_FIXED_ADDRESS ;
    2bc2:	19 2f       	mov	r17, r25
    2bc4:	10 65       	ori	r17, 0x50	; 80
		TWI_voidSendStartCondition();
    2bc6:	0e 94 85 08 	call	0x110a	; 0x110a <TWI_voidSendStartCondition>
		TWI_voidSendSlaveAdd_WriteRequest(local_u8Add);
    2bca:	81 2f       	mov	r24, r17
    2bcc:	0e 94 b2 08 	call	0x1164	; 0x1164 <TWI_voidSendSlaveAdd_WriteRequest>
		TWI_voidWriteMasterDataByte((u8)copy_u16WordAdd);
    2bd0:	80 2f       	mov	r24, r16
    2bd2:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <TWI_voidWriteMasterDataByte>

		TWI_voidSendReapeatedStartCondition();
    2bd6:	0e 94 a0 08 	call	0x1140	; 0x1140 <TWI_voidSendReapeatedStartCondition>

		TWI_voidSendSlaveAdd_ReadRequest(local_u8Add);
    2bda:	81 2f       	mov	r24, r17
    2bdc:	0e 94 cd 08 	call	0x119a	; 0x119a <TWI_voidSendSlaveAdd_ReadRequest>

		TWI_voidReadMasterDataByteNACK(copy_u8PtrReceivedData);
    2be0:	ce 01       	movw	r24, r28
    2be2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <TWI_voidReadMasterDataByteNACK>

		TWI_voidSendStopCondition();
    2be6:	0e 94 97 08 	call	0x112e	; 0x112e <TWI_voidSendStopCondition>
    2bea:	80 e2       	ldi	r24, 0x20	; 32
    2bec:	9e e4       	ldi	r25, 0x4E	; 78
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	f1 f7       	brne	.-4      	; 0x2bee <EEPROM_voidRead_Byte+0x3e>

		_delay_ms(5);	// delay to eeprom to store the data
	}
}
    2bf2:	df 91       	pop	r29
    2bf4:	cf 91       	pop	r28
    2bf6:	1f 91       	pop	r17
    2bf8:	0f 91       	pop	r16
    2bfa:	08 95       	ret

00002bfc <EEPROM_Init>:
#include <util/delay.h>

/* ----------------- Section : Software Interfaces Implementation -----------------*/
void EEPROM_Init(void)
{
	TWI_voidInitMaster(255);
    2bfc:	8f ef       	ldi	r24, 0xFF	; 255
    2bfe:	0e 94 6e 08 	call	0x10dc	; 0x10dc <TWI_voidInitMaster>
}
    2c02:	08 95       	ret

00002c04 <DCM_voidOff>:
 * @param	void
 * @return	void
 */
void DCM_voidOff(void)
{
	TMR0_voidStop();
    2c04:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <TMR0_voidStop>
	timerInitialized =0;
    2c08:	10 92 dd 01 	sts	0x01DD, r1
	Dio_WriteChannel(DC_MOTOR_EN_PIN, 0);
    2c0c:	8e e0       	ldi	r24, 0x0E	; 14
    2c0e:	60 e0       	ldi	r22, 0x00	; 0
    2c10:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
}
    2c14:	08 95       	ret

00002c16 <DCM_voidControlSpeed>:
 * DCM_voidControlSpeed : control the speed of a DC motor connected to an H-Bridge motor driver using PWM from TIMERS
 * @param	Copy_u8Speed --> [0 : 100] the desired speed of the motor. Ranges from 0  to 100
 * @return	void
 */
void DCM_voidControlSpeed(u8 Copy_u8Speed)
{
    2c16:	1f 93       	push	r17
    2c18:	18 2f       	mov	r17, r24
	if (timerInitialized == 0)
    2c1a:	80 91 dd 01 	lds	r24, 0x01DD
    2c1e:	88 23       	and	r24, r24
    2c20:	29 f4       	brne	.+10     	; 0x2c2c <DCM_voidControlSpeed+0x16>
	{
		TMR0_voidInit();
    2c22:	0e 94 8d 0a 	call	0x151a	; 0x151a <TMR0_voidInit>
		timerInitialized = 1;  // Set the flag to indicate initialization
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	80 93 dd 01 	sts	0x01DD, r24
	}
	TMR0_voidSetDutyCycle(Copy_u8Speed);
    2c2c:	81 2f       	mov	r24, r17
    2c2e:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <TMR0_voidSetDutyCycle>
	TMR0_voidStart();
    2c32:	0e 94 9e 0a 	call	0x153c	; 0x153c <TMR0_voidStart>
}
    2c36:	1f 91       	pop	r17
    2c38:	08 95       	ret

00002c3a <DCM_voidOn>:
 * DCM_voidOn : used to turn on a DC motor using an H-Bridge motor driver on FARES PCB Kit
 * @param	Copy_u8Direction --> the desired direction of the motor --> [DCM_CLOCK_WISE or DCM_COUNTER_CLOCK_WISE]
 * @return	void
 */
void DCM_voidOn(u8 Copy_u8Direction)
{
    2c3a:	1f 93       	push	r17
    2c3c:	18 2f       	mov	r17, r24
	Dio_WriteChannel(DC_MOTOR_EN_PIN, 1);
    2c3e:	8e e0       	ldi	r24, 0x0E	; 14
    2c40:	61 e0       	ldi	r22, 0x01	; 1
    2c42:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	DCM_voidControlSpeed(100);
    2c46:	84 e6       	ldi	r24, 0x64	; 100
    2c48:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <DCM_voidControlSpeed>
	switch(Copy_u8Direction)
    2c4c:	11 30       	cpi	r17, 0x01	; 1
    2c4e:	19 f0       	breq	.+6      	; 0x2c56 <DCM_voidOn+0x1c>
    2c50:	12 30       	cpi	r17, 0x02	; 2
    2c52:	51 f4       	brne	.+20     	; 0x2c68 <DCM_voidOn+0x2e>
    2c54:	05 c0       	rjmp	.+10     	; 0x2c60 <DCM_voidOn+0x26>
	{
	case DCM_CLOCK_WISE:
		Dio_WriteChannel(DC_MOTOR_DIR_PIN, 1);
    2c56:	8d e0       	ldi	r24, 0x0D	; 13
    2c58:	61 e0       	ldi	r22, 0x01	; 1
    2c5a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
    2c5e:	04 c0       	rjmp	.+8      	; 0x2c68 <DCM_voidOn+0x2e>
		break;
	case DCM_COUNTER_CLOCK_WISE:
		Dio_WriteChannel(DC_MOTOR_DIR_PIN, 0);
    2c60:	8d e0       	ldi	r24, 0x0D	; 13
    2c62:	60 e0       	ldi	r22, 0x00	; 0
    2c64:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
		break;
	default: break;
	}
}
    2c68:	1f 91       	pop	r17
    2c6a:	08 95       	ret

00002c6c <Segment_Write>:
 * @param	1- num : which is the number to display
 * 			2- seg_index : which is the number of the segment 0, 1, 2 or 3
 * @return	void
 */
void Segment_Write(u8 num, u8 seg_index)
{
    2c6c:	1f 93       	push	r17
    2c6e:	18 2f       	mov	r17, r24
	switch(seg_index)
    2c70:	61 30       	cpi	r22, 0x01	; 1
    2c72:	c9 f0       	breq	.+50     	; 0x2ca6 <Segment_Write+0x3a>
    2c74:	61 30       	cpi	r22, 0x01	; 1
    2c76:	30 f0       	brcs	.+12     	; 0x2c84 <Segment_Write+0x18>
    2c78:	62 30       	cpi	r22, 0x02	; 2
    2c7a:	31 f1       	breq	.+76     	; 0x2cc8 <Segment_Write+0x5c>
    2c7c:	63 30       	cpi	r22, 0x03	; 3
    2c7e:	09 f0       	breq	.+2      	; 0x2c82 <Segment_Write+0x16>
    2c80:	44 c0       	rjmp	.+136    	; 0x2d0a <Segment_Write+0x9e>
    2c82:	33 c0       	rjmp	.+102    	; 0x2cea <Segment_Write+0x7e>
	{
	case 0:
		CLR_BIT(_PORTA, 3);
    2c84:	eb e3       	ldi	r30, 0x3B	; 59
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	80 81       	ld	r24, Z
    2c8a:	87 7f       	andi	r24, 0xF7	; 247
    2c8c:	80 83       	st	Z, r24
		SET_BIT(_PORTA, 2);
    2c8e:	80 81       	ld	r24, Z
    2c90:	84 60       	ori	r24, 0x04	; 4
    2c92:	80 83       	st	Z, r24
		SET_BIT(_PORTB, 5);
    2c94:	e8 e3       	ldi	r30, 0x38	; 56
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	80 62       	ori	r24, 0x20	; 32
    2c9c:	80 83       	st	Z, r24
		SET_BIT(_PORTB, 6);
    2c9e:	80 81       	ld	r24, Z
    2ca0:	80 64       	ori	r24, 0x40	; 64
    2ca2:	80 83       	st	Z, r24
    2ca4:	32 c0       	rjmp	.+100    	; 0x2d0a <Segment_Write+0x9e>
		break;
	case 1:
		SET_BIT(_PORTA, 3);
    2ca6:	eb e3       	ldi	r30, 0x3B	; 59
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	88 60       	ori	r24, 0x08	; 8
    2cae:	80 83       	st	Z, r24
		CLR_BIT(_PORTA, 2);
    2cb0:	80 81       	ld	r24, Z
    2cb2:	8b 7f       	andi	r24, 0xFB	; 251
    2cb4:	80 83       	st	Z, r24
		SET_BIT(_PORTB, 5);
    2cb6:	e8 e3       	ldi	r30, 0x38	; 56
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	80 62       	ori	r24, 0x20	; 32
    2cbe:	80 83       	st	Z, r24
		SET_BIT(_PORTB, 6);
    2cc0:	80 81       	ld	r24, Z
    2cc2:	80 64       	ori	r24, 0x40	; 64
    2cc4:	80 83       	st	Z, r24
    2cc6:	21 c0       	rjmp	.+66     	; 0x2d0a <Segment_Write+0x9e>
		break;
	case 2:
		SET_BIT(_PORTA, 3);
    2cc8:	eb e3       	ldi	r30, 0x3B	; 59
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	80 81       	ld	r24, Z
    2cce:	88 60       	ori	r24, 0x08	; 8
    2cd0:	80 83       	st	Z, r24
		SET_BIT(_PORTA, 2);
    2cd2:	80 81       	ld	r24, Z
    2cd4:	84 60       	ori	r24, 0x04	; 4
    2cd6:	80 83       	st	Z, r24
		CLR_BIT(_PORTB, 5);
    2cd8:	e8 e3       	ldi	r30, 0x38	; 56
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	80 81       	ld	r24, Z
    2cde:	8f 7d       	andi	r24, 0xDF	; 223
    2ce0:	80 83       	st	Z, r24
		SET_BIT(_PORTB, 6);
    2ce2:	80 81       	ld	r24, Z
    2ce4:	80 64       	ori	r24, 0x40	; 64
    2ce6:	80 83       	st	Z, r24
    2ce8:	10 c0       	rjmp	.+32     	; 0x2d0a <Segment_Write+0x9e>
		break;
	case 3:
		SET_BIT(_PORTA, 3);
    2cea:	eb e3       	ldi	r30, 0x3B	; 59
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	80 81       	ld	r24, Z
    2cf0:	88 60       	ori	r24, 0x08	; 8
    2cf2:	80 83       	st	Z, r24
		SET_BIT(_PORTA, 2);
    2cf4:	80 81       	ld	r24, Z
    2cf6:	84 60       	ori	r24, 0x04	; 4
    2cf8:	80 83       	st	Z, r24
		SET_BIT(_PORTB, 5);
    2cfa:	e8 e3       	ldi	r30, 0x38	; 56
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	80 62       	ori	r24, 0x20	; 32
    2d02:	80 83       	st	Z, r24
		CLR_BIT(_PORTB, 6);
    2d04:	80 81       	ld	r24, Z
    2d06:	8f 7b       	andi	r24, 0xBF	; 191
    2d08:	80 83       	st	Z, r24
		break;
	}
	if (num >9){
    2d0a:	1a 30       	cpi	r17, 0x0A	; 10
    2d0c:	d0 f4       	brcc	.+52     	; 0x2d42 <Segment_Write+0xd6>
		return;
	}
	else{
		Dio_WriteChannel(PB_0 , (num & 0x01));
    2d0e:	61 2f       	mov	r22, r17
    2d10:	61 70       	andi	r22, 0x01	; 1
    2d12:	88 e0       	ldi	r24, 0x08	; 8
    2d14:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
		Dio_WriteChannel(PB_1 , ((num>>1) & 0x01));
    2d18:	61 2f       	mov	r22, r17
    2d1a:	66 95       	lsr	r22
    2d1c:	61 70       	andi	r22, 0x01	; 1
    2d1e:	89 e0       	ldi	r24, 0x09	; 9
    2d20:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
		Dio_WriteChannel(PB_2 , ((num>>2) & 0x01));
    2d24:	61 2f       	mov	r22, r17
    2d26:	66 95       	lsr	r22
    2d28:	66 95       	lsr	r22
    2d2a:	61 70       	andi	r22, 0x01	; 1
    2d2c:	8a e0       	ldi	r24, 0x0A	; 10
    2d2e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
		Dio_WriteChannel(PB_4 , ((num>>3) & 0x01));
    2d32:	61 2f       	mov	r22, r17
    2d34:	66 95       	lsr	r22
    2d36:	66 95       	lsr	r22
    2d38:	66 95       	lsr	r22
    2d3a:	61 70       	andi	r22, 0x01	; 1
    2d3c:	8c e0       	ldi	r24, 0x0C	; 12
    2d3e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	}
}
    2d42:	1f 91       	pop	r17
    2d44:	08 95       	ret

00002d46 <stop_after_back_cm>:
	Dio_WriteChannel(B_US_VCC_SWI, 0);
	SET_BIT(_SPCR, 7);		// SPI INT ENABLE
}

static void stop_after_back_cm (u8 distance)
{
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
	while(1)
	{
		Ultra_Sonic_void_trigger(B_US_TRIGGER);
		DistanceBack = Ultra_Sonic_Distance_in_cm();
		if (DistanceBack < distance)
    2d4a:	c8 2f       	mov	r28, r24
    2d4c:	d0 e0       	ldi	r29, 0x00	; 0

static void stop_after_back_cm (u8 distance)
{
	while(1)
	{
		Ultra_Sonic_void_trigger(B_US_TRIGGER);
    2d4e:	82 e1       	ldi	r24, 0x12	; 18
    2d50:	0e 94 3d 11 	call	0x227a	; 0x227a <Ultra_Sonic_void_trigger>
		DistanceBack = Ultra_Sonic_Distance_in_cm();
    2d54:	0e 94 32 11 	call	0x2264	; 0x2264 <Ultra_Sonic_Distance_in_cm>
    2d58:	90 93 1a 02 	sts	0x021A, r25
    2d5c:	80 93 19 02 	sts	0x0219, r24
		if (DistanceBack < distance)
    2d60:	8c 17       	cp	r24, r28
    2d62:	9d 07       	cpc	r25, r29
    2d64:	a0 f7       	brcc	.-24     	; 0x2d4e <stop_after_back_cm+0x8>
		{
			do{
				SPI_voidTranseive(STOP, &received);
    2d66:	cf ed       	ldi	r28, 0xDF	; 223
    2d68:	d1 e0       	ldi	r29, 0x01	; 1
    2d6a:	85 e1       	ldi	r24, 0x15	; 21
    2d6c:	be 01       	movw	r22, r28
    2d6e:	0e 94 32 0b 	call	0x1664	; 0x1664 <SPI_voidTranseive>
			}
			while(received != CHECK_HAND);
    2d72:	80 91 df 01 	lds	r24, 0x01DF
    2d76:	86 35       	cpi	r24, 0x56	; 86
    2d78:	c1 f7       	brne	.-16     	; 0x2d6a <stop_after_back_cm+0x24>
			break;
		}
	}
}
    2d7a:	df 91       	pop	r29
    2d7c:	cf 91       	pop	r28
    2d7e:	08 95       	ret

00002d80 <AutoPark_action>:
		default: break;
	}
}

void AutoPark_action(void)
{
    2d80:	8f 92       	push	r8
    2d82:	9f 92       	push	r9
    2d84:	af 92       	push	r10
    2d86:	bf 92       	push	r11
    2d88:	cf 92       	push	r12
    2d8a:	df 92       	push	r13
    2d8c:	ef 92       	push	r14
    2d8e:	ff 92       	push	r15
    2d90:	0f 93       	push	r16
    2d92:	1f 93       	push	r17
    2d94:	cf 93       	push	r28
    2d96:	df 93       	push	r29
	u8 Continue_flag = 0;
	u32 count =0;
	u32 timeout = 0;
	RUN_STATE = 0;
    2d98:	10 92 de 01 	sts	0x01DE, r1
    2d9c:	ee 24       	eor	r14, r14
    2d9e:	ff 24       	eor	r15, r15
    2da0:	87 01       	movw	r16, r14
	{
		//Step -1:	Turn your signal and find parking space.
		if(Auto_R_Flag == 0)
		{
			Dio_WriteChannel(R_US_ECH_SWI, 1);
			Dio_WriteChannel(R_US_VCC_SWI, 1);
    2da2:	0f 2e       	mov	r0, r31
    2da4:	f8 e8       	ldi	r31, 0x88	; 136
    2da6:	8f 2e       	mov	r8, r31
    2da8:	f3 e1       	ldi	r31, 0x13	; 19
    2daa:	9f 2e       	mov	r9, r31
    2dac:	f0 2d       	mov	r31, r0
    2dae:	c0 e9       	ldi	r28, 0x90	; 144
    2db0:	d1 e0       	ldi	r29, 0x01	; 1
void AutoPark_action(void)
{
	u8 Continue_flag = 0;
	u32 count =0;
	u32 timeout = 0;
	RUN_STATE = 0;
    2db2:	aa 24       	eor	r10, r10
    2db4:	bb 24       	eor	r11, r11
    2db6:	65 01       	movw	r12, r10
    2db8:	02 c0       	rjmp	.+4      	; 0x2dbe <AutoPark_action+0x3e>
    2dba:	86 01       	movw	r16, r12
    2dbc:	75 01       	movw	r14, r10
	while(1)
	{
		//Step -1:	Turn your signal and find parking space.
		if(Auto_R_Flag == 0)
    2dbe:	80 91 21 02 	lds	r24, 0x0221
    2dc2:	88 23       	and	r24, r24
    2dc4:	91 f4       	brne	.+36     	; 0x2dea <AutoPark_action+0x6a>
		{
			Dio_WriteChannel(R_US_ECH_SWI, 1);
    2dc6:	87 e1       	ldi	r24, 0x17	; 23
    2dc8:	61 e0       	ldi	r22, 0x01	; 1
    2dca:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
			Dio_WriteChannel(R_US_VCC_SWI, 1);
    2dce:	87 e0       	ldi	r24, 0x07	; 7
    2dd0:	61 e0       	ldi	r22, 0x01	; 1
    2dd2:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
    2dd6:	94 01       	movw	r18, r8
    2dd8:	ce 01       	movw	r24, r28
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	f1 f7       	brne	.-4      	; 0x2dda <AutoPark_action+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dde:	21 50       	subi	r18, 0x01	; 1
    2de0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de2:	d1 f7       	brne	.-12     	; 0x2dd8 <AutoPark_action+0x58>
			_delay_ms(500);
			Auto_R_Flag = 1;
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	80 93 21 02 	sts	0x0221, r24
		}
		Ultra_Sonic_void_trigger(R_US_TRIGGER);
    2dea:	83 e1       	ldi	r24, 0x13	; 19
    2dec:	0e 94 3d 11 	call	0x227a	; 0x227a <Ultra_Sonic_void_trigger>
		DistanceRight = Ultra_Sonic_Distance_in_cm();
    2df0:	0e 94 32 11 	call	0x2264	; 0x2264 <Ultra_Sonic_Distance_in_cm>
    2df4:	90 93 1e 02 	sts	0x021E, r25
    2df8:	80 93 1d 02 	sts	0x021D, r24
		if (DistanceRight > 20)
    2dfc:	85 31       	cpi	r24, 0x15	; 21
    2dfe:	91 05       	cpc	r25, r1
    2e00:	30 f0       	brcs	.+12     	; 0x2e0e <AutoPark_action+0x8e>
		{
			count++;
    2e02:	08 94       	sec
    2e04:	e1 1c       	adc	r14, r1
    2e06:	f1 1c       	adc	r15, r1
    2e08:	01 1d       	adc	r16, r1
    2e0a:	11 1d       	adc	r17, r1
    2e0c:	02 c0       	rjmp	.+4      	; 0x2e12 <AutoPark_action+0x92>
			timeout = 0;
		}
		else if (DistanceRight < 20)
    2e0e:	44 97       	sbiw	r24, 0x14	; 20
    2e10:	a0 f2       	brcs	.-88     	; 0x2dba <AutoPark_action+0x3a>
			count = 0;
//			timeout++;
		}

		//Step -2:	STOP the vehicle in front of the empty space.
		if(count == 40)
    2e12:	88 e2       	ldi	r24, 0x28	; 40
    2e14:	e8 16       	cp	r14, r24
    2e16:	f1 04       	cpc	r15, r1
    2e18:	01 05       	cpc	r16, r1
    2e1a:	11 05       	cpc	r17, r1
    2e1c:	81 f6       	brne	.-96     	; 0x2dbe <AutoPark_action+0x3e>
		{
			do{
				SPI_voidTranseive(COND_STOP, &received);
    2e1e:	cf ed       	ldi	r28, 0xDF	; 223
    2e20:	d1 e0       	ldi	r29, 0x01	; 1
    2e22:	86 e6       	ldi	r24, 0x66	; 102
    2e24:	be 01       	movw	r22, r28
    2e26:	0e 94 32 0b 	call	0x1664	; 0x1664 <SPI_voidTranseive>
			}
			while(received != CHECK_HAND);
    2e2a:	80 91 df 01 	lds	r24, 0x01DF
    2e2e:	86 35       	cpi	r24, 0x56	; 86
    2e30:	c1 f7       	brne	.-16     	; 0x2e22 <AutoPark_action+0xa2>
			Continue_flag = 1;
			Auto_R_Flag = 0;
    2e32:	10 92 21 02 	sts	0x0221, r1
			Dio_WriteChannel(R_US_ECH_SWI, 0);
    2e36:	87 e1       	ldi	r24, 0x17	; 23
    2e38:	60 e0       	ldi	r22, 0x00	; 0
    2e3a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
			Dio_WriteChannel(R_US_VCC_SWI, 0);
    2e3e:	87 e0       	ldi	r24, 0x07	; 7
    2e40:	60 e0       	ldi	r22, 0x00	; 0
    2e42:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
		//Step -3: 	STEAR the wheel all the way to the right.
	}

	if (Continue_flag == 1)
	{
		Dio_WriteChannel(B_US_ECH_SWI, 1);
    2e46:	86 e1       	ldi	r24, 0x16	; 22
    2e48:	61 e0       	ldi	r22, 0x01	; 1
    2e4a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
		Dio_WriteChannel(B_US_VCC_SWI, 1);
    2e4e:	86 e0       	ldi	r24, 0x06	; 6
    2e50:	61 e0       	ldi	r22, 0x01	; 1
    2e52:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
    2e56:	28 e8       	ldi	r18, 0x88	; 136
    2e58:	33 e1       	ldi	r19, 0x13	; 19
    2e5a:	40 e9       	ldi	r20, 0x90	; 144
    2e5c:	51 e0       	ldi	r21, 0x01	; 1
    2e5e:	ca 01       	movw	r24, r20
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	f1 f7       	brne	.-4      	; 0x2e60 <AutoPark_action+0xe0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e64:	21 50       	subi	r18, 0x01	; 1
    2e66:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e68:	d1 f7       	brne	.-12     	; 0x2e5e <AutoPark_action+0xde>
		_delay_ms(500);

		//Step -4: 	BACKWARD until a specific distance
		stop_after_back_cm(40);
    2e6a:	88 e2       	ldi	r24, 0x28	; 40
    2e6c:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <stop_after_back_cm>

		//Step -5: 	STEAR the wheels back to normal

		//Step -6:	BACKWARD until a specific distance
		stop_after_back_cm(20);
    2e70:	84 e1       	ldi	r24, 0x14	; 20
    2e72:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <stop_after_back_cm>

		//Step -7: 	STEAR the wheel all the way to the left (opposite of Step -3)

		//Step -8: 	BACKWARD until a specific distance
		stop_after_back_cm(20);
    2e76:	84 e1       	ldi	r24, 0x14	; 20
    2e78:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <stop_after_back_cm>

	/******* OPTIONAL ******/
	//Step -9: 	STEAR the wheel all the way to the right / left. (opposite of Step -7)
	//Step-10:	BACKWARD until a specific distance

	RUN_STATE = 0;
    2e7c:	10 92 de 01 	sts	0x01DE, r1
	Dio_WriteChannel(B_US_ECH_SWI, 0);
    2e80:	86 e1       	ldi	r24, 0x16	; 22
    2e82:	60 e0       	ldi	r22, 0x00	; 0
    2e84:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	Dio_WriteChannel(B_US_VCC_SWI, 0);
    2e88:	86 e0       	ldi	r24, 0x06	; 6
    2e8a:	60 e0       	ldi	r22, 0x00	; 0
    2e8c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
	SET_BIT(_SPCR, 7);		// SPI INT ENABLE
    2e90:	ed e2       	ldi	r30, 0x2D	; 45
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	80 81       	ld	r24, Z
    2e96:	80 68       	ori	r24, 0x80	; 128
    2e98:	80 83       	st	Z, r24
}
    2e9a:	df 91       	pop	r29
    2e9c:	cf 91       	pop	r28
    2e9e:	1f 91       	pop	r17
    2ea0:	0f 91       	pop	r16
    2ea2:	ff 90       	pop	r15
    2ea4:	ef 90       	pop	r14
    2ea6:	df 90       	pop	r13
    2ea8:	cf 90       	pop	r12
    2eaa:	bf 90       	pop	r11
    2eac:	af 90       	pop	r10
    2eae:	9f 90       	pop	r9
    2eb0:	8f 90       	pop	r8
    2eb2:	08 95       	ret

00002eb4 <lane_action>:
		default: break;
	}
}

void lane_action(u8 X_lane)
{
    2eb4:	cf 93       	push	r28
    2eb6:	df 93       	push	r29
	switch (X_lane)
    2eb8:	82 30       	cpi	r24, 0x02	; 2
    2eba:	21 f0       	breq	.+8      	; 0x2ec4 <lane_action+0x10>
    2ebc:	83 30       	cpi	r24, 0x03	; 3
    2ebe:	09 f0       	breq	.+2      	; 0x2ec2 <lane_action+0xe>
    2ec0:	84 c1       	rjmp	.+776    	; 0x31ca <lane_action+0x316>
    2ec2:	c2 c0       	rjmp	.+388    	; 0x3048 <lane_action+0x194>
	{
		case OpsAvoid_rightlane:
			if(RightFlag == 0)
    2ec4:	80 91 1c 02 	lds	r24, 0x021C
    2ec8:	88 23       	and	r24, r24
    2eca:	e9 f4       	brne	.+58     	; 0x2f06 <lane_action+0x52>
			{
				Dio_WriteChannel(F_US_ECH_SWI, 1);	// switch ON
    2ecc:	84 e1       	ldi	r24, 0x14	; 20
    2ece:	61 e0       	ldi	r22, 0x01	; 1
    2ed0:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				Dio_WriteChannel(F_US_VCC_SWI, 1);
    2ed4:	84 e0       	ldi	r24, 0x04	; 4
    2ed6:	61 e0       	ldi	r22, 0x01	; 1
    2ed8:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				Dio_WriteChannel(L_US_ECH_SWI, 1);
    2edc:	85 e1       	ldi	r24, 0x15	; 21
    2ede:	61 e0       	ldi	r22, 0x01	; 1
    2ee0:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				Dio_WriteChannel(L_US_VCC_SWI, 1);
    2ee4:	85 e0       	ldi	r24, 0x05	; 5
    2ee6:	61 e0       	ldi	r22, 0x01	; 1
    2ee8:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
    2eec:	28 e8       	ldi	r18, 0x88	; 136
    2eee:	33 e1       	ldi	r19, 0x13	; 19
    2ef0:	40 e9       	ldi	r20, 0x90	; 144
    2ef2:	51 e0       	ldi	r21, 0x01	; 1
    2ef4:	ca 01       	movw	r24, r20
    2ef6:	01 97       	sbiw	r24, 0x01	; 1
    2ef8:	f1 f7       	brne	.-4      	; 0x2ef6 <lane_action+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2efa:	21 50       	subi	r18, 0x01	; 1
    2efc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efe:	d1 f7       	brne	.-12     	; 0x2ef4 <lane_action+0x40>
				_delay_ms(500);
				RightFlag = 1;
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	80 93 1c 02 	sts	0x021C, r24
			}
			Ultra_Sonic_void_trigger(F_US_TRIGGER);
    2f06:	80 e1       	ldi	r24, 0x10	; 16
    2f08:	0e 94 3d 11 	call	0x227a	; 0x227a <Ultra_Sonic_void_trigger>
			DistanceForward = Ultra_Sonic_Distance_in_cm();
    2f0c:	0e 94 32 11 	call	0x2264	; 0x2264 <Ultra_Sonic_Distance_in_cm>
    2f10:	90 93 17 02 	sts	0x0217, r25
    2f14:	80 93 16 02 	sts	0x0216, r24
			Ultra_Sonic_void_trigger(L_US_TRIGGER);
    2f18:	81 e1       	ldi	r24, 0x11	; 17
    2f1a:	0e 94 3d 11 	call	0x227a	; 0x227a <Ultra_Sonic_void_trigger>
			DistanceLeft = Ultra_Sonic_Distance_in_cm();
    2f1e:	0e 94 32 11 	call	0x2264	; 0x2264 <Ultra_Sonic_Distance_in_cm>
    2f22:	90 93 20 02 	sts	0x0220, r25
    2f26:	80 93 1f 02 	sts	0x021F, r24

			lcd4_set_cursor(4, 1);
    2f2a:	84 e0       	ldi	r24, 0x04	; 4
    2f2c:	61 e0       	ldi	r22, 0x01	; 1
    2f2e:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <lcd4_set_cursor>
			lcd4_disply_num(DistanceForward);
    2f32:	80 91 16 02 	lds	r24, 0x0216
    2f36:	90 91 17 02 	lds	r25, 0x0217
    2f3a:	0e 94 50 14 	call	0x28a0	; 0x28a0 <lcd4_disply_num>
			lcd4_disply_char('_');
    2f3e:	8f e5       	ldi	r24, 0x5F	; 95
    2f40:	0e 94 d7 13 	call	0x27ae	; 0x27ae <lcd4_disply_char>
			lcd4_disply_num(DistanceLeft);
    2f44:	80 91 1f 02 	lds	r24, 0x021F
    2f48:	90 91 20 02 	lds	r25, 0x0220
    2f4c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <lcd4_disply_num>

			// CONDITION 1 --> Emergency Stop
			if(DistanceForward < 20 && DistanceLeft < 20)
    2f50:	80 91 16 02 	lds	r24, 0x0216
    2f54:	90 91 17 02 	lds	r25, 0x0217
    2f58:	44 97       	sbiw	r24, 0x14	; 20
    2f5a:	08 f0       	brcs	.+2      	; 0x2f5e <lane_action+0xaa>
    2f5c:	36 c1       	rjmp	.+620    	; 0x31ca <lane_action+0x316>
    2f5e:	80 91 1f 02 	lds	r24, 0x021F
    2f62:	90 91 20 02 	lds	r25, 0x0220
    2f66:	44 97       	sbiw	r24, 0x14	; 20
    2f68:	b8 f5       	brcc	.+110    	; 0x2fd8 <lane_action+0x124>
			{
				RUN_STATE = 0;
    2f6a:	10 92 de 01 	sts	0x01DE, r1
				Dio_WriteChannel(F_US_ECH_SWI, 0);	// switch OFF
    2f6e:	84 e1       	ldi	r24, 0x14	; 20
    2f70:	60 e0       	ldi	r22, 0x00	; 0
    2f72:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				Dio_WriteChannel(F_US_VCC_SWI, 0);
    2f76:	84 e0       	ldi	r24, 0x04	; 4
    2f78:	60 e0       	ldi	r22, 0x00	; 0
    2f7a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				Dio_WriteChannel(L_US_ECH_SWI, 0);
    2f7e:	85 e1       	ldi	r24, 0x15	; 21
    2f80:	60 e0       	ldi	r22, 0x00	; 0
    2f82:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				Dio_WriteChannel(L_US_VCC_SWI, 0);
    2f86:	85 e0       	ldi	r24, 0x05	; 5
    2f88:	60 e0       	ldi	r22, 0x00	; 0
    2f8a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				RightFlag = 0;
    2f8e:	10 92 1c 02 	sts	0x021C, r1
				CLR_BIT(_SPCR, 7);		// SPI INT DISABE
    2f92:	ed e2       	ldi	r30, 0x2D	; 45
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	8f 77       	andi	r24, 0x7F	; 127
    2f9a:	80 83       	st	Z, r24
				Dio_WriteChannel(EXT_INT_PIN, 0);	//Make an EXTINT to master
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	60 e0       	ldi	r22, 0x00	; 0
    2fa0:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				do{
					SPI_voidTranseive(COND_STOP, &received);
    2fa4:	cf ed       	ldi	r28, 0xDF	; 223
    2fa6:	d1 e0       	ldi	r29, 0x01	; 1
    2fa8:	86 e6       	ldi	r24, 0x66	; 102
    2faa:	be 01       	movw	r22, r28
    2fac:	0e 94 32 0b 	call	0x1664	; 0x1664 <SPI_voidTranseive>
				}
				while(received != CHECK_HAND);
    2fb0:	80 91 df 01 	lds	r24, 0x01DF
    2fb4:	86 35       	cpi	r24, 0x56	; 86
    2fb6:	c1 f7       	brne	.-16     	; 0x2fa8 <lane_action+0xf4>
				SET_BIT(_SPCR, 7);		// SPI INT ENABE
    2fb8:	ed e2       	ldi	r30, 0x2D	; 45
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	80 81       	ld	r24, Z
    2fbe:	80 68       	ori	r24, 0x80	; 128
    2fc0:	80 83       	st	Z, r24
				Dio_WriteChannel(EXT_INT_PIN, 1);
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	61 e0       	ldi	r22, 0x01	; 1
    2fc6:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
			}

			// CONDITION 2 --> Avoid the Car to left
			if(DistanceForward < 20 && DistanceLeft > 50)
    2fca:	80 91 16 02 	lds	r24, 0x0216
    2fce:	90 91 17 02 	lds	r25, 0x0217
    2fd2:	44 97       	sbiw	r24, 0x14	; 20
    2fd4:	08 f0       	brcs	.+2      	; 0x2fd8 <lane_action+0x124>
    2fd6:	f9 c0       	rjmp	.+498    	; 0x31ca <lane_action+0x316>
    2fd8:	80 91 1f 02 	lds	r24, 0x021F
    2fdc:	90 91 20 02 	lds	r25, 0x0220
    2fe0:	c3 97       	sbiw	r24, 0x33	; 51
    2fe2:	08 f4       	brcc	.+2      	; 0x2fe6 <lane_action+0x132>
    2fe4:	f2 c0       	rjmp	.+484    	; 0x31ca <lane_action+0x316>
			{
				RUN_STATE = 0;
    2fe6:	10 92 de 01 	sts	0x01DE, r1
				RightFlag = 0;
    2fea:	10 92 1c 02 	sts	0x021C, r1
				Dio_WriteChannel(F_US_ECH_SWI, 0);	// switch OFF
    2fee:	84 e1       	ldi	r24, 0x14	; 20
    2ff0:	60 e0       	ldi	r22, 0x00	; 0
    2ff2:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				Dio_WriteChannel(F_US_VCC_SWI, 0);
    2ff6:	84 e0       	ldi	r24, 0x04	; 4
    2ff8:	60 e0       	ldi	r22, 0x00	; 0
    2ffa:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				Dio_WriteChannel(L_US_ECH_SWI, 0);
    2ffe:	85 e1       	ldi	r24, 0x15	; 21
    3000:	60 e0       	ldi	r22, 0x00	; 0
    3002:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				Dio_WriteChannel(L_US_VCC_SWI, 0);
    3006:	85 e0       	ldi	r24, 0x05	; 5
    3008:	60 e0       	ldi	r22, 0x00	; 0
    300a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				CLR_BIT(_SPCR, 7);			// SPI INT DISABE
    300e:	ed e2       	ldi	r30, 0x2D	; 45
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	80 81       	ld	r24, Z
    3014:	8f 77       	andi	r24, 0x7F	; 127
    3016:	80 83       	st	Z, r24
				Dio_WriteChannel(EXT_INT_PIN, 0);	//Make an EXTINT to master
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	60 e0       	ldi	r22, 0x00	; 0
    301c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				do{
					SPI_voidTranseive(COND_AvoidToL, &received);
    3020:	cf ed       	ldi	r28, 0xDF	; 223
    3022:	d1 e0       	ldi	r29, 0x01	; 1
    3024:	87 e7       	ldi	r24, 0x77	; 119
    3026:	be 01       	movw	r22, r28
    3028:	0e 94 32 0b 	call	0x1664	; 0x1664 <SPI_voidTranseive>
				}
				while(received != CHECK_HAND);
    302c:	80 91 df 01 	lds	r24, 0x01DF
    3030:	86 35       	cpi	r24, 0x56	; 86
    3032:	c1 f7       	brne	.-16     	; 0x3024 <lane_action+0x170>
				SET_BIT(_SPCR, 7);		// SPI INT ENABE
    3034:	ed e2       	ldi	r30, 0x2D	; 45
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	80 81       	ld	r24, Z
    303a:	80 68       	ori	r24, 0x80	; 128
    303c:	80 83       	st	Z, r24
				Dio_WriteChannel(EXT_INT_PIN, 1);
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	61 e0       	ldi	r22, 0x01	; 1
    3042:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
    3046:	c1 c0       	rjmp	.+386    	; 0x31ca <lane_action+0x316>
			}
			break;
		case OpsAvoid_leftlane:
			if(LeftFlag == 0)
    3048:	80 91 18 02 	lds	r24, 0x0218
    304c:	88 23       	and	r24, r24
    304e:	e9 f4       	brne	.+58     	; 0x308a <lane_action+0x1d6>
			{
				Dio_WriteChannel(F_US_ECH_SWI, 1);	// switch ON
    3050:	84 e1       	ldi	r24, 0x14	; 20
    3052:	61 e0       	ldi	r22, 0x01	; 1
    3054:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				Dio_WriteChannel(F_US_VCC_SWI, 1);
    3058:	84 e0       	ldi	r24, 0x04	; 4
    305a:	61 e0       	ldi	r22, 0x01	; 1
    305c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				Dio_WriteChannel(R_US_ECH_SWI, 1);
    3060:	87 e1       	ldi	r24, 0x17	; 23
    3062:	61 e0       	ldi	r22, 0x01	; 1
    3064:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				Dio_WriteChannel(R_US_VCC_SWI, 1);
    3068:	87 e0       	ldi	r24, 0x07	; 7
    306a:	61 e0       	ldi	r22, 0x01	; 1
    306c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
    3070:	28 e8       	ldi	r18, 0x88	; 136
    3072:	33 e1       	ldi	r19, 0x13	; 19
    3074:	40 e9       	ldi	r20, 0x90	; 144
    3076:	51 e0       	ldi	r21, 0x01	; 1
    3078:	ca 01       	movw	r24, r20
    307a:	01 97       	sbiw	r24, 0x01	; 1
    307c:	f1 f7       	brne	.-4      	; 0x307a <lane_action+0x1c6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    307e:	21 50       	subi	r18, 0x01	; 1
    3080:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3082:	d1 f7       	brne	.-12     	; 0x3078 <lane_action+0x1c4>
				_delay_ms(500);
				LeftFlag = 1;
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	80 93 18 02 	sts	0x0218, r24
			}
			Ultra_Sonic_void_trigger(F_US_TRIGGER);
    308a:	80 e1       	ldi	r24, 0x10	; 16
    308c:	0e 94 3d 11 	call	0x227a	; 0x227a <Ultra_Sonic_void_trigger>
			DistanceForward = Ultra_Sonic_Distance_in_cm();
    3090:	0e 94 32 11 	call	0x2264	; 0x2264 <Ultra_Sonic_Distance_in_cm>
    3094:	90 93 17 02 	sts	0x0217, r25
    3098:	80 93 16 02 	sts	0x0216, r24
			Ultra_Sonic_void_trigger(R_US_TRIGGER);
    309c:	83 e1       	ldi	r24, 0x13	; 19
    309e:	0e 94 3d 11 	call	0x227a	; 0x227a <Ultra_Sonic_void_trigger>
			DistanceRight = Ultra_Sonic_Distance_in_cm();
    30a2:	0e 94 32 11 	call	0x2264	; 0x2264 <Ultra_Sonic_Distance_in_cm>
    30a6:	90 93 1e 02 	sts	0x021E, r25
    30aa:	80 93 1d 02 	sts	0x021D, r24

			lcd4_set_cursor(4, 1);
    30ae:	84 e0       	ldi	r24, 0x04	; 4
    30b0:	61 e0       	ldi	r22, 0x01	; 1
    30b2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <lcd4_set_cursor>
			lcd4_disply_num(DistanceForward);
    30b6:	80 91 16 02 	lds	r24, 0x0216
    30ba:	90 91 17 02 	lds	r25, 0x0217
    30be:	0e 94 50 14 	call	0x28a0	; 0x28a0 <lcd4_disply_num>
			lcd4_disply_char('_');
    30c2:	8f e5       	ldi	r24, 0x5F	; 95
    30c4:	0e 94 d7 13 	call	0x27ae	; 0x27ae <lcd4_disply_char>
			lcd4_disply_num(DistanceRight);
    30c8:	80 91 1d 02 	lds	r24, 0x021D
    30cc:	90 91 1e 02 	lds	r25, 0x021E
    30d0:	0e 94 50 14 	call	0x28a0	; 0x28a0 <lcd4_disply_num>

			// CONDITION 1 --> Emergency Stop
			if(DistanceForward < 20 && DistanceRight < 20)
    30d4:	80 91 16 02 	lds	r24, 0x0216
    30d8:	90 91 17 02 	lds	r25, 0x0217
    30dc:	44 97       	sbiw	r24, 0x14	; 20
    30de:	08 f0       	brcs	.+2      	; 0x30e2 <lane_action+0x22e>
    30e0:	74 c0       	rjmp	.+232    	; 0x31ca <lane_action+0x316>
    30e2:	80 91 1d 02 	lds	r24, 0x021D
    30e6:	90 91 1e 02 	lds	r25, 0x021E
    30ea:	44 97       	sbiw	r24, 0x14	; 20
    30ec:	b0 f5       	brcc	.+108    	; 0x315a <lane_action+0x2a6>
			{
				RUN_STATE = 0;
    30ee:	10 92 de 01 	sts	0x01DE, r1
				Dio_WriteChannel(F_US_ECH_SWI, 0);	// switch OFF
    30f2:	84 e1       	ldi	r24, 0x14	; 20
    30f4:	60 e0       	ldi	r22, 0x00	; 0
    30f6:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				Dio_WriteChannel(F_US_VCC_SWI, 0);
    30fa:	84 e0       	ldi	r24, 0x04	; 4
    30fc:	60 e0       	ldi	r22, 0x00	; 0
    30fe:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				Dio_WriteChannel(R_US_ECH_SWI, 0);
    3102:	87 e1       	ldi	r24, 0x17	; 23
    3104:	60 e0       	ldi	r22, 0x00	; 0
    3106:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				Dio_WriteChannel(R_US_VCC_SWI, 0);
    310a:	87 e0       	ldi	r24, 0x07	; 7
    310c:	60 e0       	ldi	r22, 0x00	; 0
    310e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				LeftFlag = 0;
    3112:	10 92 18 02 	sts	0x0218, r1
				CLR_BIT(_SPCR, 7);		// SPI INT DISABE
    3116:	ed e2       	ldi	r30, 0x2D	; 45
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	80 81       	ld	r24, Z
    311c:	8f 77       	andi	r24, 0x7F	; 127
    311e:	80 83       	st	Z, r24
				Dio_WriteChannel(EXT_INT_PIN, 0);	//Make an EXTINT to master
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	60 e0       	ldi	r22, 0x00	; 0
    3124:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				do{
					SPI_voidTranseive(COND_STOP, &received);
    3128:	cf ed       	ldi	r28, 0xDF	; 223
    312a:	d1 e0       	ldi	r29, 0x01	; 1
    312c:	86 e6       	ldi	r24, 0x66	; 102
    312e:	be 01       	movw	r22, r28
    3130:	0e 94 32 0b 	call	0x1664	; 0x1664 <SPI_voidTranseive>
				}
				while(received != CHECK_HAND);
    3134:	80 91 df 01 	lds	r24, 0x01DF
    3138:	86 35       	cpi	r24, 0x56	; 86
    313a:	c1 f7       	brne	.-16     	; 0x312c <lane_action+0x278>
				SET_BIT(_SPCR, 7);		// SPI INT ENABE
    313c:	ed e2       	ldi	r30, 0x2D	; 45
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	80 81       	ld	r24, Z
    3142:	80 68       	ori	r24, 0x80	; 128
    3144:	80 83       	st	Z, r24
				Dio_WriteChannel(EXT_INT_PIN, 1);
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	61 e0       	ldi	r22, 0x01	; 1
    314a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
			}

			// CONDITION 2 --> Avoid the Car to Right
			if(DistanceForward < 20 && DistanceRight > 20)
    314e:	80 91 16 02 	lds	r24, 0x0216
    3152:	90 91 17 02 	lds	r25, 0x0217
    3156:	44 97       	sbiw	r24, 0x14	; 20
    3158:	c0 f5       	brcc	.+112    	; 0x31ca <lane_action+0x316>
    315a:	80 91 1d 02 	lds	r24, 0x021D
    315e:	90 91 1e 02 	lds	r25, 0x021E
    3162:	45 97       	sbiw	r24, 0x15	; 21
    3164:	90 f1       	brcs	.+100    	; 0x31ca <lane_action+0x316>
			{
				RUN_STATE = 0;
    3166:	10 92 de 01 	sts	0x01DE, r1
				LeftFlag = 0;
    316a:	10 92 18 02 	sts	0x0218, r1
				Dio_WriteChannel(F_US_ECH_SWI, 0);	// switch OFF
    316e:	84 e1       	ldi	r24, 0x14	; 20
    3170:	60 e0       	ldi	r22, 0x00	; 0
    3172:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				Dio_WriteChannel(F_US_VCC_SWI, 0);
    3176:	84 e0       	ldi	r24, 0x04	; 4
    3178:	60 e0       	ldi	r22, 0x00	; 0
    317a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				Dio_WriteChannel(R_US_ECH_SWI, 0);
    317e:	87 e1       	ldi	r24, 0x17	; 23
    3180:	60 e0       	ldi	r22, 0x00	; 0
    3182:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				Dio_WriteChannel(R_US_VCC_SWI, 0);
    3186:	87 e0       	ldi	r24, 0x07	; 7
    3188:	60 e0       	ldi	r22, 0x00	; 0
    318a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				lcd4_CLR();
    318e:	0e 94 fd 12 	call	0x25fa	; 0x25fa <lcd4_CLR>
				CLR_BIT(_SPCR, 7);			// SPI INT DISABE
    3192:	ed e2       	ldi	r30, 0x2D	; 45
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	80 81       	ld	r24, Z
    3198:	8f 77       	andi	r24, 0x7F	; 127
    319a:	80 83       	st	Z, r24
				Dio_WriteChannel(EXT_INT_PIN, 0);	//Make an EXTINT to master
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	60 e0       	ldi	r22, 0x00	; 0
    31a0:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
				do{
					SPI_voidTranseive(COND_AvoidToR, &received);
    31a4:	cf ed       	ldi	r28, 0xDF	; 223
    31a6:	d1 e0       	ldi	r29, 0x01	; 1
    31a8:	88 e8       	ldi	r24, 0x88	; 136
    31aa:	be 01       	movw	r22, r28
    31ac:	0e 94 32 0b 	call	0x1664	; 0x1664 <SPI_voidTranseive>
				}
				while(received != CHECK_HAND);
    31b0:	80 91 df 01 	lds	r24, 0x01DF
    31b4:	86 35       	cpi	r24, 0x56	; 86
    31b6:	c1 f7       	brne	.-16     	; 0x31a8 <lane_action+0x2f4>
				SET_BIT(_SPCR, 7);		// SPI INT ENABE
    31b8:	ed e2       	ldi	r30, 0x2D	; 45
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	80 81       	ld	r24, Z
    31be:	80 68       	ori	r24, 0x80	; 128
    31c0:	80 83       	st	Z, r24
				Dio_WriteChannel(EXT_INT_PIN, 1);
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	61 e0       	ldi	r22, 0x01	; 1
    31c6:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
			}
			break;
		default: break;
	}
}
    31ca:	df 91       	pop	r29
    31cc:	cf 91       	pop	r28
    31ce:	08 95       	ret

000031d0 <ACT_SPI>:

	}
}

void ACT_SPI(u8 Copy_u8Recrived)
{
    31d0:	1f 93       	push	r17
    31d2:	18 2f       	mov	r17, r24
	lcd4_CLR();
    31d4:	0e 94 fd 12 	call	0x25fa	; 0x25fa <lcd4_CLR>
	lcd4_disply_num(Copy_u8Recrived);
    31d8:	81 2f       	mov	r24, r17
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	0e 94 50 14 	call	0x28a0	; 0x28a0 <lcd4_disply_num>

	switch(Copy_u8Recrived)
    31e0:	15 33       	cpi	r17, 0x35	; 53
    31e2:	91 f0       	breq	.+36     	; 0x3208 <ACT_SPI+0x38>
    31e4:	19 39       	cpi	r17, 0x99	; 153
    31e6:	19 f0       	breq	.+6      	; 0x31ee <ACT_SPI+0x1e>
    31e8:	14 33       	cpi	r17, 0x34	; 52
    31ea:	89 f4       	brne	.+34     	; 0x320e <ACT_SPI+0x3e>
    31ec:	09 c0       	rjmp	.+18     	; 0x3200 <ACT_SPI+0x30>
	{
		case STATE_AUTO_PARK:
			RUN_STATE = AutoParkState;
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	80 93 de 01 	sts	0x01DE, r24
			CLR_BIT(_SPCR, 7);		// SPI INT DISABE
    31f4:	ed e2       	ldi	r30, 0x2D	; 45
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	80 81       	ld	r24, Z
    31fa:	8f 77       	andi	r24, 0x7F	; 127
    31fc:	80 83       	st	Z, r24
    31fe:	07 c0       	rjmp	.+14     	; 0x320e <ACT_SPI+0x3e>
			break;
		case STATE_AVOID_lane_isR:
			RUN_STATE = OpsAvoid_rightlane;
    3200:	82 e0       	ldi	r24, 0x02	; 2
    3202:	80 93 de 01 	sts	0x01DE, r24
    3206:	03 c0       	rjmp	.+6      	; 0x320e <ACT_SPI+0x3e>
			break;
		case STATE_AVOID_lane_isL:
			RUN_STATE = OpsAvoid_leftlane;
    3208:	83 e0       	ldi	r24, 0x03	; 3
    320a:	80 93 de 01 	sts	0x01DE, r24
			break;
		default: break;
	}
}
    320e:	1f 91       	pop	r17
    3210:	08 95       	ret

00003212 <main>:
static void stop_after_back_cm (u8 distance);


int main()
{
	Port_Init(pins);
    3212:	8c e6       	ldi	r24, 0x6C	; 108
    3214:	91 e0       	ldi	r25, 0x01	; 1
    3216:	0e 94 83 0b 	call	0x1706	; 0x1706 <Port_Init>
	GI_voidEnable();
    321a:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <GI_voidEnable>
	lcd4_Init();
    321e:	0e 94 07 13 	call	0x260e	; 0x260e <lcd4_Init>
	ICU_voidInit();
    3222:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <ICU_voidInit>
	SPI_voidInit();
    3226:	0e 94 20 0b 	call	0x1640	; 0x1640 <SPI_voidInit>
	lcd4_Init();
    322a:	0e 94 07 13 	call	0x260e	; 0x260e <lcd4_Init>

	Dio_WriteChannel(EXT_INT_PIN, 1);
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	61 e0       	ldi	r22, 0x01	; 1
    3232:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Dio_WriteChannel>
    3236:	80 e2       	ldi	r24, 0x20	; 32
    3238:	93 e0       	ldi	r25, 0x03	; 3
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <main+0x28>

	_delay_us(200);
	SPI_voidTransmit_Async(0, ACT_SPI);
    323e:	80 e0       	ldi	r24, 0x00	; 0
    3240:	68 ee       	ldi	r22, 0xE8	; 232
    3242:	78 e1       	ldi	r23, 0x18	; 24
    3244:	0e 94 45 0b 	call	0x168a	; 0x168a <SPI_voidTransmit_Async>

	while(1)
	{
		switch(RUN_STATE)
    3248:	80 91 de 01 	lds	r24, 0x01DE
    324c:	82 30       	cpi	r24, 0x02	; 2
    324e:	29 f0       	breq	.+10     	; 0x325a <main+0x48>
    3250:	83 30       	cpi	r24, 0x03	; 3
    3252:	39 f0       	breq	.+14     	; 0x3262 <main+0x50>
    3254:	81 30       	cpi	r24, 0x01	; 1
    3256:	d1 f7       	brne	.-12     	; 0x324c <main+0x3a>
    3258:	08 c0       	rjmp	.+16     	; 0x326a <main+0x58>
		{
			case OpsAvoid_rightlane:
				lane_action(OpsAvoid_rightlane);
    325a:	82 e0       	ldi	r24, 0x02	; 2
    325c:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <lane_action>
    3260:	f3 cf       	rjmp	.-26     	; 0x3248 <main+0x36>
				break;
			case OpsAvoid_leftlane:
				lane_action(OpsAvoid_leftlane);
    3262:	83 e0       	ldi	r24, 0x03	; 3
    3264:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <lane_action>
    3268:	ef cf       	rjmp	.-34     	; 0x3248 <main+0x36>
				break;
			case AutoParkState:
				AutoPark_action();
    326a:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <AutoPark_action>
    326e:	ec cf       	rjmp	.-40     	; 0x3248 <main+0x36>

00003270 <__mulsi3>:
    3270:	62 9f       	mul	r22, r18
    3272:	d0 01       	movw	r26, r0
    3274:	73 9f       	mul	r23, r19
    3276:	f0 01       	movw	r30, r0
    3278:	82 9f       	mul	r24, r18
    327a:	e0 0d       	add	r30, r0
    327c:	f1 1d       	adc	r31, r1
    327e:	64 9f       	mul	r22, r20
    3280:	e0 0d       	add	r30, r0
    3282:	f1 1d       	adc	r31, r1
    3284:	92 9f       	mul	r25, r18
    3286:	f0 0d       	add	r31, r0
    3288:	83 9f       	mul	r24, r19
    328a:	f0 0d       	add	r31, r0
    328c:	74 9f       	mul	r23, r20
    328e:	f0 0d       	add	r31, r0
    3290:	65 9f       	mul	r22, r21
    3292:	f0 0d       	add	r31, r0
    3294:	99 27       	eor	r25, r25
    3296:	72 9f       	mul	r23, r18
    3298:	b0 0d       	add	r27, r0
    329a:	e1 1d       	adc	r30, r1
    329c:	f9 1f       	adc	r31, r25
    329e:	63 9f       	mul	r22, r19
    32a0:	b0 0d       	add	r27, r0
    32a2:	e1 1d       	adc	r30, r1
    32a4:	f9 1f       	adc	r31, r25
    32a6:	bd 01       	movw	r22, r26
    32a8:	cf 01       	movw	r24, r30
    32aa:	11 24       	eor	r1, r1
    32ac:	08 95       	ret

000032ae <__udivmodsi4>:
    32ae:	a1 e2       	ldi	r26, 0x21	; 33
    32b0:	1a 2e       	mov	r1, r26
    32b2:	aa 1b       	sub	r26, r26
    32b4:	bb 1b       	sub	r27, r27
    32b6:	fd 01       	movw	r30, r26
    32b8:	0d c0       	rjmp	.+26     	; 0x32d4 <__udivmodsi4_ep>

000032ba <__udivmodsi4_loop>:
    32ba:	aa 1f       	adc	r26, r26
    32bc:	bb 1f       	adc	r27, r27
    32be:	ee 1f       	adc	r30, r30
    32c0:	ff 1f       	adc	r31, r31
    32c2:	a2 17       	cp	r26, r18
    32c4:	b3 07       	cpc	r27, r19
    32c6:	e4 07       	cpc	r30, r20
    32c8:	f5 07       	cpc	r31, r21
    32ca:	20 f0       	brcs	.+8      	; 0x32d4 <__udivmodsi4_ep>
    32cc:	a2 1b       	sub	r26, r18
    32ce:	b3 0b       	sbc	r27, r19
    32d0:	e4 0b       	sbc	r30, r20
    32d2:	f5 0b       	sbc	r31, r21

000032d4 <__udivmodsi4_ep>:
    32d4:	66 1f       	adc	r22, r22
    32d6:	77 1f       	adc	r23, r23
    32d8:	88 1f       	adc	r24, r24
    32da:	99 1f       	adc	r25, r25
    32dc:	1a 94       	dec	r1
    32de:	69 f7       	brne	.-38     	; 0x32ba <__udivmodsi4_loop>
    32e0:	60 95       	com	r22
    32e2:	70 95       	com	r23
    32e4:	80 95       	com	r24
    32e6:	90 95       	com	r25
    32e8:	9b 01       	movw	r18, r22
    32ea:	ac 01       	movw	r20, r24
    32ec:	bd 01       	movw	r22, r26
    32ee:	cf 01       	movw	r24, r30
    32f0:	08 95       	ret

000032f2 <__prologue_saves__>:
    32f2:	2f 92       	push	r2
    32f4:	3f 92       	push	r3
    32f6:	4f 92       	push	r4
    32f8:	5f 92       	push	r5
    32fa:	6f 92       	push	r6
    32fc:	7f 92       	push	r7
    32fe:	8f 92       	push	r8
    3300:	9f 92       	push	r9
    3302:	af 92       	push	r10
    3304:	bf 92       	push	r11
    3306:	cf 92       	push	r12
    3308:	df 92       	push	r13
    330a:	ef 92       	push	r14
    330c:	ff 92       	push	r15
    330e:	0f 93       	push	r16
    3310:	1f 93       	push	r17
    3312:	cf 93       	push	r28
    3314:	df 93       	push	r29
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	ca 1b       	sub	r28, r26
    331c:	db 0b       	sbc	r29, r27
    331e:	0f b6       	in	r0, 0x3f	; 63
    3320:	f8 94       	cli
    3322:	de bf       	out	0x3e, r29	; 62
    3324:	0f be       	out	0x3f, r0	; 63
    3326:	cd bf       	out	0x3d, r28	; 61
    3328:	09 94       	ijmp

0000332a <__epilogue_restores__>:
    332a:	2a 88       	ldd	r2, Y+18	; 0x12
    332c:	39 88       	ldd	r3, Y+17	; 0x11
    332e:	48 88       	ldd	r4, Y+16	; 0x10
    3330:	5f 84       	ldd	r5, Y+15	; 0x0f
    3332:	6e 84       	ldd	r6, Y+14	; 0x0e
    3334:	7d 84       	ldd	r7, Y+13	; 0x0d
    3336:	8c 84       	ldd	r8, Y+12	; 0x0c
    3338:	9b 84       	ldd	r9, Y+11	; 0x0b
    333a:	aa 84       	ldd	r10, Y+10	; 0x0a
    333c:	b9 84       	ldd	r11, Y+9	; 0x09
    333e:	c8 84       	ldd	r12, Y+8	; 0x08
    3340:	df 80       	ldd	r13, Y+7	; 0x07
    3342:	ee 80       	ldd	r14, Y+6	; 0x06
    3344:	fd 80       	ldd	r15, Y+5	; 0x05
    3346:	0c 81       	ldd	r16, Y+4	; 0x04
    3348:	1b 81       	ldd	r17, Y+3	; 0x03
    334a:	aa 81       	ldd	r26, Y+2	; 0x02
    334c:	b9 81       	ldd	r27, Y+1	; 0x01
    334e:	ce 0f       	add	r28, r30
    3350:	d1 1d       	adc	r29, r1
    3352:	0f b6       	in	r0, 0x3f	; 63
    3354:	f8 94       	cli
    3356:	de bf       	out	0x3e, r29	; 62
    3358:	0f be       	out	0x3f, r0	; 63
    335a:	cd bf       	out	0x3d, r28	; 61
    335c:	ed 01       	movw	r28, r26
    335e:	08 95       	ret

00003360 <atoi>:
    3360:	fc 01       	movw	r30, r24
    3362:	88 27       	eor	r24, r24
    3364:	99 27       	eor	r25, r25
    3366:	e8 94       	clt
    3368:	21 91       	ld	r18, Z+
    336a:	20 32       	cpi	r18, 0x20	; 32
    336c:	e9 f3       	breq	.-6      	; 0x3368 <atoi+0x8>
    336e:	29 30       	cpi	r18, 0x09	; 9
    3370:	10 f0       	brcs	.+4      	; 0x3376 <atoi+0x16>
    3372:	2e 30       	cpi	r18, 0x0E	; 14
    3374:	c8 f3       	brcs	.-14     	; 0x3368 <atoi+0x8>
    3376:	2b 32       	cpi	r18, 0x2B	; 43
    3378:	41 f0       	breq	.+16     	; 0x338a <atoi+0x2a>
    337a:	2d 32       	cpi	r18, 0x2D	; 45
    337c:	39 f4       	brne	.+14     	; 0x338c <atoi+0x2c>
    337e:	68 94       	set
    3380:	04 c0       	rjmp	.+8      	; 0x338a <atoi+0x2a>
    3382:	0e 94 ce 19 	call	0x339c	; 0x339c <__mulhi_const_10>
    3386:	82 0f       	add	r24, r18
    3388:	91 1d       	adc	r25, r1
    338a:	21 91       	ld	r18, Z+
    338c:	20 53       	subi	r18, 0x30	; 48
    338e:	2a 30       	cpi	r18, 0x0A	; 10
    3390:	c0 f3       	brcs	.-16     	; 0x3382 <atoi+0x22>
    3392:	1e f4       	brtc	.+6      	; 0x339a <atoi+0x3a>
    3394:	90 95       	com	r25
    3396:	81 95       	neg	r24
    3398:	9f 4f       	sbci	r25, 0xFF	; 255
    339a:	08 95       	ret

0000339c <__mulhi_const_10>:
    339c:	7a e0       	ldi	r23, 0x0A	; 10
    339e:	97 9f       	mul	r25, r23
    33a0:	90 2d       	mov	r25, r0
    33a2:	87 9f       	mul	r24, r23
    33a4:	80 2d       	mov	r24, r0
    33a6:	91 0d       	add	r25, r1
    33a8:	11 24       	eor	r1, r1
    33aa:	08 95       	ret

000033ac <snprintf>:
    33ac:	ae e0       	ldi	r26, 0x0E	; 14
    33ae:	b0 e0       	ldi	r27, 0x00	; 0
    33b0:	ec ed       	ldi	r30, 0xDC	; 220
    33b2:	f9 e1       	ldi	r31, 0x19	; 25
    33b4:	0c 94 87 19 	jmp	0x330e	; 0x330e <__prologue_saves__+0x1c>
    33b8:	0d 89       	ldd	r16, Y+21	; 0x15
    33ba:	1e 89       	ldd	r17, Y+22	; 0x16
    33bc:	8f 89       	ldd	r24, Y+23	; 0x17
    33be:	98 8d       	ldd	r25, Y+24	; 0x18
    33c0:	97 ff       	sbrs	r25, 7
    33c2:	02 c0       	rjmp	.+4      	; 0x33c8 <snprintf+0x1c>
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	90 e8       	ldi	r25, 0x80	; 128
    33c8:	01 97       	sbiw	r24, 0x01	; 1
    33ca:	9e 83       	std	Y+6, r25	; 0x06
    33cc:	8d 83       	std	Y+5, r24	; 0x05
    33ce:	1a 83       	std	Y+2, r17	; 0x02
    33d0:	09 83       	std	Y+1, r16	; 0x01
    33d2:	86 e0       	ldi	r24, 0x06	; 6
    33d4:	8c 83       	std	Y+4, r24	; 0x04
    33d6:	9e 01       	movw	r18, r28
    33d8:	25 5e       	subi	r18, 0xE5	; 229
    33da:	3f 4f       	sbci	r19, 0xFF	; 255
    33dc:	ce 01       	movw	r24, r28
    33de:	01 96       	adiw	r24, 0x01	; 1
    33e0:	69 8d       	ldd	r22, Y+25	; 0x19
    33e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33e4:	a9 01       	movw	r20, r18
    33e6:	0e 94 07 1a 	call	0x340e	; 0x340e <vfprintf>
    33ea:	4d 81       	ldd	r20, Y+5	; 0x05
    33ec:	5e 81       	ldd	r21, Y+6	; 0x06
    33ee:	57 fd       	sbrc	r21, 7
    33f0:	0a c0       	rjmp	.+20     	; 0x3406 <snprintf+0x5a>
    33f2:	2f 81       	ldd	r18, Y+7	; 0x07
    33f4:	38 85       	ldd	r19, Y+8	; 0x08
    33f6:	42 17       	cp	r20, r18
    33f8:	53 07       	cpc	r21, r19
    33fa:	0c f4       	brge	.+2      	; 0x33fe <snprintf+0x52>
    33fc:	9a 01       	movw	r18, r20
    33fe:	02 0f       	add	r16, r18
    3400:	13 1f       	adc	r17, r19
    3402:	f8 01       	movw	r30, r16
    3404:	10 82       	st	Z, r1
    3406:	2e 96       	adiw	r28, 0x0e	; 14
    3408:	e4 e0       	ldi	r30, 0x04	; 4
    340a:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__epilogue_restores__+0x1c>

0000340e <vfprintf>:
    340e:	ab e0       	ldi	r26, 0x0B	; 11
    3410:	b0 e0       	ldi	r27, 0x00	; 0
    3412:	ed e0       	ldi	r30, 0x0D	; 13
    3414:	fa e1       	ldi	r31, 0x1A	; 26
    3416:	0c 94 79 19 	jmp	0x32f2	; 0x32f2 <__prologue_saves__>
    341a:	3c 01       	movw	r6, r24
    341c:	2b 01       	movw	r4, r22
    341e:	5a 01       	movw	r10, r20
    3420:	fc 01       	movw	r30, r24
    3422:	17 82       	std	Z+7, r1	; 0x07
    3424:	16 82       	std	Z+6, r1	; 0x06
    3426:	83 81       	ldd	r24, Z+3	; 0x03
    3428:	81 fd       	sbrc	r24, 1
    342a:	03 c0       	rjmp	.+6      	; 0x3432 <vfprintf+0x24>
    342c:	6f ef       	ldi	r22, 0xFF	; 255
    342e:	7f ef       	ldi	r23, 0xFF	; 255
    3430:	c6 c1       	rjmp	.+908    	; 0x37be <vfprintf+0x3b0>
    3432:	9a e0       	ldi	r25, 0x0A	; 10
    3434:	89 2e       	mov	r8, r25
    3436:	1e 01       	movw	r2, r28
    3438:	08 94       	sec
    343a:	21 1c       	adc	r2, r1
    343c:	31 1c       	adc	r3, r1
    343e:	f3 01       	movw	r30, r6
    3440:	23 81       	ldd	r18, Z+3	; 0x03
    3442:	f2 01       	movw	r30, r4
    3444:	23 fd       	sbrc	r18, 3
    3446:	85 91       	lpm	r24, Z+
    3448:	23 ff       	sbrs	r18, 3
    344a:	81 91       	ld	r24, Z+
    344c:	2f 01       	movw	r4, r30
    344e:	88 23       	and	r24, r24
    3450:	09 f4       	brne	.+2      	; 0x3454 <vfprintf+0x46>
    3452:	b2 c1       	rjmp	.+868    	; 0x37b8 <vfprintf+0x3aa>
    3454:	85 32       	cpi	r24, 0x25	; 37
    3456:	39 f4       	brne	.+14     	; 0x3466 <vfprintf+0x58>
    3458:	23 fd       	sbrc	r18, 3
    345a:	85 91       	lpm	r24, Z+
    345c:	23 ff       	sbrs	r18, 3
    345e:	81 91       	ld	r24, Z+
    3460:	2f 01       	movw	r4, r30
    3462:	85 32       	cpi	r24, 0x25	; 37
    3464:	29 f4       	brne	.+10     	; 0x3470 <vfprintf+0x62>
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	b3 01       	movw	r22, r6
    346a:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <fputc>
    346e:	e7 cf       	rjmp	.-50     	; 0x343e <vfprintf+0x30>
    3470:	98 2f       	mov	r25, r24
    3472:	ff 24       	eor	r15, r15
    3474:	ee 24       	eor	r14, r14
    3476:	99 24       	eor	r9, r9
    3478:	ff e1       	ldi	r31, 0x1F	; 31
    347a:	ff 15       	cp	r31, r15
    347c:	d0 f0       	brcs	.+52     	; 0x34b2 <vfprintf+0xa4>
    347e:	9b 32       	cpi	r25, 0x2B	; 43
    3480:	69 f0       	breq	.+26     	; 0x349c <vfprintf+0x8e>
    3482:	9c 32       	cpi	r25, 0x2C	; 44
    3484:	28 f4       	brcc	.+10     	; 0x3490 <vfprintf+0x82>
    3486:	90 32       	cpi	r25, 0x20	; 32
    3488:	59 f0       	breq	.+22     	; 0x34a0 <vfprintf+0x92>
    348a:	93 32       	cpi	r25, 0x23	; 35
    348c:	91 f4       	brne	.+36     	; 0x34b2 <vfprintf+0xa4>
    348e:	0e c0       	rjmp	.+28     	; 0x34ac <vfprintf+0x9e>
    3490:	9d 32       	cpi	r25, 0x2D	; 45
    3492:	49 f0       	breq	.+18     	; 0x34a6 <vfprintf+0x98>
    3494:	90 33       	cpi	r25, 0x30	; 48
    3496:	69 f4       	brne	.+26     	; 0x34b2 <vfprintf+0xa4>
    3498:	41 e0       	ldi	r20, 0x01	; 1
    349a:	24 c0       	rjmp	.+72     	; 0x34e4 <vfprintf+0xd6>
    349c:	52 e0       	ldi	r21, 0x02	; 2
    349e:	f5 2a       	or	r15, r21
    34a0:	84 e0       	ldi	r24, 0x04	; 4
    34a2:	f8 2a       	or	r15, r24
    34a4:	28 c0       	rjmp	.+80     	; 0x34f6 <vfprintf+0xe8>
    34a6:	98 e0       	ldi	r25, 0x08	; 8
    34a8:	f9 2a       	or	r15, r25
    34aa:	25 c0       	rjmp	.+74     	; 0x34f6 <vfprintf+0xe8>
    34ac:	e0 e1       	ldi	r30, 0x10	; 16
    34ae:	fe 2a       	or	r15, r30
    34b0:	22 c0       	rjmp	.+68     	; 0x34f6 <vfprintf+0xe8>
    34b2:	f7 fc       	sbrc	r15, 7
    34b4:	29 c0       	rjmp	.+82     	; 0x3508 <vfprintf+0xfa>
    34b6:	89 2f       	mov	r24, r25
    34b8:	80 53       	subi	r24, 0x30	; 48
    34ba:	8a 30       	cpi	r24, 0x0A	; 10
    34bc:	70 f4       	brcc	.+28     	; 0x34da <vfprintf+0xcc>
    34be:	f6 fe       	sbrs	r15, 6
    34c0:	05 c0       	rjmp	.+10     	; 0x34cc <vfprintf+0xbe>
    34c2:	98 9c       	mul	r9, r8
    34c4:	90 2c       	mov	r9, r0
    34c6:	11 24       	eor	r1, r1
    34c8:	98 0e       	add	r9, r24
    34ca:	15 c0       	rjmp	.+42     	; 0x34f6 <vfprintf+0xe8>
    34cc:	e8 9c       	mul	r14, r8
    34ce:	e0 2c       	mov	r14, r0
    34d0:	11 24       	eor	r1, r1
    34d2:	e8 0e       	add	r14, r24
    34d4:	f0 e2       	ldi	r31, 0x20	; 32
    34d6:	ff 2a       	or	r15, r31
    34d8:	0e c0       	rjmp	.+28     	; 0x34f6 <vfprintf+0xe8>
    34da:	9e 32       	cpi	r25, 0x2E	; 46
    34dc:	29 f4       	brne	.+10     	; 0x34e8 <vfprintf+0xda>
    34de:	f6 fc       	sbrc	r15, 6
    34e0:	6b c1       	rjmp	.+726    	; 0x37b8 <vfprintf+0x3aa>
    34e2:	40 e4       	ldi	r20, 0x40	; 64
    34e4:	f4 2a       	or	r15, r20
    34e6:	07 c0       	rjmp	.+14     	; 0x34f6 <vfprintf+0xe8>
    34e8:	9c 36       	cpi	r25, 0x6C	; 108
    34ea:	19 f4       	brne	.+6      	; 0x34f2 <vfprintf+0xe4>
    34ec:	50 e8       	ldi	r21, 0x80	; 128
    34ee:	f5 2a       	or	r15, r21
    34f0:	02 c0       	rjmp	.+4      	; 0x34f6 <vfprintf+0xe8>
    34f2:	98 36       	cpi	r25, 0x68	; 104
    34f4:	49 f4       	brne	.+18     	; 0x3508 <vfprintf+0xfa>
    34f6:	f2 01       	movw	r30, r4
    34f8:	23 fd       	sbrc	r18, 3
    34fa:	95 91       	lpm	r25, Z+
    34fc:	23 ff       	sbrs	r18, 3
    34fe:	91 91       	ld	r25, Z+
    3500:	2f 01       	movw	r4, r30
    3502:	99 23       	and	r25, r25
    3504:	09 f0       	breq	.+2      	; 0x3508 <vfprintf+0xfa>
    3506:	b8 cf       	rjmp	.-144    	; 0x3478 <vfprintf+0x6a>
    3508:	89 2f       	mov	r24, r25
    350a:	85 54       	subi	r24, 0x45	; 69
    350c:	83 30       	cpi	r24, 0x03	; 3
    350e:	18 f0       	brcs	.+6      	; 0x3516 <vfprintf+0x108>
    3510:	80 52       	subi	r24, 0x20	; 32
    3512:	83 30       	cpi	r24, 0x03	; 3
    3514:	38 f4       	brcc	.+14     	; 0x3524 <vfprintf+0x116>
    3516:	44 e0       	ldi	r20, 0x04	; 4
    3518:	50 e0       	ldi	r21, 0x00	; 0
    351a:	a4 0e       	add	r10, r20
    351c:	b5 1e       	adc	r11, r21
    351e:	5f e3       	ldi	r21, 0x3F	; 63
    3520:	59 83       	std	Y+1, r21	; 0x01
    3522:	0f c0       	rjmp	.+30     	; 0x3542 <vfprintf+0x134>
    3524:	93 36       	cpi	r25, 0x63	; 99
    3526:	31 f0       	breq	.+12     	; 0x3534 <vfprintf+0x126>
    3528:	93 37       	cpi	r25, 0x73	; 115
    352a:	79 f0       	breq	.+30     	; 0x354a <vfprintf+0x13c>
    352c:	93 35       	cpi	r25, 0x53	; 83
    352e:	09 f0       	breq	.+2      	; 0x3532 <vfprintf+0x124>
    3530:	56 c0       	rjmp	.+172    	; 0x35de <vfprintf+0x1d0>
    3532:	20 c0       	rjmp	.+64     	; 0x3574 <vfprintf+0x166>
    3534:	f5 01       	movw	r30, r10
    3536:	80 81       	ld	r24, Z
    3538:	89 83       	std	Y+1, r24	; 0x01
    353a:	42 e0       	ldi	r20, 0x02	; 2
    353c:	50 e0       	ldi	r21, 0x00	; 0
    353e:	a4 0e       	add	r10, r20
    3540:	b5 1e       	adc	r11, r21
    3542:	61 01       	movw	r12, r2
    3544:	01 e0       	ldi	r16, 0x01	; 1
    3546:	10 e0       	ldi	r17, 0x00	; 0
    3548:	12 c0       	rjmp	.+36     	; 0x356e <vfprintf+0x160>
    354a:	f5 01       	movw	r30, r10
    354c:	c0 80       	ld	r12, Z
    354e:	d1 80       	ldd	r13, Z+1	; 0x01
    3550:	f6 fc       	sbrc	r15, 6
    3552:	03 c0       	rjmp	.+6      	; 0x355a <vfprintf+0x14c>
    3554:	6f ef       	ldi	r22, 0xFF	; 255
    3556:	7f ef       	ldi	r23, 0xFF	; 255
    3558:	02 c0       	rjmp	.+4      	; 0x355e <vfprintf+0x150>
    355a:	69 2d       	mov	r22, r9
    355c:	70 e0       	ldi	r23, 0x00	; 0
    355e:	42 e0       	ldi	r20, 0x02	; 2
    3560:	50 e0       	ldi	r21, 0x00	; 0
    3562:	a4 0e       	add	r10, r20
    3564:	b5 1e       	adc	r11, r21
    3566:	c6 01       	movw	r24, r12
    3568:	0e 94 ef 1b 	call	0x37de	; 0x37de <strnlen>
    356c:	8c 01       	movw	r16, r24
    356e:	5f e7       	ldi	r21, 0x7F	; 127
    3570:	f5 22       	and	r15, r21
    3572:	14 c0       	rjmp	.+40     	; 0x359c <vfprintf+0x18e>
    3574:	f5 01       	movw	r30, r10
    3576:	c0 80       	ld	r12, Z
    3578:	d1 80       	ldd	r13, Z+1	; 0x01
    357a:	f6 fc       	sbrc	r15, 6
    357c:	03 c0       	rjmp	.+6      	; 0x3584 <vfprintf+0x176>
    357e:	6f ef       	ldi	r22, 0xFF	; 255
    3580:	7f ef       	ldi	r23, 0xFF	; 255
    3582:	02 c0       	rjmp	.+4      	; 0x3588 <vfprintf+0x17a>
    3584:	69 2d       	mov	r22, r9
    3586:	70 e0       	ldi	r23, 0x00	; 0
    3588:	42 e0       	ldi	r20, 0x02	; 2
    358a:	50 e0       	ldi	r21, 0x00	; 0
    358c:	a4 0e       	add	r10, r20
    358e:	b5 1e       	adc	r11, r21
    3590:	c6 01       	movw	r24, r12
    3592:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <strnlen_P>
    3596:	8c 01       	movw	r16, r24
    3598:	50 e8       	ldi	r21, 0x80	; 128
    359a:	f5 2a       	or	r15, r21
    359c:	f3 fe       	sbrs	r15, 3
    359e:	07 c0       	rjmp	.+14     	; 0x35ae <vfprintf+0x1a0>
    35a0:	1a c0       	rjmp	.+52     	; 0x35d6 <vfprintf+0x1c8>
    35a2:	80 e2       	ldi	r24, 0x20	; 32
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	b3 01       	movw	r22, r6
    35a8:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <fputc>
    35ac:	ea 94       	dec	r14
    35ae:	8e 2d       	mov	r24, r14
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	08 17       	cp	r16, r24
    35b4:	19 07       	cpc	r17, r25
    35b6:	a8 f3       	brcs	.-22     	; 0x35a2 <vfprintf+0x194>
    35b8:	0e c0       	rjmp	.+28     	; 0x35d6 <vfprintf+0x1c8>
    35ba:	f6 01       	movw	r30, r12
    35bc:	f7 fc       	sbrc	r15, 7
    35be:	85 91       	lpm	r24, Z+
    35c0:	f7 fe       	sbrs	r15, 7
    35c2:	81 91       	ld	r24, Z+
    35c4:	6f 01       	movw	r12, r30
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	b3 01       	movw	r22, r6
    35ca:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <fputc>
    35ce:	e1 10       	cpse	r14, r1
    35d0:	ea 94       	dec	r14
    35d2:	01 50       	subi	r16, 0x01	; 1
    35d4:	10 40       	sbci	r17, 0x00	; 0
    35d6:	01 15       	cp	r16, r1
    35d8:	11 05       	cpc	r17, r1
    35da:	79 f7       	brne	.-34     	; 0x35ba <vfprintf+0x1ac>
    35dc:	ea c0       	rjmp	.+468    	; 0x37b2 <vfprintf+0x3a4>
    35de:	94 36       	cpi	r25, 0x64	; 100
    35e0:	11 f0       	breq	.+4      	; 0x35e6 <vfprintf+0x1d8>
    35e2:	99 36       	cpi	r25, 0x69	; 105
    35e4:	69 f5       	brne	.+90     	; 0x3640 <vfprintf+0x232>
    35e6:	f7 fe       	sbrs	r15, 7
    35e8:	08 c0       	rjmp	.+16     	; 0x35fa <vfprintf+0x1ec>
    35ea:	f5 01       	movw	r30, r10
    35ec:	20 81       	ld	r18, Z
    35ee:	31 81       	ldd	r19, Z+1	; 0x01
    35f0:	42 81       	ldd	r20, Z+2	; 0x02
    35f2:	53 81       	ldd	r21, Z+3	; 0x03
    35f4:	84 e0       	ldi	r24, 0x04	; 4
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	0a c0       	rjmp	.+20     	; 0x360e <vfprintf+0x200>
    35fa:	f5 01       	movw	r30, r10
    35fc:	80 81       	ld	r24, Z
    35fe:	91 81       	ldd	r25, Z+1	; 0x01
    3600:	9c 01       	movw	r18, r24
    3602:	44 27       	eor	r20, r20
    3604:	37 fd       	sbrc	r19, 7
    3606:	40 95       	com	r20
    3608:	54 2f       	mov	r21, r20
    360a:	82 e0       	ldi	r24, 0x02	; 2
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	a8 0e       	add	r10, r24
    3610:	b9 1e       	adc	r11, r25
    3612:	9f e6       	ldi	r25, 0x6F	; 111
    3614:	f9 22       	and	r15, r25
    3616:	57 ff       	sbrs	r21, 7
    3618:	09 c0       	rjmp	.+18     	; 0x362c <vfprintf+0x21e>
    361a:	50 95       	com	r21
    361c:	40 95       	com	r20
    361e:	30 95       	com	r19
    3620:	21 95       	neg	r18
    3622:	3f 4f       	sbci	r19, 0xFF	; 255
    3624:	4f 4f       	sbci	r20, 0xFF	; 255
    3626:	5f 4f       	sbci	r21, 0xFF	; 255
    3628:	e0 e8       	ldi	r30, 0x80	; 128
    362a:	fe 2a       	or	r15, r30
    362c:	ca 01       	movw	r24, r20
    362e:	b9 01       	movw	r22, r18
    3630:	a1 01       	movw	r20, r2
    3632:	2a e0       	ldi	r18, 0x0A	; 10
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	0e 94 26 1c 	call	0x384c	; 0x384c <__ultoa_invert>
    363a:	d8 2e       	mov	r13, r24
    363c:	d2 18       	sub	r13, r2
    363e:	40 c0       	rjmp	.+128    	; 0x36c0 <vfprintf+0x2b2>
    3640:	95 37       	cpi	r25, 0x75	; 117
    3642:	29 f4       	brne	.+10     	; 0x364e <vfprintf+0x240>
    3644:	1f 2d       	mov	r17, r15
    3646:	1f 7e       	andi	r17, 0xEF	; 239
    3648:	2a e0       	ldi	r18, 0x0A	; 10
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	1d c0       	rjmp	.+58     	; 0x3688 <vfprintf+0x27a>
    364e:	1f 2d       	mov	r17, r15
    3650:	19 7f       	andi	r17, 0xF9	; 249
    3652:	9f 36       	cpi	r25, 0x6F	; 111
    3654:	61 f0       	breq	.+24     	; 0x366e <vfprintf+0x260>
    3656:	90 37       	cpi	r25, 0x70	; 112
    3658:	20 f4       	brcc	.+8      	; 0x3662 <vfprintf+0x254>
    365a:	98 35       	cpi	r25, 0x58	; 88
    365c:	09 f0       	breq	.+2      	; 0x3660 <vfprintf+0x252>
    365e:	ac c0       	rjmp	.+344    	; 0x37b8 <vfprintf+0x3aa>
    3660:	0f c0       	rjmp	.+30     	; 0x3680 <vfprintf+0x272>
    3662:	90 37       	cpi	r25, 0x70	; 112
    3664:	39 f0       	breq	.+14     	; 0x3674 <vfprintf+0x266>
    3666:	98 37       	cpi	r25, 0x78	; 120
    3668:	09 f0       	breq	.+2      	; 0x366c <vfprintf+0x25e>
    366a:	a6 c0       	rjmp	.+332    	; 0x37b8 <vfprintf+0x3aa>
    366c:	04 c0       	rjmp	.+8      	; 0x3676 <vfprintf+0x268>
    366e:	28 e0       	ldi	r18, 0x08	; 8
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	0a c0       	rjmp	.+20     	; 0x3688 <vfprintf+0x27a>
    3674:	10 61       	ori	r17, 0x10	; 16
    3676:	14 fd       	sbrc	r17, 4
    3678:	14 60       	ori	r17, 0x04	; 4
    367a:	20 e1       	ldi	r18, 0x10	; 16
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	04 c0       	rjmp	.+8      	; 0x3688 <vfprintf+0x27a>
    3680:	14 fd       	sbrc	r17, 4
    3682:	16 60       	ori	r17, 0x06	; 6
    3684:	20 e1       	ldi	r18, 0x10	; 16
    3686:	32 e0       	ldi	r19, 0x02	; 2
    3688:	17 ff       	sbrs	r17, 7
    368a:	08 c0       	rjmp	.+16     	; 0x369c <vfprintf+0x28e>
    368c:	f5 01       	movw	r30, r10
    368e:	60 81       	ld	r22, Z
    3690:	71 81       	ldd	r23, Z+1	; 0x01
    3692:	82 81       	ldd	r24, Z+2	; 0x02
    3694:	93 81       	ldd	r25, Z+3	; 0x03
    3696:	44 e0       	ldi	r20, 0x04	; 4
    3698:	50 e0       	ldi	r21, 0x00	; 0
    369a:	08 c0       	rjmp	.+16     	; 0x36ac <vfprintf+0x29e>
    369c:	f5 01       	movw	r30, r10
    369e:	80 81       	ld	r24, Z
    36a0:	91 81       	ldd	r25, Z+1	; 0x01
    36a2:	bc 01       	movw	r22, r24
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	42 e0       	ldi	r20, 0x02	; 2
    36aa:	50 e0       	ldi	r21, 0x00	; 0
    36ac:	a4 0e       	add	r10, r20
    36ae:	b5 1e       	adc	r11, r21
    36b0:	a1 01       	movw	r20, r2
    36b2:	0e 94 26 1c 	call	0x384c	; 0x384c <__ultoa_invert>
    36b6:	d8 2e       	mov	r13, r24
    36b8:	d2 18       	sub	r13, r2
    36ba:	8f e7       	ldi	r24, 0x7F	; 127
    36bc:	f8 2e       	mov	r15, r24
    36be:	f1 22       	and	r15, r17
    36c0:	f6 fe       	sbrs	r15, 6
    36c2:	0b c0       	rjmp	.+22     	; 0x36da <vfprintf+0x2cc>
    36c4:	5e ef       	ldi	r21, 0xFE	; 254
    36c6:	f5 22       	and	r15, r21
    36c8:	d9 14       	cp	r13, r9
    36ca:	38 f4       	brcc	.+14     	; 0x36da <vfprintf+0x2cc>
    36cc:	f4 fe       	sbrs	r15, 4
    36ce:	07 c0       	rjmp	.+14     	; 0x36de <vfprintf+0x2d0>
    36d0:	f2 fc       	sbrc	r15, 2
    36d2:	05 c0       	rjmp	.+10     	; 0x36de <vfprintf+0x2d0>
    36d4:	8f ee       	ldi	r24, 0xEF	; 239
    36d6:	f8 22       	and	r15, r24
    36d8:	02 c0       	rjmp	.+4      	; 0x36de <vfprintf+0x2d0>
    36da:	1d 2d       	mov	r17, r13
    36dc:	01 c0       	rjmp	.+2      	; 0x36e0 <vfprintf+0x2d2>
    36de:	19 2d       	mov	r17, r9
    36e0:	f4 fe       	sbrs	r15, 4
    36e2:	0d c0       	rjmp	.+26     	; 0x36fe <vfprintf+0x2f0>
    36e4:	fe 01       	movw	r30, r28
    36e6:	ed 0d       	add	r30, r13
    36e8:	f1 1d       	adc	r31, r1
    36ea:	80 81       	ld	r24, Z
    36ec:	80 33       	cpi	r24, 0x30	; 48
    36ee:	19 f4       	brne	.+6      	; 0x36f6 <vfprintf+0x2e8>
    36f0:	99 ee       	ldi	r25, 0xE9	; 233
    36f2:	f9 22       	and	r15, r25
    36f4:	08 c0       	rjmp	.+16     	; 0x3706 <vfprintf+0x2f8>
    36f6:	1f 5f       	subi	r17, 0xFF	; 255
    36f8:	f2 fe       	sbrs	r15, 2
    36fa:	05 c0       	rjmp	.+10     	; 0x3706 <vfprintf+0x2f8>
    36fc:	03 c0       	rjmp	.+6      	; 0x3704 <vfprintf+0x2f6>
    36fe:	8f 2d       	mov	r24, r15
    3700:	86 78       	andi	r24, 0x86	; 134
    3702:	09 f0       	breq	.+2      	; 0x3706 <vfprintf+0x2f8>
    3704:	1f 5f       	subi	r17, 0xFF	; 255
    3706:	0f 2d       	mov	r16, r15
    3708:	f3 fc       	sbrc	r15, 3
    370a:	14 c0       	rjmp	.+40     	; 0x3734 <vfprintf+0x326>
    370c:	f0 fe       	sbrs	r15, 0
    370e:	0f c0       	rjmp	.+30     	; 0x372e <vfprintf+0x320>
    3710:	1e 15       	cp	r17, r14
    3712:	10 f0       	brcs	.+4      	; 0x3718 <vfprintf+0x30a>
    3714:	9d 2c       	mov	r9, r13
    3716:	0b c0       	rjmp	.+22     	; 0x372e <vfprintf+0x320>
    3718:	9d 2c       	mov	r9, r13
    371a:	9e 0c       	add	r9, r14
    371c:	91 1a       	sub	r9, r17
    371e:	1e 2d       	mov	r17, r14
    3720:	06 c0       	rjmp	.+12     	; 0x372e <vfprintf+0x320>
    3722:	80 e2       	ldi	r24, 0x20	; 32
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	b3 01       	movw	r22, r6
    3728:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <fputc>
    372c:	1f 5f       	subi	r17, 0xFF	; 255
    372e:	1e 15       	cp	r17, r14
    3730:	c0 f3       	brcs	.-16     	; 0x3722 <vfprintf+0x314>
    3732:	04 c0       	rjmp	.+8      	; 0x373c <vfprintf+0x32e>
    3734:	1e 15       	cp	r17, r14
    3736:	10 f4       	brcc	.+4      	; 0x373c <vfprintf+0x32e>
    3738:	e1 1a       	sub	r14, r17
    373a:	01 c0       	rjmp	.+2      	; 0x373e <vfprintf+0x330>
    373c:	ee 24       	eor	r14, r14
    373e:	04 ff       	sbrs	r16, 4
    3740:	0f c0       	rjmp	.+30     	; 0x3760 <vfprintf+0x352>
    3742:	80 e3       	ldi	r24, 0x30	; 48
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	b3 01       	movw	r22, r6
    3748:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <fputc>
    374c:	02 ff       	sbrs	r16, 2
    374e:	1d c0       	rjmp	.+58     	; 0x378a <vfprintf+0x37c>
    3750:	01 fd       	sbrc	r16, 1
    3752:	03 c0       	rjmp	.+6      	; 0x375a <vfprintf+0x34c>
    3754:	88 e7       	ldi	r24, 0x78	; 120
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	0e c0       	rjmp	.+28     	; 0x3776 <vfprintf+0x368>
    375a:	88 e5       	ldi	r24, 0x58	; 88
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	0b c0       	rjmp	.+22     	; 0x3776 <vfprintf+0x368>
    3760:	80 2f       	mov	r24, r16
    3762:	86 78       	andi	r24, 0x86	; 134
    3764:	91 f0       	breq	.+36     	; 0x378a <vfprintf+0x37c>
    3766:	01 ff       	sbrs	r16, 1
    3768:	02 c0       	rjmp	.+4      	; 0x376e <vfprintf+0x360>
    376a:	8b e2       	ldi	r24, 0x2B	; 43
    376c:	01 c0       	rjmp	.+2      	; 0x3770 <vfprintf+0x362>
    376e:	80 e2       	ldi	r24, 0x20	; 32
    3770:	f7 fc       	sbrc	r15, 7
    3772:	8d e2       	ldi	r24, 0x2D	; 45
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	b3 01       	movw	r22, r6
    3778:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <fputc>
    377c:	06 c0       	rjmp	.+12     	; 0x378a <vfprintf+0x37c>
    377e:	80 e3       	ldi	r24, 0x30	; 48
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	b3 01       	movw	r22, r6
    3784:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <fputc>
    3788:	9a 94       	dec	r9
    378a:	d9 14       	cp	r13, r9
    378c:	c0 f3       	brcs	.-16     	; 0x377e <vfprintf+0x370>
    378e:	da 94       	dec	r13
    3790:	f1 01       	movw	r30, r2
    3792:	ed 0d       	add	r30, r13
    3794:	f1 1d       	adc	r31, r1
    3796:	80 81       	ld	r24, Z
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	b3 01       	movw	r22, r6
    379c:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <fputc>
    37a0:	dd 20       	and	r13, r13
    37a2:	a9 f7       	brne	.-22     	; 0x378e <vfprintf+0x380>
    37a4:	06 c0       	rjmp	.+12     	; 0x37b2 <vfprintf+0x3a4>
    37a6:	80 e2       	ldi	r24, 0x20	; 32
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	b3 01       	movw	r22, r6
    37ac:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <fputc>
    37b0:	ea 94       	dec	r14
    37b2:	ee 20       	and	r14, r14
    37b4:	c1 f7       	brne	.-16     	; 0x37a6 <vfprintf+0x398>
    37b6:	43 ce       	rjmp	.-890    	; 0x343e <vfprintf+0x30>
    37b8:	f3 01       	movw	r30, r6
    37ba:	66 81       	ldd	r22, Z+6	; 0x06
    37bc:	77 81       	ldd	r23, Z+7	; 0x07
    37be:	cb 01       	movw	r24, r22
    37c0:	2b 96       	adiw	r28, 0x0b	; 11
    37c2:	e2 e1       	ldi	r30, 0x12	; 18
    37c4:	0c 94 95 19 	jmp	0x332a	; 0x332a <__epilogue_restores__>

000037c8 <strnlen_P>:
    37c8:	fc 01       	movw	r30, r24
    37ca:	05 90       	lpm	r0, Z+
    37cc:	61 50       	subi	r22, 0x01	; 1
    37ce:	70 40       	sbci	r23, 0x00	; 0
    37d0:	01 10       	cpse	r0, r1
    37d2:	d8 f7       	brcc	.-10     	; 0x37ca <strnlen_P+0x2>
    37d4:	80 95       	com	r24
    37d6:	90 95       	com	r25
    37d8:	8e 0f       	add	r24, r30
    37da:	9f 1f       	adc	r25, r31
    37dc:	08 95       	ret

000037de <strnlen>:
    37de:	fc 01       	movw	r30, r24
    37e0:	61 50       	subi	r22, 0x01	; 1
    37e2:	70 40       	sbci	r23, 0x00	; 0
    37e4:	01 90       	ld	r0, Z+
    37e6:	01 10       	cpse	r0, r1
    37e8:	d8 f7       	brcc	.-10     	; 0x37e0 <strnlen+0x2>
    37ea:	80 95       	com	r24
    37ec:	90 95       	com	r25
    37ee:	8e 0f       	add	r24, r30
    37f0:	9f 1f       	adc	r25, r31
    37f2:	08 95       	ret

000037f4 <fputc>:
    37f4:	0f 93       	push	r16
    37f6:	1f 93       	push	r17
    37f8:	cf 93       	push	r28
    37fa:	df 93       	push	r29
    37fc:	8c 01       	movw	r16, r24
    37fe:	eb 01       	movw	r28, r22
    3800:	8b 81       	ldd	r24, Y+3	; 0x03
    3802:	81 ff       	sbrs	r24, 1
    3804:	1b c0       	rjmp	.+54     	; 0x383c <fputc+0x48>
    3806:	82 ff       	sbrs	r24, 2
    3808:	0d c0       	rjmp	.+26     	; 0x3824 <fputc+0x30>
    380a:	2e 81       	ldd	r18, Y+6	; 0x06
    380c:	3f 81       	ldd	r19, Y+7	; 0x07
    380e:	8c 81       	ldd	r24, Y+4	; 0x04
    3810:	9d 81       	ldd	r25, Y+5	; 0x05
    3812:	28 17       	cp	r18, r24
    3814:	39 07       	cpc	r19, r25
    3816:	64 f4       	brge	.+24     	; 0x3830 <fputc+0x3c>
    3818:	e8 81       	ld	r30, Y
    381a:	f9 81       	ldd	r31, Y+1	; 0x01
    381c:	01 93       	st	Z+, r16
    381e:	f9 83       	std	Y+1, r31	; 0x01
    3820:	e8 83       	st	Y, r30
    3822:	06 c0       	rjmp	.+12     	; 0x3830 <fputc+0x3c>
    3824:	e8 85       	ldd	r30, Y+8	; 0x08
    3826:	f9 85       	ldd	r31, Y+9	; 0x09
    3828:	80 2f       	mov	r24, r16
    382a:	09 95       	icall
    382c:	89 2b       	or	r24, r25
    382e:	31 f4       	brne	.+12     	; 0x383c <fputc+0x48>
    3830:	8e 81       	ldd	r24, Y+6	; 0x06
    3832:	9f 81       	ldd	r25, Y+7	; 0x07
    3834:	01 96       	adiw	r24, 0x01	; 1
    3836:	9f 83       	std	Y+7, r25	; 0x07
    3838:	8e 83       	std	Y+6, r24	; 0x06
    383a:	02 c0       	rjmp	.+4      	; 0x3840 <fputc+0x4c>
    383c:	0f ef       	ldi	r16, 0xFF	; 255
    383e:	1f ef       	ldi	r17, 0xFF	; 255
    3840:	c8 01       	movw	r24, r16
    3842:	df 91       	pop	r29
    3844:	cf 91       	pop	r28
    3846:	1f 91       	pop	r17
    3848:	0f 91       	pop	r16
    384a:	08 95       	ret

0000384c <__ultoa_invert>:
    384c:	fa 01       	movw	r30, r20
    384e:	aa 27       	eor	r26, r26
    3850:	28 30       	cpi	r18, 0x08	; 8
    3852:	51 f1       	breq	.+84     	; 0x38a8 <__ultoa_invert+0x5c>
    3854:	20 31       	cpi	r18, 0x10	; 16
    3856:	81 f1       	breq	.+96     	; 0x38b8 <__ultoa_invert+0x6c>
    3858:	e8 94       	clt
    385a:	6f 93       	push	r22
    385c:	6e 7f       	andi	r22, 0xFE	; 254
    385e:	6e 5f       	subi	r22, 0xFE	; 254
    3860:	7f 4f       	sbci	r23, 0xFF	; 255
    3862:	8f 4f       	sbci	r24, 0xFF	; 255
    3864:	9f 4f       	sbci	r25, 0xFF	; 255
    3866:	af 4f       	sbci	r26, 0xFF	; 255
    3868:	b1 e0       	ldi	r27, 0x01	; 1
    386a:	3e d0       	rcall	.+124    	; 0x38e8 <__ultoa_invert+0x9c>
    386c:	b4 e0       	ldi	r27, 0x04	; 4
    386e:	3c d0       	rcall	.+120    	; 0x38e8 <__ultoa_invert+0x9c>
    3870:	67 0f       	add	r22, r23
    3872:	78 1f       	adc	r23, r24
    3874:	89 1f       	adc	r24, r25
    3876:	9a 1f       	adc	r25, r26
    3878:	a1 1d       	adc	r26, r1
    387a:	68 0f       	add	r22, r24
    387c:	79 1f       	adc	r23, r25
    387e:	8a 1f       	adc	r24, r26
    3880:	91 1d       	adc	r25, r1
    3882:	a1 1d       	adc	r26, r1
    3884:	6a 0f       	add	r22, r26
    3886:	71 1d       	adc	r23, r1
    3888:	81 1d       	adc	r24, r1
    388a:	91 1d       	adc	r25, r1
    388c:	a1 1d       	adc	r26, r1
    388e:	20 d0       	rcall	.+64     	; 0x38d0 <__ultoa_invert+0x84>
    3890:	09 f4       	brne	.+2      	; 0x3894 <__ultoa_invert+0x48>
    3892:	68 94       	set
    3894:	3f 91       	pop	r19
    3896:	2a e0       	ldi	r18, 0x0A	; 10
    3898:	26 9f       	mul	r18, r22
    389a:	11 24       	eor	r1, r1
    389c:	30 19       	sub	r19, r0
    389e:	30 5d       	subi	r19, 0xD0	; 208
    38a0:	31 93       	st	Z+, r19
    38a2:	de f6       	brtc	.-74     	; 0x385a <__ultoa_invert+0xe>
    38a4:	cf 01       	movw	r24, r30
    38a6:	08 95       	ret
    38a8:	46 2f       	mov	r20, r22
    38aa:	47 70       	andi	r20, 0x07	; 7
    38ac:	40 5d       	subi	r20, 0xD0	; 208
    38ae:	41 93       	st	Z+, r20
    38b0:	b3 e0       	ldi	r27, 0x03	; 3
    38b2:	0f d0       	rcall	.+30     	; 0x38d2 <__ultoa_invert+0x86>
    38b4:	c9 f7       	brne	.-14     	; 0x38a8 <__ultoa_invert+0x5c>
    38b6:	f6 cf       	rjmp	.-20     	; 0x38a4 <__ultoa_invert+0x58>
    38b8:	46 2f       	mov	r20, r22
    38ba:	4f 70       	andi	r20, 0x0F	; 15
    38bc:	40 5d       	subi	r20, 0xD0	; 208
    38be:	4a 33       	cpi	r20, 0x3A	; 58
    38c0:	18 f0       	brcs	.+6      	; 0x38c8 <__ultoa_invert+0x7c>
    38c2:	49 5d       	subi	r20, 0xD9	; 217
    38c4:	31 fd       	sbrc	r19, 1
    38c6:	40 52       	subi	r20, 0x20	; 32
    38c8:	41 93       	st	Z+, r20
    38ca:	02 d0       	rcall	.+4      	; 0x38d0 <__ultoa_invert+0x84>
    38cc:	a9 f7       	brne	.-22     	; 0x38b8 <__ultoa_invert+0x6c>
    38ce:	ea cf       	rjmp	.-44     	; 0x38a4 <__ultoa_invert+0x58>
    38d0:	b4 e0       	ldi	r27, 0x04	; 4
    38d2:	a6 95       	lsr	r26
    38d4:	97 95       	ror	r25
    38d6:	87 95       	ror	r24
    38d8:	77 95       	ror	r23
    38da:	67 95       	ror	r22
    38dc:	ba 95       	dec	r27
    38de:	c9 f7       	brne	.-14     	; 0x38d2 <__ultoa_invert+0x86>
    38e0:	00 97       	sbiw	r24, 0x00	; 0
    38e2:	61 05       	cpc	r22, r1
    38e4:	71 05       	cpc	r23, r1
    38e6:	08 95       	ret
    38e8:	9b 01       	movw	r18, r22
    38ea:	ac 01       	movw	r20, r24
    38ec:	0a 2e       	mov	r0, r26
    38ee:	06 94       	lsr	r0
    38f0:	57 95       	ror	r21
    38f2:	47 95       	ror	r20
    38f4:	37 95       	ror	r19
    38f6:	27 95       	ror	r18
    38f8:	ba 95       	dec	r27
    38fa:	c9 f7       	brne	.-14     	; 0x38ee <__ultoa_invert+0xa2>
    38fc:	62 0f       	add	r22, r18
    38fe:	73 1f       	adc	r23, r19
    3900:	84 1f       	adc	r24, r20
    3902:	95 1f       	adc	r25, r21
    3904:	a0 1d       	adc	r26, r0
    3906:	08 95       	ret

00003908 <_exit>:
    3908:	f8 94       	cli

0000390a <__stop_program>:
    390a:	ff cf       	rjmp	.-2      	; 0x390a <__stop_program>
